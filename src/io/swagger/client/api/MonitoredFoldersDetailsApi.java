/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.MonitoredFolderDetailDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MonitoredFoldersDetailsApi {
    private ApiClient apiClient;

    public MonitoredFoldersDetailsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MonitoredFoldersDetailsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for monitoredFoldersDetailsMonitoredFoldersDetailDelete
     * @param monitoredFoldersDetailId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersDetailsMonitoredFoldersDetailDeleteCall(String monitoredFoldersDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/MonitoredFoldersDetails/{monitoredFoldersDetailId}"
            .replaceAll("\\{" + "monitoredFoldersDetailId" + "\\}", apiClient.escapeString(monitoredFoldersDetailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call monitoredFoldersDetailsMonitoredFoldersDetailDeleteValidateBeforeCall(String monitoredFoldersDetailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'monitoredFoldersDetailId' is set
        if (monitoredFoldersDetailId == null) {
            throw new ApiException("Missing the required parameter 'monitoredFoldersDetailId' when calling monitoredFoldersDetailsMonitoredFoldersDetailDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = monitoredFoldersDetailsMonitoredFoldersDetailDeleteCall(monitoredFoldersDetailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a monitored folders detail
     * 
     * @param monitoredFoldersDetailId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void monitoredFoldersDetailsMonitoredFoldersDetailDelete(String monitoredFoldersDetailId) throws ApiException {
        monitoredFoldersDetailsMonitoredFoldersDetailDeleteWithHttpInfo(monitoredFoldersDetailId);
    }

    /**
     * This call deletes a monitored folders detail
     * 
     * @param monitoredFoldersDetailId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> monitoredFoldersDetailsMonitoredFoldersDetailDeleteWithHttpInfo(String monitoredFoldersDetailId) throws ApiException {
        com.squareup.okhttp.Call call = monitoredFoldersDetailsMonitoredFoldersDetailDeleteValidateBeforeCall(monitoredFoldersDetailId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes a monitored folders detail (asynchronously)
     * 
     * @param monitoredFoldersDetailId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersDetailsMonitoredFoldersDetailDeleteAsync(String monitoredFoldersDetailId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = monitoredFoldersDetailsMonitoredFoldersDetailDeleteValidateBeforeCall(monitoredFoldersDetailId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for monitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderId
     * @param monitoredFoldersId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdCall(String monitoredFoldersId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/MonitoredFoldersDetails/bymonitoredfolder/{monitoredFoldersId}"
            .replaceAll("\\{" + "monitoredFoldersId" + "\\}", apiClient.escapeString(monitoredFoldersId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call monitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdValidateBeforeCall(String monitoredFoldersId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'monitoredFoldersId' is set
        if (monitoredFoldersId == null) {
            throw new ApiException("Missing the required parameter 'monitoredFoldersId' when calling monitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderId(Async)");
        }
        

        com.squareup.okhttp.Call call = monitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdCall(monitoredFoldersId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a monitored folders detail by monitored folder id
     * 
     * @param monitoredFoldersId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void monitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderId(String monitoredFoldersId) throws ApiException {
        monitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdWithHttpInfo(monitoredFoldersId);
    }

    /**
     * This call deletes a monitored folders detail by monitored folder id
     * 
     * @param monitoredFoldersId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> monitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdWithHttpInfo(String monitoredFoldersId) throws ApiException {
        com.squareup.okhttp.Call call = monitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdValidateBeforeCall(monitoredFoldersId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes a monitored folders detail by monitored folder id (asynchronously)
     * 
     * @param monitoredFoldersId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdAsync(String monitoredFoldersId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = monitoredFoldersDetailsMonitoredFoldersDetailDeleteByMonitoredFolderIdValidateBeforeCall(monitoredFoldersId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for monitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderId
     * @param monitoredFoldersId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdCall(String monitoredFoldersId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/MonitoredFoldersDetails/{monitoredFoldersId}"
            .replaceAll("\\{" + "monitoredFoldersId" + "\\}", apiClient.escapeString(monitoredFoldersId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call monitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdValidateBeforeCall(String monitoredFoldersId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'monitoredFoldersId' is set
        if (monitoredFoldersId == null) {
            throw new ApiException("Missing the required parameter 'monitoredFoldersId' when calling monitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderId(Async)");
        }
        

        com.squareup.okhttp.Call call = monitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdCall(monitoredFoldersId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all the monitored folders details for a gover monitored folder id
     * 
     * @param monitoredFoldersId  (required)
     * @return List&lt;MonitoredFolderDetailDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MonitoredFolderDetailDTO> monitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderId(String monitoredFoldersId) throws ApiException {
        ApiResponse<List<MonitoredFolderDetailDTO>> resp = monitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdWithHttpInfo(monitoredFoldersId);
        return resp.getData();
    }

    /**
     * This call returns all the monitored folders details for a gover monitored folder id
     * 
     * @param monitoredFoldersId  (required)
     * @return ApiResponse&lt;List&lt;MonitoredFolderDetailDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MonitoredFolderDetailDTO>> monitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdWithHttpInfo(String monitoredFoldersId) throws ApiException {
        com.squareup.okhttp.Call call = monitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdValidateBeforeCall(monitoredFoldersId, null, null);
        Type localVarReturnType = new TypeToken<List<MonitoredFolderDetailDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all the monitored folders details for a gover monitored folder id (asynchronously)
     * 
     * @param monitoredFoldersId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdAsync(String monitoredFoldersId, final ApiCallback<List<MonitoredFolderDetailDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = monitoredFoldersDetailsMonitoredFoldersDetailGetDataByDmMonitoredfolderIdValidateBeforeCall(monitoredFoldersId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MonitoredFolderDetailDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for monitoredFoldersDetailsMonitoredFoldersDetailInsert
     * @param monitoredFoldersDetail  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersDetailsMonitoredFoldersDetailInsertCall(MonitoredFolderDetailDTO monitoredFoldersDetail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = monitoredFoldersDetail;

        // create path and map variables
        String localVarPath = "/api/MonitoredFoldersDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call monitoredFoldersDetailsMonitoredFoldersDetailInsertValidateBeforeCall(MonitoredFolderDetailDTO monitoredFoldersDetail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'monitoredFoldersDetail' is set
        if (monitoredFoldersDetail == null) {
            throw new ApiException("Missing the required parameter 'monitoredFoldersDetail' when calling monitoredFoldersDetailsMonitoredFoldersDetailInsert(Async)");
        }
        

        com.squareup.okhttp.Call call = monitoredFoldersDetailsMonitoredFoldersDetailInsertCall(monitoredFoldersDetail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call insert new monitored folders detail
     * 
     * @param monitoredFoldersDetail  (required)
     * @return MonitoredFolderDetailDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitoredFolderDetailDTO monitoredFoldersDetailsMonitoredFoldersDetailInsert(MonitoredFolderDetailDTO monitoredFoldersDetail) throws ApiException {
        ApiResponse<MonitoredFolderDetailDTO> resp = monitoredFoldersDetailsMonitoredFoldersDetailInsertWithHttpInfo(monitoredFoldersDetail);
        return resp.getData();
    }

    /**
     * This call insert new monitored folders detail
     * 
     * @param monitoredFoldersDetail  (required)
     * @return ApiResponse&lt;MonitoredFolderDetailDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitoredFolderDetailDTO> monitoredFoldersDetailsMonitoredFoldersDetailInsertWithHttpInfo(MonitoredFolderDetailDTO monitoredFoldersDetail) throws ApiException {
        com.squareup.okhttp.Call call = monitoredFoldersDetailsMonitoredFoldersDetailInsertValidateBeforeCall(monitoredFoldersDetail, null, null);
        Type localVarReturnType = new TypeToken<MonitoredFolderDetailDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call insert new monitored folders detail (asynchronously)
     * 
     * @param monitoredFoldersDetail  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersDetailsMonitoredFoldersDetailInsertAsync(MonitoredFolderDetailDTO monitoredFoldersDetail, final ApiCallback<MonitoredFolderDetailDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = monitoredFoldersDetailsMonitoredFoldersDetailInsertValidateBeforeCall(monitoredFoldersDetail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitoredFolderDetailDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
