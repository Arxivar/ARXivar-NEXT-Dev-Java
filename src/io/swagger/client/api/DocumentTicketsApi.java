/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentTicketsApi {
    private ApiClient apiClient;

    public DocumentTicketsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentTicketsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for documentTicketsGetDocumentByRevisionId
     * @param revisionId Identifier of revision (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetDocumentByRevisionIdCall(Integer revisionId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DocumentTickets/ticketByRevision/{revisionId}"
            .replaceAll("\\{" + "revisionId" + "\\}", apiClient.escapeString(revisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentTicketsGetDocumentByRevisionIdValidateBeforeCall(Integer revisionId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling documentTicketsGetDocumentByRevisionId(Async)");
        }
        

        com.squareup.okhttp.Call call = documentTicketsGetDocumentByRevisionIdCall(revisionId, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the ticket for downloading a document associated to a specified revision
     * 
     * @param revisionId Identifier of revision (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String documentTicketsGetDocumentByRevisionId(Integer revisionId, Boolean forView) throws ApiException {
        ApiResponse<String> resp = documentTicketsGetDocumentByRevisionIdWithHttpInfo(revisionId, forView);
        return resp.getData();
    }

    /**
     * This call returns the ticket for downloading a document associated to a specified revision
     * 
     * @param revisionId Identifier of revision (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> documentTicketsGetDocumentByRevisionIdWithHttpInfo(Integer revisionId, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentTicketsGetDocumentByRevisionIdValidateBeforeCall(revisionId, forView, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the ticket for downloading a document associated to a specified revision (asynchronously)
     * 
     * @param revisionId Identifier of revision (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetDocumentByRevisionIdAsync(Integer revisionId, Boolean forView, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentTicketsGetDocumentByRevisionIdValidateBeforeCall(revisionId, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentTicketsGetForExternalAttachment
     * @param id Identifier of attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForExternalAttachmentCall(Integer id, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DocumentTickets/ticketProfileAttachment/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentTicketsGetForExternalAttachmentValidateBeforeCall(Integer id, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentTicketsGetForExternalAttachment(Async)");
        }
        

        com.squareup.okhttp.Call call = documentTicketsGetForExternalAttachmentCall(id, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call retrieve a ticket for downloading a file for an external profile attachment
     * 
     * @param id Identifier of attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String documentTicketsGetForExternalAttachment(Integer id, Boolean forView) throws ApiException {
        ApiResponse<String> resp = documentTicketsGetForExternalAttachmentWithHttpInfo(id, forView);
        return resp.getData();
    }

    /**
     * This call retrieve a ticket for downloading a file for an external profile attachment
     * 
     * @param id Identifier of attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> documentTicketsGetForExternalAttachmentWithHttpInfo(Integer id, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentTicketsGetForExternalAttachmentValidateBeforeCall(id, forView, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call retrieve a ticket for downloading a file for an external profile attachment (asynchronously)
     * 
     * @param id Identifier of attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForExternalAttachmentAsync(Integer id, Boolean forView, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentTicketsGetForExternalAttachmentValidateBeforeCall(id, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentTicketsGetForProcessAttachement
     * @param attachementid Identifier of attachment (required)
     * @param processId Identifier of process (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForProcessAttachementCall(Integer attachementid, Integer processId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DocumentTickets/ticketProcessattachments/{processId}/{attachementid}"
            .replaceAll("\\{" + "attachementid" + "\\}", apiClient.escapeString(attachementid.toString()))
            .replaceAll("\\{" + "processId" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentTicketsGetForProcessAttachementValidateBeforeCall(Integer attachementid, Integer processId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attachementid' is set
        if (attachementid == null) {
            throw new ApiException("Missing the required parameter 'attachementid' when calling documentTicketsGetForProcessAttachement(Async)");
        }
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling documentTicketsGetForProcessAttachement(Async)");
        }
        

        com.squareup.okhttp.Call call = documentTicketsGetForProcessAttachementCall(attachementid, processId, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the ticket for downloading a file associated with the attachment into in a process workflow
     * 
     * @param attachementid Identifier of attachment (required)
     * @param processId Identifier of process (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File documentTicketsGetForProcessAttachement(Integer attachementid, Integer processId, Boolean forView) throws ApiException {
        ApiResponse<File> resp = documentTicketsGetForProcessAttachementWithHttpInfo(attachementid, processId, forView);
        return resp.getData();
    }

    /**
     * This call returns the ticket for downloading a file associated with the attachment into in a process workflow
     * 
     * @param attachementid Identifier of attachment (required)
     * @param processId Identifier of process (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> documentTicketsGetForProcessAttachementWithHttpInfo(Integer attachementid, Integer processId, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentTicketsGetForProcessAttachementValidateBeforeCall(attachementid, processId, forView, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the ticket for downloading a file associated with the attachment into in a process workflow (asynchronously)
     * 
     * @param attachementid Identifier of attachment (required)
     * @param processId Identifier of process (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForProcessAttachementAsync(Integer attachementid, Integer processId, Boolean forView, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentTicketsGetForProcessAttachementValidateBeforeCall(attachementid, processId, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentTicketsGetForProcessDocument
     * @param processdocid Identifier of document process (required)
     * @param processId Identifier of process workflow (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForProcessDocumentCall(Integer processdocid, Integer processId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DocumentTickets/ticketProcessdocument/{processId}/{processdocid}"
            .replaceAll("\\{" + "processdocid" + "\\}", apiClient.escapeString(processdocid.toString()))
            .replaceAll("\\{" + "processId" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentTicketsGetForProcessDocumentValidateBeforeCall(Integer processdocid, Integer processId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processdocid' is set
        if (processdocid == null) {
            throw new ApiException("Missing the required parameter 'processdocid' when calling documentTicketsGetForProcessDocument(Async)");
        }
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling documentTicketsGetForProcessDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = documentTicketsGetForProcessDocumentCall(processdocid, processId, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the ticket for downloading a file associated with the document process into in a process workflow
     * 
     * @param processdocid Identifier of document process (required)
     * @param processId Identifier of process workflow (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File documentTicketsGetForProcessDocument(Integer processdocid, Integer processId, Boolean forView) throws ApiException {
        ApiResponse<File> resp = documentTicketsGetForProcessDocumentWithHttpInfo(processdocid, processId, forView);
        return resp.getData();
    }

    /**
     * This call returns the ticket for downloading a file associated with the document process into in a process workflow
     * 
     * @param processdocid Identifier of document process (required)
     * @param processId Identifier of process workflow (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> documentTicketsGetForProcessDocumentWithHttpInfo(Integer processdocid, Integer processId, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentTicketsGetForProcessDocumentValidateBeforeCall(processdocid, processId, forView, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the ticket for downloading a file associated with the document process into in a process workflow (asynchronously)
     * 
     * @param processdocid Identifier of document process (required)
     * @param processId Identifier of process workflow (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForProcessDocumentAsync(Integer processdocid, Integer processId, Boolean forView, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentTicketsGetForProcessDocumentValidateBeforeCall(processdocid, processId, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentTicketsGetForProfile
     * @param id Document Identifier (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForProfileCall(Integer id, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DocumentTickets/ticket/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentTicketsGetForProfileValidateBeforeCall(Integer id, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentTicketsGetForProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = documentTicketsGetForProfileCall(id, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the ticket for downloading a file associated with a specified profile
     * 
     * @param id Document Identifier (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File documentTicketsGetForProfile(Integer id, Boolean forView) throws ApiException {
        ApiResponse<File> resp = documentTicketsGetForProfileWithHttpInfo(id, forView);
        return resp.getData();
    }

    /**
     * This call returns the ticket for downloading a file associated with a specified profile
     * 
     * @param id Document Identifier (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> documentTicketsGetForProfileWithHttpInfo(Integer id, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentTicketsGetForProfileValidateBeforeCall(id, forView, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the ticket for downloading a file associated with a specified profile (asynchronously)
     * 
     * @param id Document Identifier (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForProfileAsync(Integer id, Boolean forView, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentTicketsGetForProfileValidateBeforeCall(id, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentTicketsGetForTask
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForTaskCall(Integer processDocId, Integer taskWorkId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DocumentTickets/ticketForTask/{processDocId}/{taskWorkId}"
            .replaceAll("\\{" + "processDocId" + "\\}", apiClient.escapeString(processDocId.toString()))
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentTicketsGetForTaskValidateBeforeCall(Integer processDocId, Integer taskWorkId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDocId' is set
        if (processDocId == null) {
            throw new ApiException("Missing the required parameter 'processDocId' when calling documentTicketsGetForTask(Async)");
        }
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling documentTicketsGetForTask(Async)");
        }
        

        com.squareup.okhttp.Call call = documentTicketsGetForTaskCall(processDocId, taskWorkId, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File documentTicketsGetForTask(Integer processDocId, Integer taskWorkId, Boolean forView) throws ApiException {
        ApiResponse<File> resp = documentTicketsGetForTaskWithHttpInfo(processDocId, taskWorkId, forView);
        return resp.getData();
    }

    /**
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> documentTicketsGetForTaskWithHttpInfo(Integer processDocId, Integer taskWorkId, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentTicketsGetForTaskValidateBeforeCall(processDocId, taskWorkId, forView, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process (asynchronously)
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForTaskAsync(Integer processDocId, Integer taskWorkId, Boolean forView, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentTicketsGetForTaskValidateBeforeCall(processDocId, taskWorkId, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentTicketsGetForTaskAttachement
     * @param id Identifier of task attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForTaskAttachementCall(Integer id, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DocumentTickets/ticketTaskattachments/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentTicketsGetForTaskAttachementValidateBeforeCall(Integer id, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentTicketsGetForTaskAttachement(Async)");
        }
        

        com.squareup.okhttp.Call call = documentTicketsGetForTaskAttachementCall(id, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the ticket for downloading a file associated with the task attachment
     * 
     * @param id Identifier of task attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File documentTicketsGetForTaskAttachement(Integer id, Boolean forView) throws ApiException {
        ApiResponse<File> resp = documentTicketsGetForTaskAttachementWithHttpInfo(id, forView);
        return resp.getData();
    }

    /**
     * This call returns the ticket for downloading a file associated with the task attachment
     * 
     * @param id Identifier of task attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> documentTicketsGetForTaskAttachementWithHttpInfo(Integer id, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentTicketsGetForTaskAttachementValidateBeforeCall(id, forView, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the ticket for downloading a file associated with the task attachment (asynchronously)
     * 
     * @param id Identifier of task attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForTaskAttachementAsync(Integer id, Boolean forView, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentTicketsGetForTaskAttachementValidateBeforeCall(id, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentTicketsGetForTaskReadOnly
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForTaskReadOnlyCall(Integer processDocId, Integer taskWorkId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DocumentTickets/ticketForTaskReadOnly/{processDocId}/{taskWorkId}"
            .replaceAll("\\{" + "processDocId" + "\\}", apiClient.escapeString(processDocId.toString()))
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentTicketsGetForTaskReadOnlyValidateBeforeCall(Integer processDocId, Integer taskWorkId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDocId' is set
        if (processDocId == null) {
            throw new ApiException("Missing the required parameter 'processDocId' when calling documentTicketsGetForTaskReadOnly(Async)");
        }
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling documentTicketsGetForTaskReadOnly(Async)");
        }
        

        com.squareup.okhttp.Call call = documentTicketsGetForTaskReadOnlyCall(processDocId, taskWorkId, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File documentTicketsGetForTaskReadOnly(Integer processDocId, Integer taskWorkId, Boolean forView) throws ApiException {
        ApiResponse<File> resp = documentTicketsGetForTaskReadOnlyWithHttpInfo(processDocId, taskWorkId, forView);
        return resp.getData();
    }

    /**
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> documentTicketsGetForTaskReadOnlyWithHttpInfo(Integer processDocId, Integer taskWorkId, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentTicketsGetForTaskReadOnlyValidateBeforeCall(processDocId, taskWorkId, forView, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the ticket for downloading a file associated with a taskwork and a document in process, for read-only management (asynchronously)
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetForTaskReadOnlyAsync(Integer processDocId, Integer taskWorkId, Boolean forView, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentTicketsGetForTaskReadOnlyValidateBeforeCall(processDocId, taskWorkId, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentTicketsGetRevisionDocumentById
     * @param attachmentId Identifier of attachment (required)
     * @param revisionId Revision Number (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetRevisionDocumentByIdCall(Integer attachmentId, Integer revisionId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/DocumentTickets/ticketProfileAttachment/{attachmentId}/revisions/{revisionId}"
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()))
            .replaceAll("\\{" + "revisionId" + "\\}", apiClient.escapeString(revisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentTicketsGetRevisionDocumentByIdValidateBeforeCall(Integer attachmentId, Integer revisionId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling documentTicketsGetRevisionDocumentById(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling documentTicketsGetRevisionDocumentById(Async)");
        }
        

        com.squareup.okhttp.Call call = documentTicketsGetRevisionDocumentByIdCall(attachmentId, revisionId, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call retrieve the ticket for downloading an attachemnt file by its revision
     * 
     * @param attachmentId Identifier of attachment (required)
     * @param revisionId Revision Number (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String documentTicketsGetRevisionDocumentById(Integer attachmentId, Integer revisionId, Boolean forView) throws ApiException {
        ApiResponse<String> resp = documentTicketsGetRevisionDocumentByIdWithHttpInfo(attachmentId, revisionId, forView);
        return resp.getData();
    }

    /**
     * This call retrieve the ticket for downloading an attachemnt file by its revision
     * 
     * @param attachmentId Identifier of attachment (required)
     * @param revisionId Revision Number (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> documentTicketsGetRevisionDocumentByIdWithHttpInfo(Integer attachmentId, Integer revisionId, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentTicketsGetRevisionDocumentByIdValidateBeforeCall(attachmentId, revisionId, forView, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call retrieve the ticket for downloading an attachemnt file by its revision (asynchronously)
     * 
     * @param attachmentId Identifier of attachment (required)
     * @param revisionId Revision Number (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentTicketsGetRevisionDocumentByIdAsync(Integer attachmentId, Integer revisionId, Boolean forView, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentTicketsGetRevisionDocumentByIdValidateBeforeCall(attachmentId, revisionId, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
