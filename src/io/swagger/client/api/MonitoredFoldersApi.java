/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.MonitoredFolderDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MonitoredFoldersApi {
    private ApiClient apiClient;

    public MonitoredFoldersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MonitoredFoldersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for monitoredFoldersGetById
     * @param monitoredFolderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersGetByIdCall(String monitoredFolderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/MonitoredFolders/{monitoredFolderId}"
            .replaceAll("\\{" + "monitoredFolderId" + "\\}", apiClient.escapeString(monitoredFolderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call monitoredFoldersGetByIdValidateBeforeCall(String monitoredFolderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'monitoredFolderId' is set
        if (monitoredFolderId == null) {
            throw new ApiException("Missing the required parameter 'monitoredFolderId' when calling monitoredFoldersGetById(Async)");
        }
        

        com.squareup.okhttp.Call call = monitoredFoldersGetByIdCall(monitoredFolderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the monitored folders by its id
     * 
     * @param monitoredFolderId  (required)
     * @return MonitoredFolderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitoredFolderDTO monitoredFoldersGetById(String monitoredFolderId) throws ApiException {
        ApiResponse<MonitoredFolderDTO> resp = monitoredFoldersGetByIdWithHttpInfo(monitoredFolderId);
        return resp.getData();
    }

    /**
     * This call returns the monitored folders by its id
     * 
     * @param monitoredFolderId  (required)
     * @return ApiResponse&lt;MonitoredFolderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitoredFolderDTO> monitoredFoldersGetByIdWithHttpInfo(String monitoredFolderId) throws ApiException {
        com.squareup.okhttp.Call call = monitoredFoldersGetByIdValidateBeforeCall(monitoredFolderId, null, null);
        Type localVarReturnType = new TypeToken<MonitoredFolderDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the monitored folders by its id (asynchronously)
     * 
     * @param monitoredFolderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersGetByIdAsync(String monitoredFolderId, final ApiCallback<MonitoredFolderDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = monitoredFoldersGetByIdValidateBeforeCall(monitoredFolderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitoredFolderDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for monitoredFoldersGetByUserId
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersGetByUserIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/MonitoredFolders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call monitoredFoldersGetByUserIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = monitoredFoldersGetByUserIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all the monitored folders for a user
     * 
     * @return List&lt;MonitoredFolderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MonitoredFolderDTO> monitoredFoldersGetByUserId() throws ApiException {
        ApiResponse<List<MonitoredFolderDTO>> resp = monitoredFoldersGetByUserIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns all the monitored folders for a user
     * 
     * @return ApiResponse&lt;List&lt;MonitoredFolderDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MonitoredFolderDTO>> monitoredFoldersGetByUserIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = monitoredFoldersGetByUserIdValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<MonitoredFolderDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all the monitored folders for a user (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersGetByUserIdAsync(final ApiCallback<List<MonitoredFolderDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = monitoredFoldersGetByUserIdValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MonitoredFolderDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for monitoredFoldersMonitoredFolderDelete
     * @param monitoredFolderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersMonitoredFolderDeleteCall(String monitoredFolderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/MonitoredFolders/{monitoredFolderId}"
            .replaceAll("\\{" + "monitoredFolderId" + "\\}", apiClient.escapeString(monitoredFolderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call monitoredFoldersMonitoredFolderDeleteValidateBeforeCall(String monitoredFolderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'monitoredFolderId' is set
        if (monitoredFolderId == null) {
            throw new ApiException("Missing the required parameter 'monitoredFolderId' when calling monitoredFoldersMonitoredFolderDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = monitoredFoldersMonitoredFolderDeleteCall(monitoredFolderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a monitored folder
     * 
     * @param monitoredFolderId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void monitoredFoldersMonitoredFolderDelete(String monitoredFolderId) throws ApiException {
        monitoredFoldersMonitoredFolderDeleteWithHttpInfo(monitoredFolderId);
    }

    /**
     * This call deletes a monitored folder
     * 
     * @param monitoredFolderId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> monitoredFoldersMonitoredFolderDeleteWithHttpInfo(String monitoredFolderId) throws ApiException {
        com.squareup.okhttp.Call call = monitoredFoldersMonitoredFolderDeleteValidateBeforeCall(monitoredFolderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes a monitored folder (asynchronously)
     * 
     * @param monitoredFolderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersMonitoredFolderDeleteAsync(String monitoredFolderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = monitoredFoldersMonitoredFolderDeleteValidateBeforeCall(monitoredFolderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for monitoredFoldersMonitoredFolderInsert
     * @param monitoredFolder  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersMonitoredFolderInsertCall(MonitoredFolderDTO monitoredFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = monitoredFolder;

        // create path and map variables
        String localVarPath = "/api/MonitoredFolders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call monitoredFoldersMonitoredFolderInsertValidateBeforeCall(MonitoredFolderDTO monitoredFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'monitoredFolder' is set
        if (monitoredFolder == null) {
            throw new ApiException("Missing the required parameter 'monitoredFolder' when calling monitoredFoldersMonitoredFolderInsert(Async)");
        }
        

        com.squareup.okhttp.Call call = monitoredFoldersMonitoredFolderInsertCall(monitoredFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call insert new monitored folder for user
     * 
     * @param monitoredFolder  (required)
     * @return MonitoredFolderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitoredFolderDTO monitoredFoldersMonitoredFolderInsert(MonitoredFolderDTO monitoredFolder) throws ApiException {
        ApiResponse<MonitoredFolderDTO> resp = monitoredFoldersMonitoredFolderInsertWithHttpInfo(monitoredFolder);
        return resp.getData();
    }

    /**
     * This call insert new monitored folder for user
     * 
     * @param monitoredFolder  (required)
     * @return ApiResponse&lt;MonitoredFolderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitoredFolderDTO> monitoredFoldersMonitoredFolderInsertWithHttpInfo(MonitoredFolderDTO monitoredFolder) throws ApiException {
        com.squareup.okhttp.Call call = monitoredFoldersMonitoredFolderInsertValidateBeforeCall(monitoredFolder, null, null);
        Type localVarReturnType = new TypeToken<MonitoredFolderDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call insert new monitored folder for user (asynchronously)
     * 
     * @param monitoredFolder  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersMonitoredFolderInsertAsync(MonitoredFolderDTO monitoredFolder, final ApiCallback<MonitoredFolderDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = monitoredFoldersMonitoredFolderInsertValidateBeforeCall(monitoredFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitoredFolderDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for monitoredFoldersMonitoredFolderUpdate
     * @param monitoredFolder  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersMonitoredFolderUpdateCall(MonitoredFolderDTO monitoredFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = monitoredFolder;

        // create path and map variables
        String localVarPath = "/api/MonitoredFolders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call monitoredFoldersMonitoredFolderUpdateValidateBeforeCall(MonitoredFolderDTO monitoredFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'monitoredFolder' is set
        if (monitoredFolder == null) {
            throw new ApiException("Missing the required parameter 'monitoredFolder' when calling monitoredFoldersMonitoredFolderUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = monitoredFoldersMonitoredFolderUpdateCall(monitoredFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates a monitored folder
     * 
     * @param monitoredFolder  (required)
     * @return MonitoredFolderDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MonitoredFolderDTO monitoredFoldersMonitoredFolderUpdate(MonitoredFolderDTO monitoredFolder) throws ApiException {
        ApiResponse<MonitoredFolderDTO> resp = monitoredFoldersMonitoredFolderUpdateWithHttpInfo(monitoredFolder);
        return resp.getData();
    }

    /**
     * This call updates a monitored folder
     * 
     * @param monitoredFolder  (required)
     * @return ApiResponse&lt;MonitoredFolderDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MonitoredFolderDTO> monitoredFoldersMonitoredFolderUpdateWithHttpInfo(MonitoredFolderDTO monitoredFolder) throws ApiException {
        com.squareup.okhttp.Call call = monitoredFoldersMonitoredFolderUpdateValidateBeforeCall(monitoredFolder, null, null);
        Type localVarReturnType = new TypeToken<MonitoredFolderDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call updates a monitored folder (asynchronously)
     * 
     * @param monitoredFolder  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call monitoredFoldersMonitoredFolderUpdateAsync(MonitoredFolderDTO monitoredFolder, final ApiCallback<MonitoredFolderDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = monitoredFoldersMonitoredFolderUpdateValidateBeforeCall(monitoredFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonitoredFolderDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
