/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DigitalSignInfoDTO;
import io.swagger.client.model.RemoteSignRequestDTO;
import io.swagger.client.model.RemoteSignResponseDTO;
import io.swagger.client.model.RemoteSignTaskWorkRequestDTO;
import io.swagger.client.model.SignCertDTO;
import io.swagger.client.model.SignCertInsertDTO;
import io.swagger.client.model.SignCertPasswordTestDTO;
import io.swagger.client.model.SignCertRelatedDTO;
import io.swagger.client.model.SignCertTypeDTO;
import io.swagger.client.model.SignCertUpdateDTO;
import io.swagger.client.model.SignCertUseGetDTO;
import io.swagger.client.model.SignCertUseSetDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SignApi {
    private ApiClient apiClient;

    public SignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SignApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for signDeleteSignCert
     * @param id Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signDeleteSignCertCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sign/SignCert/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signDeleteSignCertValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling signDeleteSignCert(Async)");
        }
        

        com.squareup.okhttp.Call call = signDeleteSignCertCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a signature certificate
     * 
     * @param id Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void signDeleteSignCert(Integer id) throws ApiException {
        signDeleteSignCertWithHttpInfo(id);
    }

    /**
     * This call deletes a signature certificate
     * 
     * @param id Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> signDeleteSignCertWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = signDeleteSignCertValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes a signature certificate (asynchronously)
     * 
     * @param id Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signDeleteSignCertAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signDeleteSignCertValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for signGetDigitalSignInfo
     * @param docId Document Identifier (required)
     * @param tableType Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signGetDigitalSignInfoCall(Integer docId, Integer tableType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sign/DigitalSignInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (docId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("docId", docId));
        if (tableType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tableType", tableType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signGetDigitalSignInfoValidateBeforeCall(Integer docId, Integer tableType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling signGetDigitalSignInfo(Async)");
        }
        
        // verify the required parameter 'tableType' is set
        if (tableType == null) {
            throw new ApiException("Missing the required parameter 'tableType' when calling signGetDigitalSignInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = signGetDigitalSignInfoCall(docId, tableType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a digital signed info of a document
     * 
     * @param docId Document Identifier (required)
     * @param tableType Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc  (required)
     * @return DigitalSignInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DigitalSignInfoDTO signGetDigitalSignInfo(Integer docId, Integer tableType) throws ApiException {
        ApiResponse<DigitalSignInfoDTO> resp = signGetDigitalSignInfoWithHttpInfo(docId, tableType);
        return resp.getData();
    }

    /**
     * This call returns a digital signed info of a document
     * 
     * @param docId Document Identifier (required)
     * @param tableType Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc  (required)
     * @return ApiResponse&lt;DigitalSignInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DigitalSignInfoDTO> signGetDigitalSignInfoWithHttpInfo(Integer docId, Integer tableType) throws ApiException {
        com.squareup.okhttp.Call call = signGetDigitalSignInfoValidateBeforeCall(docId, tableType, null, null);
        Type localVarReturnType = new TypeToken<DigitalSignInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a digital signed info of a document (asynchronously)
     * 
     * @param docId Document Identifier (required)
     * @param tableType Possible values:  0: Attachment  2: TaskWorkAttachment  14: Profile  74: ProcessDoc  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signGetDigitalSignInfoAsync(Integer docId, Integer tableType, final ApiCallback<DigitalSignInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signGetDigitalSignInfoValidateBeforeCall(docId, tableType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DigitalSignInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signGetRelatedSignCertList
     * @param signCertId Identifier of certificate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signGetRelatedSignCertListCall(Integer signCertId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sign/RelatedSignCertList/{signCertId}"
            .replaceAll("\\{" + "signCertId" + "\\}", apiClient.escapeString(signCertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signGetRelatedSignCertListValidateBeforeCall(Integer signCertId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'signCertId' is set
        if (signCertId == null) {
            throw new ApiException("Missing the required parameter 'signCertId' when calling signGetRelatedSignCertList(Async)");
        }
        

        com.squareup.okhttp.Call call = signGetRelatedSignCertListCall(signCertId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the related certificates of a given Sign certificate (es: Telecom Remote Provider)
     * 
     * @param signCertId Identifier of certificate (required)
     * @return List&lt;SignCertRelatedDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SignCertRelatedDTO> signGetRelatedSignCertList(Integer signCertId) throws ApiException {
        ApiResponse<List<SignCertRelatedDTO>> resp = signGetRelatedSignCertListWithHttpInfo(signCertId);
        return resp.getData();
    }

    /**
     * This call returns the related certificates of a given Sign certificate (es: Telecom Remote Provider)
     * 
     * @param signCertId Identifier of certificate (required)
     * @return ApiResponse&lt;List&lt;SignCertRelatedDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SignCertRelatedDTO>> signGetRelatedSignCertListWithHttpInfo(Integer signCertId) throws ApiException {
        com.squareup.okhttp.Call call = signGetRelatedSignCertListValidateBeforeCall(signCertId, null, null);
        Type localVarReturnType = new TypeToken<List<SignCertRelatedDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the related certificates of a given Sign certificate (es: Telecom Remote Provider) (asynchronously)
     * 
     * @param signCertId Identifier of certificate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signGetRelatedSignCertListAsync(Integer signCertId, final ApiCallback<List<SignCertRelatedDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signGetRelatedSignCertListValidateBeforeCall(signCertId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SignCertRelatedDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signGetSignCert
     * @param id Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signGetSignCertCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sign/SignCert/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signGetSignCertValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling signGetSignCert(Async)");
        }
        

        com.squareup.okhttp.Call call = signGetSignCertCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returs a specific signature certificate
     * 
     * @param id Identifier (required)
     * @return SignCertDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SignCertDTO signGetSignCert(Integer id) throws ApiException {
        ApiResponse<SignCertDTO> resp = signGetSignCertWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * This call returs a specific signature certificate
     * 
     * @param id Identifier (required)
     * @return ApiResponse&lt;SignCertDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SignCertDTO> signGetSignCertWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = signGetSignCertValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<SignCertDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returs a specific signature certificate (asynchronously)
     * 
     * @param id Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signGetSignCertAsync(Integer id, final ApiCallback<SignCertDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signGetSignCertValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SignCertDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signGetSignCertList
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signGetSignCertListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sign/SignCertList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signGetSignCertListValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = signGetSignCertListCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returs all signature certificates of user
     * 
     * @return List&lt;SignCertDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SignCertDTO> signGetSignCertList() throws ApiException {
        ApiResponse<List<SignCertDTO>> resp = signGetSignCertListWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returs all signature certificates of user
     * 
     * @return ApiResponse&lt;List&lt;SignCertDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SignCertDTO>> signGetSignCertListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = signGetSignCertListValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<SignCertDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returs all signature certificates of user (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signGetSignCertListAsync(final ApiCallback<List<SignCertDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signGetSignCertListValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SignCertDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signGetSignCertTypeList
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signGetSignCertTypeListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sign/SignCertTypeList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signGetSignCertTypeListValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = signGetSignCertTypeListCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returs all signature certificates
     * 
     * @return List&lt;SignCertTypeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SignCertTypeDTO> signGetSignCertTypeList() throws ApiException {
        ApiResponse<List<SignCertTypeDTO>> resp = signGetSignCertTypeListWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returs all signature certificates
     * 
     * @return ApiResponse&lt;List&lt;SignCertTypeDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SignCertTypeDTO>> signGetSignCertTypeListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = signGetSignCertTypeListValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<SignCertTypeDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returs all signature certificates (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signGetSignCertTypeListAsync(final ApiCallback<List<SignCertTypeDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signGetSignCertTypeListValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SignCertTypeDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signGetSignCertUseList
     * @param signCertId Identifier of certificate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signGetSignCertUseListCall(Integer signCertId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sign/SignCertUse/{signCertId}"
            .replaceAll("\\{" + "signCertId" + "\\}", apiClient.escapeString(signCertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signGetSignCertUseListValidateBeforeCall(Integer signCertId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'signCertId' is set
        if (signCertId == null) {
            throw new ApiException("Missing the required parameter 'signCertId' when calling signGetSignCertUseList(Async)");
        }
        

        com.squareup.okhttp.Call call = signGetSignCertUseListCall(signCertId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the automatic use of a given Sign certificate
     * 
     * @param signCertId Identifier of certificate (required)
     * @return SignCertUseGetDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SignCertUseGetDTO signGetSignCertUseList(Integer signCertId) throws ApiException {
        ApiResponse<SignCertUseGetDTO> resp = signGetSignCertUseListWithHttpInfo(signCertId);
        return resp.getData();
    }

    /**
     * This call returns the automatic use of a given Sign certificate
     * 
     * @param signCertId Identifier of certificate (required)
     * @return ApiResponse&lt;SignCertUseGetDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SignCertUseGetDTO> signGetSignCertUseListWithHttpInfo(Integer signCertId) throws ApiException {
        com.squareup.okhttp.Call call = signGetSignCertUseListValidateBeforeCall(signCertId, null, null);
        Type localVarReturnType = new TypeToken<SignCertUseGetDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the automatic use of a given Sign certificate (asynchronously)
     * 
     * @param signCertId Identifier of certificate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signGetSignCertUseListAsync(Integer signCertId, final ApiCallback<SignCertUseGetDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signGetSignCertUseListValidateBeforeCall(signCertId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SignCertUseGetDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signInsertSignCert
     * @param certInsert  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signInsertSignCertCall(SignCertInsertDTO certInsert, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = certInsert;

        // create path and map variables
        String localVarPath = "/api/Sign/InsertSignCert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signInsertSignCertValidateBeforeCall(SignCertInsertDTO certInsert, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certInsert' is set
        if (certInsert == null) {
            throw new ApiException("Missing the required parameter 'certInsert' when calling signInsertSignCert(Async)");
        }
        

        com.squareup.okhttp.Call call = signInsertSignCertCall(certInsert, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call inserts a signature certificate
     * 
     * @param certInsert  (required)
     * @return SignCertDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SignCertDTO signInsertSignCert(SignCertInsertDTO certInsert) throws ApiException {
        ApiResponse<SignCertDTO> resp = signInsertSignCertWithHttpInfo(certInsert);
        return resp.getData();
    }

    /**
     * This call inserts a signature certificate
     * 
     * @param certInsert  (required)
     * @return ApiResponse&lt;SignCertDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SignCertDTO> signInsertSignCertWithHttpInfo(SignCertInsertDTO certInsert) throws ApiException {
        com.squareup.okhttp.Call call = signInsertSignCertValidateBeforeCall(certInsert, null, null);
        Type localVarReturnType = new TypeToken<SignCertDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call inserts a signature certificate (asynchronously)
     * 
     * @param certInsert  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signInsertSignCertAsync(SignCertInsertDTO certInsert, final ApiCallback<SignCertDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signInsertSignCertValidateBeforeCall(certInsert, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SignCertDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signRemoteSign
     * @param remoteSignRequest List of documents to sign (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signRemoteSignCall(RemoteSignRequestDTO remoteSignRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = remoteSignRequest;

        // create path and map variables
        String localVarPath = "/api/Sign/RemoteSign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signRemoteSignValidateBeforeCall(RemoteSignRequestDTO remoteSignRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'remoteSignRequest' is set
        if (remoteSignRequest == null) {
            throw new ApiException("Missing the required parameter 'remoteSignRequest' when calling signRemoteSign(Async)");
        }
        

        com.squareup.okhttp.Call call = signRemoteSignCall(remoteSignRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call executes a remote signature operation
     * 
     * @param remoteSignRequest List of documents to sign (required)
     * @return RemoteSignResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RemoteSignResponseDTO signRemoteSign(RemoteSignRequestDTO remoteSignRequest) throws ApiException {
        ApiResponse<RemoteSignResponseDTO> resp = signRemoteSignWithHttpInfo(remoteSignRequest);
        return resp.getData();
    }

    /**
     * This call executes a remote signature operation
     * 
     * @param remoteSignRequest List of documents to sign (required)
     * @return ApiResponse&lt;RemoteSignResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RemoteSignResponseDTO> signRemoteSignWithHttpInfo(RemoteSignRequestDTO remoteSignRequest) throws ApiException {
        com.squareup.okhttp.Call call = signRemoteSignValidateBeforeCall(remoteSignRequest, null, null);
        Type localVarReturnType = new TypeToken<RemoteSignResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call executes a remote signature operation (asynchronously)
     * 
     * @param remoteSignRequest List of documents to sign (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signRemoteSignAsync(RemoteSignRequestDTO remoteSignRequest, final ApiCallback<RemoteSignResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signRemoteSignValidateBeforeCall(remoteSignRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RemoteSignResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signRemoteSignTaskWork
     * @param remoteSignTaskWorkRequest List of taskWorks to sign (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signRemoteSignTaskWorkCall(RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = remoteSignTaskWorkRequest;

        // create path and map variables
        String localVarPath = "/api/Sign/RemoteSignTaskWork";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signRemoteSignTaskWorkValidateBeforeCall(RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'remoteSignTaskWorkRequest' is set
        if (remoteSignTaskWorkRequest == null) {
            throw new ApiException("Missing the required parameter 'remoteSignTaskWorkRequest' when calling signRemoteSignTaskWork(Async)");
        }
        

        com.squareup.okhttp.Call call = signRemoteSignTaskWorkCall(remoteSignTaskWorkRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call executes a remote signature operation on a TaskWork list
     * 
     * @param remoteSignTaskWorkRequest List of taskWorks to sign (required)
     * @return RemoteSignResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RemoteSignResponseDTO signRemoteSignTaskWork(RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest) throws ApiException {
        ApiResponse<RemoteSignResponseDTO> resp = signRemoteSignTaskWorkWithHttpInfo(remoteSignTaskWorkRequest);
        return resp.getData();
    }

    /**
     * This call executes a remote signature operation on a TaskWork list
     * 
     * @param remoteSignTaskWorkRequest List of taskWorks to sign (required)
     * @return ApiResponse&lt;RemoteSignResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RemoteSignResponseDTO> signRemoteSignTaskWorkWithHttpInfo(RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest) throws ApiException {
        com.squareup.okhttp.Call call = signRemoteSignTaskWorkValidateBeforeCall(remoteSignTaskWorkRequest, null, null);
        Type localVarReturnType = new TypeToken<RemoteSignResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call executes a remote signature operation on a TaskWork list (asynchronously)
     * 
     * @param remoteSignTaskWorkRequest List of taskWorks to sign (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signRemoteSignTaskWorkAsync(RemoteSignTaskWorkRequestDTO remoteSignTaskWorkRequest, final ApiCallback<RemoteSignResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signRemoteSignTaskWorkValidateBeforeCall(remoteSignTaskWorkRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RemoteSignResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signTestSignCert
     * @param signCertId Identifier of certificate (required)
     * @param certPasswordTest Information of test password (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signTestSignCertCall(Integer signCertId, SignCertPasswordTestDTO certPasswordTest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = certPasswordTest;

        // create path and map variables
        String localVarPath = "/api/Sign/TestSignCert/{signCertId}"
            .replaceAll("\\{" + "signCertId" + "\\}", apiClient.escapeString(signCertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signTestSignCertValidateBeforeCall(Integer signCertId, SignCertPasswordTestDTO certPasswordTest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'signCertId' is set
        if (signCertId == null) {
            throw new ApiException("Missing the required parameter 'signCertId' when calling signTestSignCert(Async)");
        }
        
        // verify the required parameter 'certPasswordTest' is set
        if (certPasswordTest == null) {
            throw new ApiException("Missing the required parameter 'certPasswordTest' when calling signTestSignCert(Async)");
        }
        

        com.squareup.okhttp.Call call = signTestSignCertCall(signCertId, certPasswordTest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call tests a Sign certificate
     * 
     * @param signCertId Identifier of certificate (required)
     * @param certPasswordTest Information of test password (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void signTestSignCert(Integer signCertId, SignCertPasswordTestDTO certPasswordTest) throws ApiException {
        signTestSignCertWithHttpInfo(signCertId, certPasswordTest);
    }

    /**
     * This call tests a Sign certificate
     * 
     * @param signCertId Identifier of certificate (required)
     * @param certPasswordTest Information of test password (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> signTestSignCertWithHttpInfo(Integer signCertId, SignCertPasswordTestDTO certPasswordTest) throws ApiException {
        com.squareup.okhttp.Call call = signTestSignCertValidateBeforeCall(signCertId, certPasswordTest, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call tests a Sign certificate (asynchronously)
     * 
     * @param signCertId Identifier of certificate (required)
     * @param certPasswordTest Information of test password (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signTestSignCertAsync(Integer signCertId, SignCertPasswordTestDTO certPasswordTest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signTestSignCertValidateBeforeCall(signCertId, certPasswordTest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for signUpdateSignCert
     * @param id Identifier (required)
     * @param certUpdate Information to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signUpdateSignCertCall(Integer id, SignCertUpdateDTO certUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = certUpdate;

        // create path and map variables
        String localVarPath = "/api/Sign/UpdateSignCert/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signUpdateSignCertValidateBeforeCall(Integer id, SignCertUpdateDTO certUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling signUpdateSignCert(Async)");
        }
        
        // verify the required parameter 'certUpdate' is set
        if (certUpdate == null) {
            throw new ApiException("Missing the required parameter 'certUpdate' when calling signUpdateSignCert(Async)");
        }
        

        com.squareup.okhttp.Call call = signUpdateSignCertCall(id, certUpdate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates a signature certificate
     * 
     * @param id Identifier (required)
     * @param certUpdate Information to update (required)
     * @return SignCertDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SignCertDTO signUpdateSignCert(Integer id, SignCertUpdateDTO certUpdate) throws ApiException {
        ApiResponse<SignCertDTO> resp = signUpdateSignCertWithHttpInfo(id, certUpdate);
        return resp.getData();
    }

    /**
     * This call updates a signature certificate
     * 
     * @param id Identifier (required)
     * @param certUpdate Information to update (required)
     * @return ApiResponse&lt;SignCertDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SignCertDTO> signUpdateSignCertWithHttpInfo(Integer id, SignCertUpdateDTO certUpdate) throws ApiException {
        com.squareup.okhttp.Call call = signUpdateSignCertValidateBeforeCall(id, certUpdate, null, null);
        Type localVarReturnType = new TypeToken<SignCertDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call updates a signature certificate (asynchronously)
     * 
     * @param id Identifier (required)
     * @param certUpdate Information to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signUpdateSignCertAsync(Integer id, SignCertUpdateDTO certUpdate, final ApiCallback<SignCertDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signUpdateSignCertValidateBeforeCall(id, certUpdate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SignCertDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signUpdateSignCertUseList
     * @param signCertId Identifier of certificate (required)
     * @param certUseSet Setting of certificate use (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signUpdateSignCertUseListCall(Integer signCertId, SignCertUseSetDTO certUseSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = certUseSet;

        // create path and map variables
        String localVarPath = "/api/Sign/UpdateSignCertUse/{signCertId}"
            .replaceAll("\\{" + "signCertId" + "\\}", apiClient.escapeString(signCertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signUpdateSignCertUseListValidateBeforeCall(Integer signCertId, SignCertUseSetDTO certUseSet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'signCertId' is set
        if (signCertId == null) {
            throw new ApiException("Missing the required parameter 'signCertId' when calling signUpdateSignCertUseList(Async)");
        }
        
        // verify the required parameter 'certUseSet' is set
        if (certUseSet == null) {
            throw new ApiException("Missing the required parameter 'certUseSet' when calling signUpdateSignCertUseList(Async)");
        }
        

        com.squareup.okhttp.Call call = signUpdateSignCertUseListCall(signCertId, certUseSet, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates the automatic use for a given Sign certificate
     * 
     * @param signCertId Identifier of certificate (required)
     * @param certUseSet Setting of certificate use (required)
     * @return SignCertUseGetDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SignCertUseGetDTO signUpdateSignCertUseList(Integer signCertId, SignCertUseSetDTO certUseSet) throws ApiException {
        ApiResponse<SignCertUseGetDTO> resp = signUpdateSignCertUseListWithHttpInfo(signCertId, certUseSet);
        return resp.getData();
    }

    /**
     * This call updates the automatic use for a given Sign certificate
     * 
     * @param signCertId Identifier of certificate (required)
     * @param certUseSet Setting of certificate use (required)
     * @return ApiResponse&lt;SignCertUseGetDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SignCertUseGetDTO> signUpdateSignCertUseListWithHttpInfo(Integer signCertId, SignCertUseSetDTO certUseSet) throws ApiException {
        com.squareup.okhttp.Call call = signUpdateSignCertUseListValidateBeforeCall(signCertId, certUseSet, null, null);
        Type localVarReturnType = new TypeToken<SignCertUseGetDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call updates the automatic use for a given Sign certificate (asynchronously)
     * 
     * @param signCertId Identifier of certificate (required)
     * @param certUseSet Setting of certificate use (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signUpdateSignCertUseListAsync(Integer signCertId, SignCertUseSetDTO certUseSet, final ApiCallback<SignCertUseGetDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signUpdateSignCertUseListValidateBeforeCall(signCertId, certUseSet, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SignCertUseGetDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
