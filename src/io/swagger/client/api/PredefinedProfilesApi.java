/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.PermissionsDTO;
import io.swagger.client.model.PredefinedProfileDTO;
import io.swagger.client.model.PredefinedProfileSchemaDTO;
import io.swagger.client.model.ProfileDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PredefinedProfilesApi {
    private ApiClient apiClient;

    public PredefinedProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PredefinedProfilesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for predefinedProfilesClonePredefinedProfile
     * @param predefinedProfileId Predefined profile identifier to clone (required)
     * @param name Name of the cloned predefined profile (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesClonePredefinedProfileCall(Integer predefinedProfileId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}/Clone/{name}"
            .replaceAll("\\{" + "predefinedProfileId" + "\\}", apiClient.escapeString(predefinedProfileId.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predefinedProfilesClonePredefinedProfileValidateBeforeCall(Integer predefinedProfileId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'predefinedProfileId' is set
        if (predefinedProfileId == null) {
            throw new ApiException("Missing the required parameter 'predefinedProfileId' when calling predefinedProfilesClonePredefinedProfile(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling predefinedProfilesClonePredefinedProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = predefinedProfilesClonePredefinedProfileCall(predefinedProfileId, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call clones a predefined profile
     * 
     * @param predefinedProfileId Predefined profile identifier to clone (required)
     * @param name Name of the cloned predefined profile (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void predefinedProfilesClonePredefinedProfile(Integer predefinedProfileId, String name) throws ApiException {
        predefinedProfilesClonePredefinedProfileWithHttpInfo(predefinedProfileId, name);
    }

    /**
     * This call clones a predefined profile
     * 
     * @param predefinedProfileId Predefined profile identifier to clone (required)
     * @param name Name of the cloned predefined profile (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> predefinedProfilesClonePredefinedProfileWithHttpInfo(Integer predefinedProfileId, String name) throws ApiException {
        com.squareup.okhttp.Call call = predefinedProfilesClonePredefinedProfileValidateBeforeCall(predefinedProfileId, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call clones a predefined profile (asynchronously)
     * 
     * @param predefinedProfileId Predefined profile identifier to clone (required)
     * @param name Name of the cloned predefined profile (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesClonePredefinedProfileAsync(Integer predefinedProfileId, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predefinedProfilesClonePredefinedProfileValidateBeforeCall(predefinedProfileId, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for predefinedProfilesDeletePredefinedProfile
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesDeletePredefinedProfileCall(Integer predefinedProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}"
            .replaceAll("\\{" + "predefinedProfileId" + "\\}", apiClient.escapeString(predefinedProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predefinedProfilesDeletePredefinedProfileValidateBeforeCall(Integer predefinedProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'predefinedProfileId' is set
        if (predefinedProfileId == null) {
            throw new ApiException("Missing the required parameter 'predefinedProfileId' when calling predefinedProfilesDeletePredefinedProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = predefinedProfilesDeletePredefinedProfileCall(predefinedProfileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a predefined profile
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void predefinedProfilesDeletePredefinedProfile(Integer predefinedProfileId) throws ApiException {
        predefinedProfilesDeletePredefinedProfileWithHttpInfo(predefinedProfileId);
    }

    /**
     * This call deletes a predefined profile
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> predefinedProfilesDeletePredefinedProfileWithHttpInfo(Integer predefinedProfileId) throws ApiException {
        com.squareup.okhttp.Call call = predefinedProfilesDeletePredefinedProfileValidateBeforeCall(predefinedProfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes a predefined profile (asynchronously)
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesDeletePredefinedProfileAsync(Integer predefinedProfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predefinedProfilesDeletePredefinedProfileValidateBeforeCall(predefinedProfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for predefinedProfilesGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/PredefinedProfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predefinedProfilesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = predefinedProfilesGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all the predefined profiles
     * 
     * @return List&lt;PredefinedProfileDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PredefinedProfileDTO> predefinedProfilesGet() throws ApiException {
        ApiResponse<List<PredefinedProfileDTO>> resp = predefinedProfilesGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns all the predefined profiles
     * 
     * @return ApiResponse&lt;List&lt;PredefinedProfileDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PredefinedProfileDTO>> predefinedProfilesGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = predefinedProfilesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<PredefinedProfileDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all the predefined profiles (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesGetAsync(final ApiCallback<List<PredefinedProfileDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predefinedProfilesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PredefinedProfileDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predefinedProfilesGetById
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesGetByIdCall(Integer predefinedProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}"
            .replaceAll("\\{" + "predefinedProfileId" + "\\}", apiClient.escapeString(predefinedProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predefinedProfilesGetByIdValidateBeforeCall(Integer predefinedProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'predefinedProfileId' is set
        if (predefinedProfileId == null) {
            throw new ApiException("Missing the required parameter 'predefinedProfileId' when calling predefinedProfilesGetById(Async)");
        }
        

        com.squareup.okhttp.Call call = predefinedProfilesGetByIdCall(predefinedProfileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a predefined profile by its id
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @return PredefinedProfileDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PredefinedProfileDTO predefinedProfilesGetById(Integer predefinedProfileId) throws ApiException {
        ApiResponse<PredefinedProfileDTO> resp = predefinedProfilesGetByIdWithHttpInfo(predefinedProfileId);
        return resp.getData();
    }

    /**
     * This call returns a predefined profile by its id
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @return ApiResponse&lt;PredefinedProfileDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PredefinedProfileDTO> predefinedProfilesGetByIdWithHttpInfo(Integer predefinedProfileId) throws ApiException {
        com.squareup.okhttp.Call call = predefinedProfilesGetByIdValidateBeforeCall(predefinedProfileId, null, null);
        Type localVarReturnType = new TypeToken<PredefinedProfileDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a predefined profile by its id (asynchronously)
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesGetByIdAsync(Integer predefinedProfileId, final ApiCallback<PredefinedProfileDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predefinedProfilesGetByIdValidateBeforeCall(predefinedProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PredefinedProfileDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predefinedProfilesGetNew
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesGetNewCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/PredefinedProfiles/new";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predefinedProfilesGetNewValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = predefinedProfilesGetNewCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a new predefined profile template
     * 
     * @return PredefinedProfileDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PredefinedProfileDTO predefinedProfilesGetNew() throws ApiException {
        ApiResponse<PredefinedProfileDTO> resp = predefinedProfilesGetNewWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns a new predefined profile template
     * 
     * @return ApiResponse&lt;PredefinedProfileDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PredefinedProfileDTO> predefinedProfilesGetNewWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = predefinedProfilesGetNewValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PredefinedProfileDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a new predefined profile template (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesGetNewAsync(final ApiCallback<PredefinedProfileDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predefinedProfilesGetNewValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PredefinedProfileDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predefinedProfilesGetProfileSchemaByPredefinedProfileId
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param profile  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesGetProfileSchemaByPredefinedProfileIdCall(Integer predefinedProfileId, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}/profileSchema"
            .replaceAll("\\{" + "predefinedProfileId" + "\\}", apiClient.escapeString(predefinedProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predefinedProfilesGetProfileSchemaByPredefinedProfileIdValidateBeforeCall(Integer predefinedProfileId, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'predefinedProfileId' is set
        if (predefinedProfileId == null) {
            throw new ApiException("Missing the required parameter 'predefinedProfileId' when calling predefinedProfilesGetProfileSchemaByPredefinedProfileId(Async)");
        }
        

        com.squareup.okhttp.Call call = predefinedProfilesGetProfileSchemaByPredefinedProfileIdCall(predefinedProfileId, profile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the profile schema by a predefined profile
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param profile  (optional)
     * @return PredefinedProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PredefinedProfileSchemaDTO predefinedProfilesGetProfileSchemaByPredefinedProfileId(Integer predefinedProfileId, ProfileDTO profile) throws ApiException {
        ApiResponse<PredefinedProfileSchemaDTO> resp = predefinedProfilesGetProfileSchemaByPredefinedProfileIdWithHttpInfo(predefinedProfileId, profile);
        return resp.getData();
    }

    /**
     * This call returns the profile schema by a predefined profile
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param profile  (optional)
     * @return ApiResponse&lt;PredefinedProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PredefinedProfileSchemaDTO> predefinedProfilesGetProfileSchemaByPredefinedProfileIdWithHttpInfo(Integer predefinedProfileId, ProfileDTO profile) throws ApiException {
        com.squareup.okhttp.Call call = predefinedProfilesGetProfileSchemaByPredefinedProfileIdValidateBeforeCall(predefinedProfileId, profile, null, null);
        Type localVarReturnType = new TypeToken<PredefinedProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the profile schema by a predefined profile (asynchronously)
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param profile  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesGetProfileSchemaByPredefinedProfileIdAsync(Integer predefinedProfileId, ProfileDTO profile, final ApiCallback<PredefinedProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predefinedProfilesGetProfileSchemaByPredefinedProfileIdValidateBeforeCall(predefinedProfileId, profile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PredefinedProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predefinedProfilesPermissionsById
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesPermissionsByIdCall(Integer predefinedProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}/Permissions"
            .replaceAll("\\{" + "predefinedProfileId" + "\\}", apiClient.escapeString(predefinedProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predefinedProfilesPermissionsByIdValidateBeforeCall(Integer predefinedProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'predefinedProfileId' is set
        if (predefinedProfileId == null) {
            throw new ApiException("Missing the required parameter 'predefinedProfileId' when calling predefinedProfilesPermissionsById(Async)");
        }
        

        com.squareup.okhttp.Call call = predefinedProfilesPermissionsByIdCall(predefinedProfileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the permissions for a predefiend profile
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @return PermissionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PermissionsDTO predefinedProfilesPermissionsById(Integer predefinedProfileId) throws ApiException {
        ApiResponse<PermissionsDTO> resp = predefinedProfilesPermissionsByIdWithHttpInfo(predefinedProfileId);
        return resp.getData();
    }

    /**
     * This call returns the permissions for a predefiend profile
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @return ApiResponse&lt;PermissionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PermissionsDTO> predefinedProfilesPermissionsByIdWithHttpInfo(Integer predefinedProfileId) throws ApiException {
        com.squareup.okhttp.Call call = predefinedProfilesPermissionsByIdValidateBeforeCall(predefinedProfileId, null, null);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the permissions for a predefiend profile (asynchronously)
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesPermissionsByIdAsync(Integer predefinedProfileId, final ApiCallback<PermissionsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predefinedProfilesPermissionsByIdValidateBeforeCall(predefinedProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for predefinedProfilesUpdatePredefinedProfile
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param predefinedprofiledto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesUpdatePredefinedProfileCall(Integer predefinedProfileId, PredefinedProfileDTO predefinedprofiledto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = predefinedprofiledto;

        // create path and map variables
        String localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}"
            .replaceAll("\\{" + "predefinedProfileId" + "\\}", apiClient.escapeString(predefinedProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predefinedProfilesUpdatePredefinedProfileValidateBeforeCall(Integer predefinedProfileId, PredefinedProfileDTO predefinedprofiledto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'predefinedProfileId' is set
        if (predefinedProfileId == null) {
            throw new ApiException("Missing the required parameter 'predefinedProfileId' when calling predefinedProfilesUpdatePredefinedProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = predefinedProfilesUpdatePredefinedProfileCall(predefinedProfileId, predefinedprofiledto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates a predefined profile
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param predefinedprofiledto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void predefinedProfilesUpdatePredefinedProfile(Integer predefinedProfileId, PredefinedProfileDTO predefinedprofiledto) throws ApiException {
        predefinedProfilesUpdatePredefinedProfileWithHttpInfo(predefinedProfileId, predefinedprofiledto);
    }

    /**
     * This call updates a predefined profile
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param predefinedprofiledto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> predefinedProfilesUpdatePredefinedProfileWithHttpInfo(Integer predefinedProfileId, PredefinedProfileDTO predefinedprofiledto) throws ApiException {
        com.squareup.okhttp.Call call = predefinedProfilesUpdatePredefinedProfileValidateBeforeCall(predefinedProfileId, predefinedprofiledto, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call updates a predefined profile (asynchronously)
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param predefinedprofiledto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesUpdatePredefinedProfileAsync(Integer predefinedProfileId, PredefinedProfileDTO predefinedprofiledto, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predefinedProfilesUpdatePredefinedProfileValidateBeforeCall(predefinedProfileId, predefinedprofiledto, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for predefinedProfilesWritePermissionsById
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param permissions Permissions to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesWritePermissionsByIdCall(Integer predefinedProfileId, PermissionsDTO permissions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = permissions;

        // create path and map variables
        String localVarPath = "/api/PredefinedProfiles/{predefinedProfileId}/Permissions"
            .replaceAll("\\{" + "predefinedProfileId" + "\\}", apiClient.escapeString(predefinedProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predefinedProfilesWritePermissionsByIdValidateBeforeCall(Integer predefinedProfileId, PermissionsDTO permissions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'predefinedProfileId' is set
        if (predefinedProfileId == null) {
            throw new ApiException("Missing the required parameter 'predefinedProfileId' when calling predefinedProfilesWritePermissionsById(Async)");
        }
        
        // verify the required parameter 'permissions' is set
        if (permissions == null) {
            throw new ApiException("Missing the required parameter 'permissions' when calling predefinedProfilesWritePermissionsById(Async)");
        }
        

        com.squareup.okhttp.Call call = predefinedProfilesWritePermissionsByIdCall(predefinedProfileId, permissions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates permissions for a predefined profile
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param permissions Permissions to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void predefinedProfilesWritePermissionsById(Integer predefinedProfileId, PermissionsDTO permissions) throws ApiException {
        predefinedProfilesWritePermissionsByIdWithHttpInfo(predefinedProfileId, permissions);
    }

    /**
     * This call updates permissions for a predefined profile
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param permissions Permissions to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> predefinedProfilesWritePermissionsByIdWithHttpInfo(Integer predefinedProfileId, PermissionsDTO permissions) throws ApiException {
        com.squareup.okhttp.Call call = predefinedProfilesWritePermissionsByIdValidateBeforeCall(predefinedProfileId, permissions, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call updates permissions for a predefined profile (asynchronously)
     * 
     * @param predefinedProfileId Predefined profile identifier (required)
     * @param permissions Permissions to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesWritePermissionsByIdAsync(Integer predefinedProfileId, PermissionsDTO permissions, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predefinedProfilesWritePermissionsByIdValidateBeforeCall(predefinedProfileId, permissions, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for predefinedProfilesWritePredefinedProfile
     * @param predefinedprofiledto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesWritePredefinedProfileCall(PredefinedProfileDTO predefinedprofiledto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = predefinedprofiledto;

        // create path and map variables
        String localVarPath = "/api/PredefinedProfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call predefinedProfilesWritePredefinedProfileValidateBeforeCall(PredefinedProfileDTO predefinedprofiledto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = predefinedProfilesWritePredefinedProfileCall(predefinedprofiledto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call creates a predefined profile
     * 
     * @param predefinedprofiledto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void predefinedProfilesWritePredefinedProfile(PredefinedProfileDTO predefinedprofiledto) throws ApiException {
        predefinedProfilesWritePredefinedProfileWithHttpInfo(predefinedprofiledto);
    }

    /**
     * This call creates a predefined profile
     * 
     * @param predefinedprofiledto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> predefinedProfilesWritePredefinedProfileWithHttpInfo(PredefinedProfileDTO predefinedprofiledto) throws ApiException {
        com.squareup.okhttp.Call call = predefinedProfilesWritePredefinedProfileValidateBeforeCall(predefinedprofiledto, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call creates a predefined profile (asynchronously)
     * 
     * @param predefinedprofiledto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call predefinedProfilesWritePredefinedProfileAsync(PredefinedProfileDTO predefinedprofiledto, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = predefinedProfilesWritePredefinedProfileValidateBeforeCall(predefinedprofiledto, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
