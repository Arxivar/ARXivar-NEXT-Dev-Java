/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccessTokenInfoDTO;
import io.swagger.client.model.AuthenticationRefreshTokenRequestDTO;
import io.swagger.client.model.AuthenticationTokenDTO;
import io.swagger.client.model.AuthenticationTokenImplicitRequestDTO;
import io.swagger.client.model.AuthenticationTokenRequestDTO;
import io.swagger.client.model.AuthenticationTokenResponseDTO;
import io.swagger.client.model.ClaimInfoDTO;
import io.swagger.client.model.LogonProviderInfoDto;
import io.swagger.client.model.PortalLogoutRequestDto;
import io.swagger.client.model.RefreshTokenRequestDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient apiClient;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for authenticationGetAcecssTokenClaims
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authenticationGetAcecssTokenClaimsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Authentication/AcecssTokenClaims";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authenticationGetAcecssTokenClaimsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = authenticationGetAcecssTokenClaimsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the access token claims
     * 
     * @return List&lt;ClaimInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ClaimInfoDTO> authenticationGetAcecssTokenClaims() throws ApiException {
        ApiResponse<List<ClaimInfoDTO>> resp = authenticationGetAcecssTokenClaimsWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns the access token claims
     * 
     * @return ApiResponse&lt;List&lt;ClaimInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ClaimInfoDTO>> authenticationGetAcecssTokenClaimsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = authenticationGetAcecssTokenClaimsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ClaimInfoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the access token claims (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authenticationGetAcecssTokenClaimsAsync(final ApiCallback<List<ClaimInfoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authenticationGetAcecssTokenClaimsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ClaimInfoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for authenticationGetLogonProviderInfo
     * @param id Logon provider identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authenticationGetLogonProviderInfoCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Authentication/logonProvider/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authenticationGetLogonProviderInfoValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authenticationGetLogonProviderInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = authenticationGetLogonProviderInfoCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a specific logon provider by id
     * 
     * @param id Logon provider identifier (required)
     * @return LogonProviderInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LogonProviderInfoDto authenticationGetLogonProviderInfo(String id) throws ApiException {
        ApiResponse<LogonProviderInfoDto> resp = authenticationGetLogonProviderInfoWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * This call returns a specific logon provider by id
     * 
     * @param id Logon provider identifier (required)
     * @return ApiResponse&lt;LogonProviderInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LogonProviderInfoDto> authenticationGetLogonProviderInfoWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = authenticationGetLogonProviderInfoValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<LogonProviderInfoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a specific logon provider by id (asynchronously)
     * 
     * @param id Logon provider identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authenticationGetLogonProviderInfoAsync(String id, final ApiCallback<LogonProviderInfoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authenticationGetLogonProviderInfoValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogonProviderInfoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for authenticationGetLogonProviderInfoList
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authenticationGetLogonProviderInfoListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Authentication/logonProviderList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authenticationGetLogonProviderInfoListValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = authenticationGetLogonProviderInfoListCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the logon provider list
     * 
     * @return List&lt;LogonProviderInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LogonProviderInfoDto> authenticationGetLogonProviderInfoList() throws ApiException {
        ApiResponse<List<LogonProviderInfoDto>> resp = authenticationGetLogonProviderInfoListWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns the logon provider list
     * 
     * @return ApiResponse&lt;List&lt;LogonProviderInfoDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LogonProviderInfoDto>> authenticationGetLogonProviderInfoListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = authenticationGetLogonProviderInfoListValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<LogonProviderInfoDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the logon provider list (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authenticationGetLogonProviderInfoListAsync(final ApiCallback<List<LogonProviderInfoDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authenticationGetLogonProviderInfoListValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LogonProviderInfoDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for authenticationGetToken
     * @param authenticationTokenRequest Token request for authentication (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authenticationGetTokenCall(AuthenticationTokenRequestDTO authenticationTokenRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authenticationTokenRequest;

        // create path and map variables
        String localVarPath = "/api/Authentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authenticationGetTokenValidateBeforeCall(AuthenticationTokenRequestDTO authenticationTokenRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authenticationTokenRequest' is set
        if (authenticationTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationTokenRequest' when calling authenticationGetToken(Async)");
        }
        

        com.squareup.okhttp.Call call = authenticationGetTokenCall(authenticationTokenRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a new authentication token for a authentication request
     * 
     * @param authenticationTokenRequest Token request for authentication (required)
     * @return AuthenticationTokenDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthenticationTokenDTO authenticationGetToken(AuthenticationTokenRequestDTO authenticationTokenRequest) throws ApiException {
        ApiResponse<AuthenticationTokenDTO> resp = authenticationGetTokenWithHttpInfo(authenticationTokenRequest);
        return resp.getData();
    }

    /**
     * This call returns a new authentication token for a authentication request
     * 
     * @param authenticationTokenRequest Token request for authentication (required)
     * @return ApiResponse&lt;AuthenticationTokenDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthenticationTokenDTO> authenticationGetTokenWithHttpInfo(AuthenticationTokenRequestDTO authenticationTokenRequest) throws ApiException {
        com.squareup.okhttp.Call call = authenticationGetTokenValidateBeforeCall(authenticationTokenRequest, null, null);
        Type localVarReturnType = new TypeToken<AuthenticationTokenDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a new authentication token for a authentication request (asynchronously)
     * 
     * @param authenticationTokenRequest Token request for authentication (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authenticationGetTokenAsync(AuthenticationTokenRequestDTO authenticationTokenRequest, final ApiCallback<AuthenticationTokenDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authenticationGetTokenValidateBeforeCall(authenticationTokenRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthenticationTokenDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for authenticationGetTokenArxAssistant
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authenticationGetTokenArxAssistantCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Authentication/getTokenArxAssistant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authenticationGetTokenArxAssistantValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = authenticationGetTokenArxAssistantCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns authentication token for Assistant
     * 
     * @return AuthenticationTokenDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthenticationTokenDTO authenticationGetTokenArxAssistant() throws ApiException {
        ApiResponse<AuthenticationTokenDTO> resp = authenticationGetTokenArxAssistantWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns authentication token for Assistant
     * 
     * @return ApiResponse&lt;AuthenticationTokenDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthenticationTokenDTO> authenticationGetTokenArxAssistantWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = authenticationGetTokenArxAssistantValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AuthenticationTokenDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns authentication token for Assistant (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authenticationGetTokenArxAssistantAsync(final ApiCallback<AuthenticationTokenDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authenticationGetTokenArxAssistantValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthenticationTokenDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for authenticationGetUserAuthenticationAccessTokenInfo
     * @param authenticationTokenRequest Token request for authentication (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authenticationGetUserAuthenticationAccessTokenInfoCall(AuthenticationTokenRequestDTO authenticationTokenRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authenticationTokenRequest;

        // create path and map variables
        String localVarPath = "/api/Authentication/getUserAuthenticationAccessTokenInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authenticationGetUserAuthenticationAccessTokenInfoValidateBeforeCall(AuthenticationTokenRequestDTO authenticationTokenRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authenticationTokenRequest' is set
        if (authenticationTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationTokenRequest' when calling authenticationGetUserAuthenticationAccessTokenInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = authenticationGetUserAuthenticationAccessTokenInfoCall(authenticationTokenRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a decoded authentication token for user
     * 
     * @param authenticationTokenRequest Token request for authentication (required)
     * @return AccessTokenInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessTokenInfoDTO authenticationGetUserAuthenticationAccessTokenInfo(AuthenticationTokenRequestDTO authenticationTokenRequest) throws ApiException {
        ApiResponse<AccessTokenInfoDTO> resp = authenticationGetUserAuthenticationAccessTokenInfoWithHttpInfo(authenticationTokenRequest);
        return resp.getData();
    }

    /**
     * This call returns a decoded authentication token for user
     * 
     * @param authenticationTokenRequest Token request for authentication (required)
     * @return ApiResponse&lt;AccessTokenInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessTokenInfoDTO> authenticationGetUserAuthenticationAccessTokenInfoWithHttpInfo(AuthenticationTokenRequestDTO authenticationTokenRequest) throws ApiException {
        com.squareup.okhttp.Call call = authenticationGetUserAuthenticationAccessTokenInfoValidateBeforeCall(authenticationTokenRequest, null, null);
        Type localVarReturnType = new TypeToken<AccessTokenInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a decoded authentication token for user (asynchronously)
     * 
     * @param authenticationTokenRequest Token request for authentication (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authenticationGetUserAuthenticationAccessTokenInfoAsync(AuthenticationTokenRequestDTO authenticationTokenRequest, final ApiCallback<AccessTokenInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authenticationGetUserAuthenticationAccessTokenInfoValidateBeforeCall(authenticationTokenRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessTokenInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for authenticationGetWindowsLogonRedirectUri
     * @param authenticationTokenImplicitRequestDto Token request for implicit authentication (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authenticationGetWindowsLogonRedirectUriCall(AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authenticationTokenImplicitRequestDto;

        // create path and map variables
        String localVarPath = "/api/Authentication/getWindowsLogonRedirectUri";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authenticationGetWindowsLogonRedirectUriValidateBeforeCall(AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authenticationTokenImplicitRequestDto' is set
        if (authenticationTokenImplicitRequestDto == null) {
            throw new ApiException("Missing the required parameter 'authenticationTokenImplicitRequestDto' when calling authenticationGetWindowsLogonRedirectUri(Async)");
        }
        

        com.squareup.okhttp.Call call = authenticationGetWindowsLogonRedirectUriCall(authenticationTokenImplicitRequestDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the provides logon redirect uri for implicit windows authentication
     * 
     * @param authenticationTokenImplicitRequestDto Token request for implicit authentication (required)
     * @return AuthenticationTokenResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthenticationTokenResponseDTO authenticationGetWindowsLogonRedirectUri(AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto) throws ApiException {
        ApiResponse<AuthenticationTokenResponseDTO> resp = authenticationGetWindowsLogonRedirectUriWithHttpInfo(authenticationTokenImplicitRequestDto);
        return resp.getData();
    }

    /**
     * This call returns the provides logon redirect uri for implicit windows authentication
     * 
     * @param authenticationTokenImplicitRequestDto Token request for implicit authentication (required)
     * @return ApiResponse&lt;AuthenticationTokenResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthenticationTokenResponseDTO> authenticationGetWindowsLogonRedirectUriWithHttpInfo(AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto) throws ApiException {
        com.squareup.okhttp.Call call = authenticationGetWindowsLogonRedirectUriValidateBeforeCall(authenticationTokenImplicitRequestDto, null, null);
        Type localVarReturnType = new TypeToken<AuthenticationTokenResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the provides logon redirect uri for implicit windows authentication (asynchronously)
     * 
     * @param authenticationTokenImplicitRequestDto Token request for implicit authentication (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authenticationGetWindowsLogonRedirectUriAsync(AuthenticationTokenImplicitRequestDTO authenticationTokenImplicitRequestDto, final ApiCallback<AuthenticationTokenResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authenticationGetWindowsLogonRedirectUriValidateBeforeCall(authenticationTokenImplicitRequestDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthenticationTokenResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for authenticationPortalLogout
     * @param portalLogoutRequest  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authenticationPortalLogoutCall(PortalLogoutRequestDto portalLogoutRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portalLogoutRequest;

        // create path and map variables
        String localVarPath = "/api/Authentication/PortalLogout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authenticationPortalLogoutValidateBeforeCall(PortalLogoutRequestDto portalLogoutRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portalLogoutRequest' is set
        if (portalLogoutRequest == null) {
            throw new ApiException("Missing the required parameter 'portalLogoutRequest' when calling authenticationPortalLogout(Async)");
        }
        

        com.squareup.okhttp.Call call = authenticationPortalLogoutCall(portalLogoutRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Portal logout audit
     * 
     * @param portalLogoutRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void authenticationPortalLogout(PortalLogoutRequestDto portalLogoutRequest) throws ApiException {
        authenticationPortalLogoutWithHttpInfo(portalLogoutRequest);
    }

    /**
     * Portal logout audit
     * 
     * @param portalLogoutRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> authenticationPortalLogoutWithHttpInfo(PortalLogoutRequestDto portalLogoutRequest) throws ApiException {
        com.squareup.okhttp.Call call = authenticationPortalLogoutValidateBeforeCall(portalLogoutRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Portal logout audit (asynchronously)
     * 
     * @param portalLogoutRequest  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authenticationPortalLogoutAsync(PortalLogoutRequestDto portalLogoutRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authenticationPortalLogoutValidateBeforeCall(portalLogoutRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for authenticationRefresh
     * @param refreshTokenRequest Token request for authentication refresh (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authenticationRefreshCall(RefreshTokenRequestDTO refreshTokenRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = refreshTokenRequest;

        // create path and map variables
        String localVarPath = "/api/Authentication/refreshtoken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authenticationRefreshValidateBeforeCall(RefreshTokenRequestDTO refreshTokenRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'refreshTokenRequest' is set
        if (refreshTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'refreshTokenRequest' when calling authenticationRefresh(Async)");
        }
        

        com.squareup.okhttp.Call call = authenticationRefreshCall(refreshTokenRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a new authentication token by a refresh token string
     * 
     * @param refreshTokenRequest Token request for authentication refresh (required)
     * @return AuthenticationTokenDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthenticationTokenDTO authenticationRefresh(RefreshTokenRequestDTO refreshTokenRequest) throws ApiException {
        ApiResponse<AuthenticationTokenDTO> resp = authenticationRefreshWithHttpInfo(refreshTokenRequest);
        return resp.getData();
    }

    /**
     * This call returns a new authentication token by a refresh token string
     * 
     * @param refreshTokenRequest Token request for authentication refresh (required)
     * @return ApiResponse&lt;AuthenticationTokenDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthenticationTokenDTO> authenticationRefreshWithHttpInfo(RefreshTokenRequestDTO refreshTokenRequest) throws ApiException {
        com.squareup.okhttp.Call call = authenticationRefreshValidateBeforeCall(refreshTokenRequest, null, null);
        Type localVarReturnType = new TypeToken<AuthenticationTokenDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a new authentication token by a refresh token string (asynchronously)
     * 
     * @param refreshTokenRequest Token request for authentication refresh (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authenticationRefreshAsync(RefreshTokenRequestDTO refreshTokenRequest, final ApiCallback<AuthenticationTokenDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authenticationRefreshValidateBeforeCall(refreshTokenRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthenticationTokenDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for authenticationRefreshAuthenticationAccessTokenInfo
     * @param authenticationRefreshTokenRequest Authetication refresh token request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call authenticationRefreshAuthenticationAccessTokenInfoCall(AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authenticationRefreshTokenRequest;

        // create path and map variables
        String localVarPath = "/api/Authentication/refreshUserAuthenticationAccessTokenInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authenticationRefreshAuthenticationAccessTokenInfoValidateBeforeCall(AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authenticationRefreshTokenRequest' is set
        if (authenticationRefreshTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationRefreshTokenRequest' when calling authenticationRefreshAuthenticationAccessTokenInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = authenticationRefreshAuthenticationAccessTokenInfoCall(authenticationRefreshTokenRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call refreshes and decodes authentication token for user
     * 
     * @param authenticationRefreshTokenRequest Authetication refresh token request (required)
     * @return AccessTokenInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessTokenInfoDTO authenticationRefreshAuthenticationAccessTokenInfo(AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest) throws ApiException {
        ApiResponse<AccessTokenInfoDTO> resp = authenticationRefreshAuthenticationAccessTokenInfoWithHttpInfo(authenticationRefreshTokenRequest);
        return resp.getData();
    }

    /**
     * This call refreshes and decodes authentication token for user
     * 
     * @param authenticationRefreshTokenRequest Authetication refresh token request (required)
     * @return ApiResponse&lt;AccessTokenInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessTokenInfoDTO> authenticationRefreshAuthenticationAccessTokenInfoWithHttpInfo(AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest) throws ApiException {
        com.squareup.okhttp.Call call = authenticationRefreshAuthenticationAccessTokenInfoValidateBeforeCall(authenticationRefreshTokenRequest, null, null);
        Type localVarReturnType = new TypeToken<AccessTokenInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call refreshes and decodes authentication token for user (asynchronously)
     * 
     * @param authenticationRefreshTokenRequest Authetication refresh token request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authenticationRefreshAuthenticationAccessTokenInfoAsync(AuthenticationRefreshTokenRequestDTO authenticationRefreshTokenRequest, final ApiCallback<AccessTokenInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authenticationRefreshAuthenticationAccessTokenInfoValidateBeforeCall(authenticationRefreshTokenRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessTokenInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
