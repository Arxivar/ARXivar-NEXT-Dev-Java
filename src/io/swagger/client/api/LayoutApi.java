/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.LayoutDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LayoutApi {
    private ApiClient apiClient;

    public LayoutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LayoutApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for layoutDelete
     * @param layoutId Id of the layout to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call layoutDeleteCall(Integer layoutId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Layout/{layoutId}"
            .replaceAll("\\{" + "layoutId" + "\\}", apiClient.escapeString(layoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call layoutDeleteValidateBeforeCall(Integer layoutId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'layoutId' is set
        if (layoutId == null) {
            throw new ApiException("Missing the required parameter 'layoutId' when calling layoutDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = layoutDeleteCall(layoutId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call delete an existent layout
     * 
     * @param layoutId Id of the layout to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void layoutDelete(Integer layoutId) throws ApiException {
        layoutDeleteWithHttpInfo(layoutId);
    }

    /**
     * This call delete an existent layout
     * 
     * @param layoutId Id of the layout to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> layoutDeleteWithHttpInfo(Integer layoutId) throws ApiException {
        com.squareup.okhttp.Call call = layoutDeleteValidateBeforeCall(layoutId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call delete an existent layout (asynchronously)
     * 
     * @param layoutId Id of the layout to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call layoutDeleteAsync(Integer layoutId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = layoutDeleteValidateBeforeCall(layoutId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for layoutGetById
     * @param id Id of the wanted layout (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call layoutGetByIdCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Layout/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call layoutGetByIdValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling layoutGetById(Async)");
        }
        

        com.squareup.okhttp.Call call = layoutGetByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the single layout by the given id
     * 
     * @param id Id of the wanted layout (required)
     * @return LayoutDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutDTO layoutGetById(Integer id) throws ApiException {
        ApiResponse<LayoutDTO> resp = layoutGetByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * This call returns the single layout by the given id
     * 
     * @param id Id of the wanted layout (required)
     * @return ApiResponse&lt;LayoutDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutDTO> layoutGetByIdWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = layoutGetByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<LayoutDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the single layout by the given id (asynchronously)
     * 
     * @param id Id of the wanted layout (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call layoutGetByIdAsync(Integer id, final ApiCallback<LayoutDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = layoutGetByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LayoutDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for layoutGetByTask
     * @param taskWorkId TaskWorkId (required)
     * @param usingtype Possible values:  2: Computer  4: Tablet  8: Smartphone  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call layoutGetByTaskCall(Integer taskWorkId, Integer usingtype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Layout/Task/{taskWorkId}/{usingtype}"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "usingtype" + "\\}", apiClient.escapeString(usingtype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call layoutGetByTaskValidateBeforeCall(Integer taskWorkId, Integer usingtype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling layoutGetByTask(Async)");
        }
        
        // verify the required parameter 'usingtype' is set
        if (usingtype == null) {
            throw new ApiException("Missing the required parameter 'usingtype' when calling layoutGetByTask(Async)");
        }
        

        com.squareup.okhttp.Call call = layoutGetByTaskCall(taskWorkId, usingtype, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the layout for the given user, the given type and the given utilization
     * 
     * @param taskWorkId TaskWorkId (required)
     * @param usingtype Possible values:  2: Computer  4: Tablet  8: Smartphone  (required)
     * @return LayoutDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutDTO layoutGetByTask(Integer taskWorkId, Integer usingtype) throws ApiException {
        ApiResponse<LayoutDTO> resp = layoutGetByTaskWithHttpInfo(taskWorkId, usingtype);
        return resp.getData();
    }

    /**
     * This call returns the layout for the given user, the given type and the given utilization
     * 
     * @param taskWorkId TaskWorkId (required)
     * @param usingtype Possible values:  2: Computer  4: Tablet  8: Smartphone  (required)
     * @return ApiResponse&lt;LayoutDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutDTO> layoutGetByTaskWithHttpInfo(Integer taskWorkId, Integer usingtype) throws ApiException {
        com.squareup.okhttp.Call call = layoutGetByTaskValidateBeforeCall(taskWorkId, usingtype, null, null);
        Type localVarReturnType = new TypeToken<LayoutDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the layout for the given user, the given type and the given utilization (asynchronously)
     * 
     * @param taskWorkId TaskWorkId (required)
     * @param usingtype Possible values:  2: Computer  4: Tablet  8: Smartphone  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call layoutGetByTaskAsync(Integer taskWorkId, Integer usingtype, final ApiCallback<LayoutDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = layoutGetByTaskValidateBeforeCall(taskWorkId, usingtype, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LayoutDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for layoutGetByType
     * @param type Possible values:  1: DesktopMenu  2: CommandsPanel  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call layoutGetByTypeCall(Integer type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Layout/Type/{type}"
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call layoutGetByTypeValidateBeforeCall(Integer type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling layoutGetByType(Async)");
        }
        

        com.squareup.okhttp.Call call = layoutGetByTypeCall(type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all layout of the specified type
     * 
     * @param type Possible values:  1: DesktopMenu  2: CommandsPanel  (required)
     * @return List&lt;LayoutDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LayoutDTO> layoutGetByType(Integer type) throws ApiException {
        ApiResponse<List<LayoutDTO>> resp = layoutGetByTypeWithHttpInfo(type);
        return resp.getData();
    }

    /**
     * This call returns all layout of the specified type
     * 
     * @param type Possible values:  1: DesktopMenu  2: CommandsPanel  (required)
     * @return ApiResponse&lt;List&lt;LayoutDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LayoutDTO>> layoutGetByTypeWithHttpInfo(Integer type) throws ApiException {
        com.squareup.okhttp.Call call = layoutGetByTypeValidateBeforeCall(type, null, null);
        Type localVarReturnType = new TypeToken<List<LayoutDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all layout of the specified type (asynchronously)
     * 
     * @param type Possible values:  1: DesktopMenu  2: CommandsPanel  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call layoutGetByTypeAsync(Integer type, final ApiCallback<List<LayoutDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = layoutGetByTypeValidateBeforeCall(type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LayoutDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for layoutGetByUser
     * @param userId User Id (required)
     * @param usingtype Possible values:  2: Computer  4: Tablet  8: Smartphone  (required)
     * @param layouttype Possible values:  1: DesktopMenu  2: CommandsPanel  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call layoutGetByUserCall(Integer userId, Integer usingtype, Integer layouttype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Layout/User/{userId}/{usingtype}/{layouttype}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "usingtype" + "\\}", apiClient.escapeString(usingtype.toString()))
            .replaceAll("\\{" + "layouttype" + "\\}", apiClient.escapeString(layouttype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call layoutGetByUserValidateBeforeCall(Integer userId, Integer usingtype, Integer layouttype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling layoutGetByUser(Async)");
        }
        
        // verify the required parameter 'usingtype' is set
        if (usingtype == null) {
            throw new ApiException("Missing the required parameter 'usingtype' when calling layoutGetByUser(Async)");
        }
        
        // verify the required parameter 'layouttype' is set
        if (layouttype == null) {
            throw new ApiException("Missing the required parameter 'layouttype' when calling layoutGetByUser(Async)");
        }
        

        com.squareup.okhttp.Call call = layoutGetByUserCall(userId, usingtype, layouttype, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the layout for the given user, the given type and the given utilization
     * 
     * @param userId User Id (required)
     * @param usingtype Possible values:  2: Computer  4: Tablet  8: Smartphone  (required)
     * @param layouttype Possible values:  1: DesktopMenu  2: CommandsPanel  (required)
     * @return LayoutDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutDTO layoutGetByUser(Integer userId, Integer usingtype, Integer layouttype) throws ApiException {
        ApiResponse<LayoutDTO> resp = layoutGetByUserWithHttpInfo(userId, usingtype, layouttype);
        return resp.getData();
    }

    /**
     * This call returns the layout for the given user, the given type and the given utilization
     * 
     * @param userId User Id (required)
     * @param usingtype Possible values:  2: Computer  4: Tablet  8: Smartphone  (required)
     * @param layouttype Possible values:  1: DesktopMenu  2: CommandsPanel  (required)
     * @return ApiResponse&lt;LayoutDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutDTO> layoutGetByUserWithHttpInfo(Integer userId, Integer usingtype, Integer layouttype) throws ApiException {
        com.squareup.okhttp.Call call = layoutGetByUserValidateBeforeCall(userId, usingtype, layouttype, null, null);
        Type localVarReturnType = new TypeToken<LayoutDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the layout for the given user, the given type and the given utilization (asynchronously)
     * 
     * @param userId User Id (required)
     * @param usingtype Possible values:  2: Computer  4: Tablet  8: Smartphone  (required)
     * @param layouttype Possible values:  1: DesktopMenu  2: CommandsPanel  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call layoutGetByUserAsync(Integer userId, Integer usingtype, Integer layouttype, final ApiCallback<LayoutDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = layoutGetByUserValidateBeforeCall(userId, usingtype, layouttype, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LayoutDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for layoutPost
     * @param layout Layout to be saved (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call layoutPostCall(LayoutDTO layout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = layout;

        // create path and map variables
        String localVarPath = "/api/Layout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call layoutPostValidateBeforeCall(LayoutDTO layout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'layout' is set
        if (layout == null) {
            throw new ApiException("Missing the required parameter 'layout' when calling layoutPost(Async)");
        }
        

        com.squareup.okhttp.Call call = layoutPostCall(layout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call save a new layout
     * 
     * @param layout Layout to be saved (required)
     * @return LayoutDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutDTO layoutPost(LayoutDTO layout) throws ApiException {
        ApiResponse<LayoutDTO> resp = layoutPostWithHttpInfo(layout);
        return resp.getData();
    }

    /**
     * This call save a new layout
     * 
     * @param layout Layout to be saved (required)
     * @return ApiResponse&lt;LayoutDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutDTO> layoutPostWithHttpInfo(LayoutDTO layout) throws ApiException {
        com.squareup.okhttp.Call call = layoutPostValidateBeforeCall(layout, null, null);
        Type localVarReturnType = new TypeToken<LayoutDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call save a new layout (asynchronously)
     * 
     * @param layout Layout to be saved (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call layoutPostAsync(LayoutDTO layout, final ApiCallback<LayoutDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = layoutPostValidateBeforeCall(layout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LayoutDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for layoutPut
     * @param id id of the wanted layout (required)
     * @param layout New version of layout (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call layoutPutCall(Integer id, LayoutDTO layout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = layout;

        // create path and map variables
        String localVarPath = "/api/Layout/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call layoutPutValidateBeforeCall(Integer id, LayoutDTO layout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling layoutPut(Async)");
        }
        
        // verify the required parameter 'layout' is set
        if (layout == null) {
            throw new ApiException("Missing the required parameter 'layout' when calling layoutPut(Async)");
        }
        

        com.squareup.okhttp.Call call = layoutPutCall(id, layout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call update a layout
     * 
     * @param id id of the wanted layout (required)
     * @param layout New version of layout (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void layoutPut(Integer id, LayoutDTO layout) throws ApiException {
        layoutPutWithHttpInfo(id, layout);
    }

    /**
     * This call update a layout
     * 
     * @param id id of the wanted layout (required)
     * @param layout New version of layout (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> layoutPutWithHttpInfo(Integer id, LayoutDTO layout) throws ApiException {
        com.squareup.okhttp.Call call = layoutPutValidateBeforeCall(id, layout, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call update a layout (asynchronously)
     * 
     * @param id id of the wanted layout (required)
     * @param layout New version of layout (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call layoutPutAsync(Integer id, LayoutDTO layout, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = layoutPutValidateBeforeCall(id, layout, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for layoutPutChangeOrder
     * @param layoutId Id of the layout (required)
     * @param order new order index for the given layout (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call layoutPutChangeOrderCall(Integer layoutId, Integer order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Layout/{layoutId}/{order}"
            .replaceAll("\\{" + "layoutId" + "\\}", apiClient.escapeString(layoutId.toString()))
            .replaceAll("\\{" + "order" + "\\}", apiClient.escapeString(order.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call layoutPutChangeOrderValidateBeforeCall(Integer layoutId, Integer order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'layoutId' is set
        if (layoutId == null) {
            throw new ApiException("Missing the required parameter 'layoutId' when calling layoutPutChangeOrder(Async)");
        }
        
        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling layoutPutChangeOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = layoutPutChangeOrderCall(layoutId, order, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call changes the layout order for a given layout
     * 
     * @param layoutId Id of the layout (required)
     * @param order new order index for the given layout (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void layoutPutChangeOrder(Integer layoutId, Integer order) throws ApiException {
        layoutPutChangeOrderWithHttpInfo(layoutId, order);
    }

    /**
     * This call changes the layout order for a given layout
     * 
     * @param layoutId Id of the layout (required)
     * @param order new order index for the given layout (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> layoutPutChangeOrderWithHttpInfo(Integer layoutId, Integer order) throws ApiException {
        com.squareup.okhttp.Call call = layoutPutChangeOrderValidateBeforeCall(layoutId, order, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call changes the layout order for a given layout (asynchronously)
     * 
     * @param layoutId Id of the layout (required)
     * @param order new order index for the given layout (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call layoutPutChangeOrderAsync(Integer layoutId, Integer order, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = layoutPutChangeOrderValidateBeforeCall(layoutId, order, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
