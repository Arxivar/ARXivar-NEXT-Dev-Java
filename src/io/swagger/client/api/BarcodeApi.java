/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BarcodeGraphicTemplateDto;
import io.swagger.client.model.BarcodeGraphicTemplateSaveDto;
import io.swagger.client.model.BarcodePrintResultDto;
import io.swagger.client.model.BarcodeTemplateDto;
import io.swagger.client.model.BarcodeUserSettingsDto;
import io.swagger.client.model.DefaultBarcodeTemplateDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BarcodeApi {
    private ApiClient apiClient;

    public BarcodeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BarcodeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for barcodeGetBarcodeGraphicUserTemplate
     * @param dmTipidocumentoId Document type identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodeGetBarcodeGraphicUserTemplateCall(Integer dmTipidocumentoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Barcode/userGraphicTemplate/documentType/{dmTipidocumentoId}"
            .replaceAll("\\{" + "dmTipidocumentoId" + "\\}", apiClient.escapeString(dmTipidocumentoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeGetBarcodeGraphicUserTemplateValidateBeforeCall(Integer dmTipidocumentoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dmTipidocumentoId' is set
        if (dmTipidocumentoId == null) {
            throw new ApiException("Missing the required parameter 'dmTipidocumentoId' when calling barcodeGetBarcodeGraphicUserTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodeGetBarcodeGraphicUserTemplateCall(dmTipidocumentoId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the barcode grapich user template
     * 
     * @param dmTipidocumentoId Document type identifier (required)
     * @return BarcodeGraphicTemplateDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BarcodeGraphicTemplateDto barcodeGetBarcodeGraphicUserTemplate(Integer dmTipidocumentoId) throws ApiException {
        ApiResponse<BarcodeGraphicTemplateDto> resp = barcodeGetBarcodeGraphicUserTemplateWithHttpInfo(dmTipidocumentoId);
        return resp.getData();
    }

    /**
     * This call returns the barcode grapich user template
     * 
     * @param dmTipidocumentoId Document type identifier (required)
     * @return ApiResponse&lt;BarcodeGraphicTemplateDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BarcodeGraphicTemplateDto> barcodeGetBarcodeGraphicUserTemplateWithHttpInfo(Integer dmTipidocumentoId) throws ApiException {
        com.squareup.okhttp.Call call = barcodeGetBarcodeGraphicUserTemplateValidateBeforeCall(dmTipidocumentoId, null, null);
        Type localVarReturnType = new TypeToken<BarcodeGraphicTemplateDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the barcode grapich user template (asynchronously)
     * 
     * @param dmTipidocumentoId Document type identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeGetBarcodeGraphicUserTemplateAsync(Integer dmTipidocumentoId, final ApiCallback<BarcodeGraphicTemplateDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeGetBarcodeGraphicUserTemplateValidateBeforeCall(dmTipidocumentoId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BarcodeGraphicTemplateDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for barcodeGetBarcodeUserSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodeGetBarcodeUserSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Barcode/userSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeGetBarcodeUserSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = barcodeGetBarcodeUserSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the barcode user default settings
     * 
     * @return BarcodeUserSettingsDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BarcodeUserSettingsDto barcodeGetBarcodeUserSettings() throws ApiException {
        ApiResponse<BarcodeUserSettingsDto> resp = barcodeGetBarcodeUserSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns the barcode user default settings
     * 
     * @return ApiResponse&lt;BarcodeUserSettingsDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BarcodeUserSettingsDto> barcodeGetBarcodeUserSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = barcodeGetBarcodeUserSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<BarcodeUserSettingsDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the barcode user default settings (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeGetBarcodeUserSettingsAsync(final ApiCallback<BarcodeUserSettingsDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeGetBarcodeUserSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BarcodeUserSettingsDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for barcodeGetBarcodeUserTemplate
     * @param dmTipidocumentoId Document type identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodeGetBarcodeUserTemplateCall(Integer dmTipidocumentoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Barcode/userTemplate/documentType/{dmTipidocumentoId}"
            .replaceAll("\\{" + "dmTipidocumentoId" + "\\}", apiClient.escapeString(dmTipidocumentoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeGetBarcodeUserTemplateValidateBeforeCall(Integer dmTipidocumentoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dmTipidocumentoId' is set
        if (dmTipidocumentoId == null) {
            throw new ApiException("Missing the required parameter 'dmTipidocumentoId' when calling barcodeGetBarcodeUserTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodeGetBarcodeUserTemplateCall(dmTipidocumentoId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the barcode user template by document type
     * 
     * @param dmTipidocumentoId Document type identifier (required)
     * @return BarcodeTemplateDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BarcodeTemplateDto barcodeGetBarcodeUserTemplate(Integer dmTipidocumentoId) throws ApiException {
        ApiResponse<BarcodeTemplateDto> resp = barcodeGetBarcodeUserTemplateWithHttpInfo(dmTipidocumentoId);
        return resp.getData();
    }

    /**
     * This call returns the barcode user template by document type
     * 
     * @param dmTipidocumentoId Document type identifier (required)
     * @return ApiResponse&lt;BarcodeTemplateDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BarcodeTemplateDto> barcodeGetBarcodeUserTemplateWithHttpInfo(Integer dmTipidocumentoId) throws ApiException {
        com.squareup.okhttp.Call call = barcodeGetBarcodeUserTemplateValidateBeforeCall(dmTipidocumentoId, null, null);
        Type localVarReturnType = new TypeToken<BarcodeTemplateDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the barcode user template by document type (asynchronously)
     * 
     * @param dmTipidocumentoId Document type identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeGetBarcodeUserTemplateAsync(Integer dmTipidocumentoId, final ApiCallback<BarcodeTemplateDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeGetBarcodeUserTemplateValidateBeforeCall(dmTipidocumentoId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BarcodeTemplateDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for barcodeGetDefaultTemplate
     * @param printerFamilyValue The printer family (see Dm_Barcode_PrinterFamily) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodeGetDefaultTemplateCall(String printerFamilyValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Barcode/defaultTemplate/printerFamily/{printerFamilyValue}"
            .replaceAll("\\{" + "printerFamilyValue" + "\\}", apiClient.escapeString(printerFamilyValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeGetDefaultTemplateValidateBeforeCall(String printerFamilyValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'printerFamilyValue' is set
        if (printerFamilyValue == null) {
            throw new ApiException("Missing the required parameter 'printerFamilyValue' when calling barcodeGetDefaultTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodeGetDefaultTemplateCall(printerFamilyValue, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS
     * 
     * @param printerFamilyValue The printer family (see Dm_Barcode_PrinterFamily) (required)
     * @return DefaultBarcodeTemplateDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DefaultBarcodeTemplateDto barcodeGetDefaultTemplate(String printerFamilyValue) throws ApiException {
        ApiResponse<DefaultBarcodeTemplateDto> resp = barcodeGetDefaultTemplateWithHttpInfo(printerFamilyValue);
        return resp.getData();
    }

    /**
     * This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS
     * 
     * @param printerFamilyValue The printer family (see Dm_Barcode_PrinterFamily) (required)
     * @return ApiResponse&lt;DefaultBarcodeTemplateDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DefaultBarcodeTemplateDto> barcodeGetDefaultTemplateWithHttpInfo(String printerFamilyValue) throws ApiException {
        com.squareup.okhttp.Call call = barcodeGetDefaultTemplateValidateBeforeCall(printerFamilyValue, null, null);
        Type localVarReturnType = new TypeToken<DefaultBarcodeTemplateDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS (asynchronously)
     * 
     * @param printerFamilyValue The printer family (see Dm_Barcode_PrinterFamily) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeGetDefaultTemplateAsync(String printerFamilyValue, final ApiCallback<DefaultBarcodeTemplateDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeGetDefaultTemplateValidateBeforeCall(printerFamilyValue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DefaultBarcodeTemplateDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for barcodePrintArxBarcode
     * @param docnumber Document identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodePrintArxBarcodeCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Barcode/printArxBarcode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (docnumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("docnumber", docnumber));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodePrintArxBarcodeValidateBeforeCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling barcodePrintArxBarcode(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodePrintArxBarcodeCall(docnumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call executes the print of barcode in format Arxivar
     * 
     * @param docnumber Document identifier (required)
     * @return BarcodePrintResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BarcodePrintResultDto barcodePrintArxBarcode(Integer docnumber) throws ApiException {
        ApiResponse<BarcodePrintResultDto> resp = barcodePrintArxBarcodeWithHttpInfo(docnumber);
        return resp.getData();
    }

    /**
     * This call executes the print of barcode in format Arxivar
     * 
     * @param docnumber Document identifier (required)
     * @return ApiResponse&lt;BarcodePrintResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BarcodePrintResultDto> barcodePrintArxBarcodeWithHttpInfo(Integer docnumber) throws ApiException {
        com.squareup.okhttp.Call call = barcodePrintArxBarcodeValidateBeforeCall(docnumber, null, null);
        Type localVarReturnType = new TypeToken<BarcodePrintResultDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call executes the print of barcode in format Arxivar (asynchronously)
     * 
     * @param docnumber Document identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodePrintArxBarcodeAsync(Integer docnumber, final ApiCallback<BarcodePrintResultDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodePrintArxBarcodeValidateBeforeCall(docnumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BarcodePrintResultDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for barcodePrintAttachmentByDocnumber
     * @param docnumber Document identifier (required)
     * @param insertRecord If it creates a barcode item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodePrintAttachmentByDocnumberCall(Integer docnumber, Boolean insertRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Barcode/printAttachment/byDocnumber/{docnumber}"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (insertRecord != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insertRecord", insertRecord));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodePrintAttachmentByDocnumberValidateBeforeCall(Integer docnumber, Boolean insertRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling barcodePrintAttachmentByDocnumber(Async)");
        }
        
        // verify the required parameter 'insertRecord' is set
        if (insertRecord == null) {
            throw new ApiException("Missing the required parameter 'insertRecord' when calling barcodePrintAttachmentByDocnumber(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodePrintAttachmentByDocnumberCall(docnumber, insertRecord, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call executes the print of barcode for attachment of document
     * 
     * @param docnumber Document identifier (required)
     * @param insertRecord If it creates a barcode item (required)
     * @return BarcodePrintResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BarcodePrintResultDto barcodePrintAttachmentByDocnumber(Integer docnumber, Boolean insertRecord) throws ApiException {
        ApiResponse<BarcodePrintResultDto> resp = barcodePrintAttachmentByDocnumberWithHttpInfo(docnumber, insertRecord);
        return resp.getData();
    }

    /**
     * This call executes the print of barcode for attachment of document
     * 
     * @param docnumber Document identifier (required)
     * @param insertRecord If it creates a barcode item (required)
     * @return ApiResponse&lt;BarcodePrintResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BarcodePrintResultDto> barcodePrintAttachmentByDocnumberWithHttpInfo(Integer docnumber, Boolean insertRecord) throws ApiException {
        com.squareup.okhttp.Call call = barcodePrintAttachmentByDocnumberValidateBeforeCall(docnumber, insertRecord, null, null);
        Type localVarReturnType = new TypeToken<BarcodePrintResultDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call executes the print of barcode for attachment of document (asynchronously)
     * 
     * @param docnumber Document identifier (required)
     * @param insertRecord If it creates a barcode item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodePrintAttachmentByDocnumberAsync(Integer docnumber, Boolean insertRecord, final ApiCallback<BarcodePrintResultDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodePrintAttachmentByDocnumberValidateBeforeCall(docnumber, insertRecord, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BarcodePrintResultDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for barcodePrintByDocnumber
     * @param docnumber Document identifier (required)
     * @param insertRecord If it creates a barcode item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodePrintByDocnumberCall(Integer docnumber, Boolean insertRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Barcode/print/byDocnumber/{docnumber}"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (insertRecord != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insertRecord", insertRecord));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodePrintByDocnumberValidateBeforeCall(Integer docnumber, Boolean insertRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling barcodePrintByDocnumber(Async)");
        }
        
        // verify the required parameter 'insertRecord' is set
        if (insertRecord == null) {
            throw new ApiException("Missing the required parameter 'insertRecord' when calling barcodePrintByDocnumber(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodePrintByDocnumberCall(docnumber, insertRecord, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call executes the print of barcode associated with a document
     * 
     * @param docnumber Document identifier (required)
     * @param insertRecord If it creates a barcode item (required)
     * @return BarcodePrintResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BarcodePrintResultDto barcodePrintByDocnumber(Integer docnumber, Boolean insertRecord) throws ApiException {
        ApiResponse<BarcodePrintResultDto> resp = barcodePrintByDocnumberWithHttpInfo(docnumber, insertRecord);
        return resp.getData();
    }

    /**
     * This call executes the print of barcode associated with a document
     * 
     * @param docnumber Document identifier (required)
     * @param insertRecord If it creates a barcode item (required)
     * @return ApiResponse&lt;BarcodePrintResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BarcodePrintResultDto> barcodePrintByDocnumberWithHttpInfo(Integer docnumber, Boolean insertRecord) throws ApiException {
        com.squareup.okhttp.Call call = barcodePrintByDocnumberValidateBeforeCall(docnumber, insertRecord, null, null);
        Type localVarReturnType = new TypeToken<BarcodePrintResultDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call executes the print of barcode associated with a document (asynchronously)
     * 
     * @param docnumber Document identifier (required)
     * @param insertRecord If it creates a barcode item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodePrintByDocnumberAsync(Integer docnumber, Boolean insertRecord, final ApiCallback<BarcodePrintResultDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodePrintByDocnumberValidateBeforeCall(docnumber, insertRecord, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BarcodePrintResultDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for barcodePrintByIdBarcode
     * @param idBarcode Barcode identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodePrintByIdBarcodeCall(Integer idBarcode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Barcode/print/{idBarcode}"
            .replaceAll("\\{" + "idBarcode" + "\\}", apiClient.escapeString(idBarcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodePrintByIdBarcodeValidateBeforeCall(Integer idBarcode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'idBarcode' is set
        if (idBarcode == null) {
            throw new ApiException("Missing the required parameter 'idBarcode' when calling barcodePrintByIdBarcode(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodePrintByIdBarcodeCall(idBarcode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call executes the print of barcode
     * 
     * @param idBarcode Barcode identifier (required)
     * @return BarcodePrintResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BarcodePrintResultDto barcodePrintByIdBarcode(Integer idBarcode) throws ApiException {
        ApiResponse<BarcodePrintResultDto> resp = barcodePrintByIdBarcodeWithHttpInfo(idBarcode);
        return resp.getData();
    }

    /**
     * This call executes the print of barcode
     * 
     * @param idBarcode Barcode identifier (required)
     * @return ApiResponse&lt;BarcodePrintResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BarcodePrintResultDto> barcodePrintByIdBarcodeWithHttpInfo(Integer idBarcode) throws ApiException {
        com.squareup.okhttp.Call call = barcodePrintByIdBarcodeValidateBeforeCall(idBarcode, null, null);
        Type localVarReturnType = new TypeToken<BarcodePrintResultDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call executes the print of barcode (asynchronously)
     * 
     * @param idBarcode Barcode identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodePrintByIdBarcodeAsync(Integer idBarcode, final ApiCallback<BarcodePrintResultDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodePrintByIdBarcodeValidateBeforeCall(idBarcode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BarcodePrintResultDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for barcodePrintRevisionByDocnumber
     * @param docnumber Document identifier (required)
     * @param insertRecord If it creates a barcode item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodePrintRevisionByDocnumberCall(Integer docnumber, Boolean insertRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Barcode/printRevision/byDocnumber/{docnumber}"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (insertRecord != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("insertRecord", insertRecord));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodePrintRevisionByDocnumberValidateBeforeCall(Integer docnumber, Boolean insertRecord, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling barcodePrintRevisionByDocnumber(Async)");
        }
        
        // verify the required parameter 'insertRecord' is set
        if (insertRecord == null) {
            throw new ApiException("Missing the required parameter 'insertRecord' when calling barcodePrintRevisionByDocnumber(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodePrintRevisionByDocnumberCall(docnumber, insertRecord, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call executes the print of barcode for revision of document
     * 
     * @param docnumber Document identifier (required)
     * @param insertRecord If it creates a barcode item (required)
     * @return BarcodePrintResultDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BarcodePrintResultDto barcodePrintRevisionByDocnumber(Integer docnumber, Boolean insertRecord) throws ApiException {
        ApiResponse<BarcodePrintResultDto> resp = barcodePrintRevisionByDocnumberWithHttpInfo(docnumber, insertRecord);
        return resp.getData();
    }

    /**
     * This call executes the print of barcode for revision of document
     * 
     * @param docnumber Document identifier (required)
     * @param insertRecord If it creates a barcode item (required)
     * @return ApiResponse&lt;BarcodePrintResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BarcodePrintResultDto> barcodePrintRevisionByDocnumberWithHttpInfo(Integer docnumber, Boolean insertRecord) throws ApiException {
        com.squareup.okhttp.Call call = barcodePrintRevisionByDocnumberValidateBeforeCall(docnumber, insertRecord, null, null);
        Type localVarReturnType = new TypeToken<BarcodePrintResultDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call executes the print of barcode for revision of document (asynchronously)
     * 
     * @param docnumber Document identifier (required)
     * @param insertRecord If it creates a barcode item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodePrintRevisionByDocnumberAsync(Integer docnumber, Boolean insertRecord, final ApiCallback<BarcodePrintResultDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodePrintRevisionByDocnumberValidateBeforeCall(docnumber, insertRecord, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BarcodePrintResultDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for barcodeSetBarcodeGraphicUserTemplate
     * @param dto Barcode Graphic Template to save (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodeSetBarcodeGraphicUserTemplateCall(BarcodeGraphicTemplateSaveDto dto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dto;

        // create path and map variables
        String localVarPath = "/api/Barcode/setUserGraphicTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeSetBarcodeGraphicUserTemplateValidateBeforeCall(BarcodeGraphicTemplateSaveDto dto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling barcodeSetBarcodeGraphicUserTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodeSetBarcodeGraphicUserTemplateCall(dto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call sets the barcode graphic user template
     * 
     * @param dto Barcode Graphic Template to save (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void barcodeSetBarcodeGraphicUserTemplate(BarcodeGraphicTemplateSaveDto dto) throws ApiException {
        barcodeSetBarcodeGraphicUserTemplateWithHttpInfo(dto);
    }

    /**
     * This call sets the barcode graphic user template
     * 
     * @param dto Barcode Graphic Template to save (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> barcodeSetBarcodeGraphicUserTemplateWithHttpInfo(BarcodeGraphicTemplateSaveDto dto) throws ApiException {
        com.squareup.okhttp.Call call = barcodeSetBarcodeGraphicUserTemplateValidateBeforeCall(dto, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call sets the barcode graphic user template (asynchronously)
     * 
     * @param dto Barcode Graphic Template to save (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeSetBarcodeGraphicUserTemplateAsync(BarcodeGraphicTemplateSaveDto dto, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeSetBarcodeGraphicUserTemplateValidateBeforeCall(dto, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for barcodeSetBarcodeUserSettings
     * @param barcodeSettings Barcode settings for user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodeSetBarcodeUserSettingsCall(BarcodeUserSettingsDto barcodeSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = barcodeSettings;

        // create path and map variables
        String localVarPath = "/api/Barcode/setUserSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeSetBarcodeUserSettingsValidateBeforeCall(BarcodeUserSettingsDto barcodeSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'barcodeSettings' is set
        if (barcodeSettings == null) {
            throw new ApiException("Missing the required parameter 'barcodeSettings' when calling barcodeSetBarcodeUserSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodeSetBarcodeUserSettingsCall(barcodeSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call sets the barcode user default settings
     * 
     * @param barcodeSettings Barcode settings for user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void barcodeSetBarcodeUserSettings(BarcodeUserSettingsDto barcodeSettings) throws ApiException {
        barcodeSetBarcodeUserSettingsWithHttpInfo(barcodeSettings);
    }

    /**
     * This call sets the barcode user default settings
     * 
     * @param barcodeSettings Barcode settings for user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> barcodeSetBarcodeUserSettingsWithHttpInfo(BarcodeUserSettingsDto barcodeSettings) throws ApiException {
        com.squareup.okhttp.Call call = barcodeSetBarcodeUserSettingsValidateBeforeCall(barcodeSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call sets the barcode user default settings (asynchronously)
     * 
     * @param barcodeSettings Barcode settings for user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeSetBarcodeUserSettingsAsync(BarcodeUserSettingsDto barcodeSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeSetBarcodeUserSettingsValidateBeforeCall(barcodeSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for barcodeSetBarcodeUserTemplate
     * @param templateDto Barcode Template (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodeSetBarcodeUserTemplateCall(BarcodeTemplateDto templateDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = templateDto;

        // create path and map variables
        String localVarPath = "/api/Barcode/setUserTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeSetBarcodeUserTemplateValidateBeforeCall(BarcodeTemplateDto templateDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'templateDto' is set
        if (templateDto == null) {
            throw new ApiException("Missing the required parameter 'templateDto' when calling barcodeSetBarcodeUserTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodeSetBarcodeUserTemplateCall(templateDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call sets the barcode user template
     * 
     * @param templateDto Barcode Template (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void barcodeSetBarcodeUserTemplate(BarcodeTemplateDto templateDto) throws ApiException {
        barcodeSetBarcodeUserTemplateWithHttpInfo(templateDto);
    }

    /**
     * This call sets the barcode user template
     * 
     * @param templateDto Barcode Template (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> barcodeSetBarcodeUserTemplateWithHttpInfo(BarcodeTemplateDto templateDto) throws ApiException {
        com.squareup.okhttp.Call call = barcodeSetBarcodeUserTemplateValidateBeforeCall(templateDto, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call sets the barcode user template (asynchronously)
     * 
     * @param templateDto Barcode Template (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeSetBarcodeUserTemplateAsync(BarcodeTemplateDto templateDto, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeSetBarcodeUserTemplateValidateBeforeCall(templateDto, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
