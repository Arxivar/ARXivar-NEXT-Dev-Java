/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.FindDTO;
import io.swagger.client.model.QuickSearchDto;
import io.swagger.client.model.RenamedQuickSearchDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuickSearchesV2Api {
    private ApiClient apiClient;

    public QuickSearchesV2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public QuickSearchesV2Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for quickSearchesV2ChangeShowFields
     * @param quickSearchId Quick search identifier (required)
     * @param showFields Value for the flag (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2ChangeShowFieldsCall(String quickSearchId, Boolean showFields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuickSearches/showFields/{quickSearchId}/{showFields}"
            .replaceAll("\\{" + "quickSearchId" + "\\}", apiClient.escapeString(quickSearchId.toString()))
            .replaceAll("\\{" + "showFields" + "\\}", apiClient.escapeString(showFields.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call quickSearchesV2ChangeShowFieldsValidateBeforeCall(String quickSearchId, Boolean showFields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickSearchId' is set
        if (quickSearchId == null) {
            throw new ApiException("Missing the required parameter 'quickSearchId' when calling quickSearchesV2ChangeShowFields(Async)");
        }
        
        // verify the required parameter 'showFields' is set
        if (showFields == null) {
            throw new ApiException("Missing the required parameter 'showFields' when calling quickSearchesV2ChangeShowFields(Async)");
        }
        

        com.squareup.okhttp.Call call = quickSearchesV2ChangeShowFieldsCall(quickSearchId, showFields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call changes the flag that enable show of the search fields
     * 
     * @param quickSearchId Quick search identifier (required)
     * @param showFields Value for the flag (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void quickSearchesV2ChangeShowFields(String quickSearchId, Boolean showFields) throws ApiException {
        quickSearchesV2ChangeShowFieldsWithHttpInfo(quickSearchId, showFields);
    }

    /**
     * This call changes the flag that enable show of the search fields
     * 
     * @param quickSearchId Quick search identifier (required)
     * @param showFields Value for the flag (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> quickSearchesV2ChangeShowFieldsWithHttpInfo(String quickSearchId, Boolean showFields) throws ApiException {
        com.squareup.okhttp.Call call = quickSearchesV2ChangeShowFieldsValidateBeforeCall(quickSearchId, showFields, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call changes the flag that enable show of the search fields (asynchronously)
     * 
     * @param quickSearchId Quick search identifier (required)
     * @param showFields Value for the flag (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2ChangeShowFieldsAsync(String quickSearchId, Boolean showFields, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = quickSearchesV2ChangeShowFieldsValidateBeforeCall(quickSearchId, showFields, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for quickSearchesV2DeleteQuickSearchById
     * @param quickSearchId Quick search identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2DeleteQuickSearchByIdCall(String quickSearchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuickSearches/{quickSearchId}"
            .replaceAll("\\{" + "quickSearchId" + "\\}", apiClient.escapeString(quickSearchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call quickSearchesV2DeleteQuickSearchByIdValidateBeforeCall(String quickSearchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickSearchId' is set
        if (quickSearchId == null) {
            throw new ApiException("Missing the required parameter 'quickSearchId' when calling quickSearchesV2DeleteQuickSearchById(Async)");
        }
        

        com.squareup.okhttp.Call call = quickSearchesV2DeleteQuickSearchByIdCall(quickSearchId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a quick search
     * 
     * @param quickSearchId Quick search identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void quickSearchesV2DeleteQuickSearchById(String quickSearchId) throws ApiException {
        quickSearchesV2DeleteQuickSearchByIdWithHttpInfo(quickSearchId);
    }

    /**
     * This call deletes a quick search
     * 
     * @param quickSearchId Quick search identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> quickSearchesV2DeleteQuickSearchByIdWithHttpInfo(String quickSearchId) throws ApiException {
        com.squareup.okhttp.Call call = quickSearchesV2DeleteQuickSearchByIdValidateBeforeCall(quickSearchId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes a quick search (asynchronously)
     * 
     * @param quickSearchId Quick search identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2DeleteQuickSearchByIdAsync(String quickSearchId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = quickSearchesV2DeleteQuickSearchByIdValidateBeforeCall(quickSearchId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for quickSearchesV2GetQuickSearch
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2GetQuickSearchCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuickSearches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call quickSearchesV2GetQuickSearchValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = quickSearchesV2GetQuickSearchCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all quick search
     * 
     * @return List&lt;FindDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FindDTO> quickSearchesV2GetQuickSearch() throws ApiException {
        ApiResponse<List<FindDTO>> resp = quickSearchesV2GetQuickSearchWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns all quick search
     * 
     * @return ApiResponse&lt;List&lt;FindDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FindDTO>> quickSearchesV2GetQuickSearchWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = quickSearchesV2GetQuickSearchValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<FindDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all quick search (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2GetQuickSearchAsync(final ApiCallback<List<FindDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = quickSearchesV2GetQuickSearchValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FindDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for quickSearchesV2GetQuickSearchById
     * @param quickSearchId Quick search identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2GetQuickSearchByIdCall(String quickSearchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuickSearches/{quickSearchId}"
            .replaceAll("\\{" + "quickSearchId" + "\\}", apiClient.escapeString(quickSearchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call quickSearchesV2GetQuickSearchByIdValidateBeforeCall(String quickSearchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickSearchId' is set
        if (quickSearchId == null) {
            throw new ApiException("Missing the required parameter 'quickSearchId' when calling quickSearchesV2GetQuickSearchById(Async)");
        }
        

        com.squareup.okhttp.Call call = quickSearchesV2GetQuickSearchByIdCall(quickSearchId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Thi call returns a quick search by its id
     * 
     * @param quickSearchId Quick search identifier (required)
     * @return QuickSearchDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuickSearchDto quickSearchesV2GetQuickSearchById(String quickSearchId) throws ApiException {
        ApiResponse<QuickSearchDto> resp = quickSearchesV2GetQuickSearchByIdWithHttpInfo(quickSearchId);
        return resp.getData();
    }

    /**
     * Thi call returns a quick search by its id
     * 
     * @param quickSearchId Quick search identifier (required)
     * @return ApiResponse&lt;QuickSearchDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuickSearchDto> quickSearchesV2GetQuickSearchByIdWithHttpInfo(String quickSearchId) throws ApiException {
        com.squareup.okhttp.Call call = quickSearchesV2GetQuickSearchByIdValidateBeforeCall(quickSearchId, null, null);
        Type localVarReturnType = new TypeToken<QuickSearchDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Thi call returns a quick search by its id (asynchronously)
     * 
     * @param quickSearchId Quick search identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2GetQuickSearchByIdAsync(String quickSearchId, final ApiCallback<QuickSearchDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = quickSearchesV2GetQuickSearchByIdValidateBeforeCall(quickSearchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuickSearchDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for quickSearchesV2Post
     * @param criteria  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2PostCall(QuickSearchDto criteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = criteria;

        // create path and map variables
        String localVarPath = "/api/v2/QuickSearches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call quickSearchesV2PostValidateBeforeCall(QuickSearchDto criteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = quickSearchesV2PostCall(criteria, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call adds a new quinck search
     * 
     * @param criteria  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String quickSearchesV2Post(QuickSearchDto criteria) throws ApiException {
        ApiResponse<String> resp = quickSearchesV2PostWithHttpInfo(criteria);
        return resp.getData();
    }

    /**
     * This call adds a new quinck search
     * 
     * @param criteria  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> quickSearchesV2PostWithHttpInfo(QuickSearchDto criteria) throws ApiException {
        com.squareup.okhttp.Call call = quickSearchesV2PostValidateBeforeCall(criteria, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call adds a new quinck search (asynchronously)
     * 
     * @param criteria  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2PostAsync(QuickSearchDto criteria, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = quickSearchesV2PostValidateBeforeCall(criteria, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for quickSearchesV2Put
     * @param quickSearchId Quick search identifier (required)
     * @param criteria  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2PutCall(String quickSearchId, QuickSearchDto criteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = criteria;

        // create path and map variables
        String localVarPath = "/api/v2/QuickSearches/{quickSearchId}"
            .replaceAll("\\{" + "quickSearchId" + "\\}", apiClient.escapeString(quickSearchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call quickSearchesV2PutValidateBeforeCall(String quickSearchId, QuickSearchDto criteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickSearchId' is set
        if (quickSearchId == null) {
            throw new ApiException("Missing the required parameter 'quickSearchId' when calling quickSearchesV2Put(Async)");
        }
        

        com.squareup.okhttp.Call call = quickSearchesV2PutCall(quickSearchId, criteria, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates a quick search
     * 
     * @param quickSearchId Quick search identifier (required)
     * @param criteria  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String quickSearchesV2Put(String quickSearchId, QuickSearchDto criteria) throws ApiException {
        ApiResponse<String> resp = quickSearchesV2PutWithHttpInfo(quickSearchId, criteria);
        return resp.getData();
    }

    /**
     * This call updates a quick search
     * 
     * @param quickSearchId Quick search identifier (required)
     * @param criteria  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> quickSearchesV2PutWithHttpInfo(String quickSearchId, QuickSearchDto criteria) throws ApiException {
        com.squareup.okhttp.Call call = quickSearchesV2PutValidateBeforeCall(quickSearchId, criteria, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call updates a quick search (asynchronously)
     * 
     * @param quickSearchId Quick search identifier (required)
     * @param criteria  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2PutAsync(String quickSearchId, QuickSearchDto criteria, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = quickSearchesV2PutValidateBeforeCall(quickSearchId, criteria, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for quickSearchesV2Rename
     * @param quickSearchRenamed Information to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2RenameCall(RenamedQuickSearchDto quickSearchRenamed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = quickSearchRenamed;

        // create path and map variables
        String localVarPath = "/api/v2/QuickSearches/rename";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call quickSearchesV2RenameValidateBeforeCall(RenamedQuickSearchDto quickSearchRenamed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quickSearchRenamed' is set
        if (quickSearchRenamed == null) {
            throw new ApiException("Missing the required parameter 'quickSearchRenamed' when calling quickSearchesV2Rename(Async)");
        }
        

        com.squareup.okhttp.Call call = quickSearchesV2RenameCall(quickSearchRenamed, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call renames a quick search
     * 
     * @param quickSearchRenamed Information to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void quickSearchesV2Rename(RenamedQuickSearchDto quickSearchRenamed) throws ApiException {
        quickSearchesV2RenameWithHttpInfo(quickSearchRenamed);
    }

    /**
     * This call renames a quick search
     * 
     * @param quickSearchRenamed Information to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> quickSearchesV2RenameWithHttpInfo(RenamedQuickSearchDto quickSearchRenamed) throws ApiException {
        com.squareup.okhttp.Call call = quickSearchesV2RenameValidateBeforeCall(quickSearchRenamed, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call renames a quick search (asynchronously)
     * 
     * @param quickSearchRenamed Information to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call quickSearchesV2RenameAsync(RenamedQuickSearchDto quickSearchRenamed, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = quickSearchesV2RenameValidateBeforeCall(quickSearchRenamed, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
