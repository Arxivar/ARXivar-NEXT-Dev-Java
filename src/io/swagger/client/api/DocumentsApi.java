/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentsApi {
    private ApiClient apiClient;

    public DocumentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for documentsCanWrite
     * @param docnumber Document Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsCanWriteCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/{docnumber}/canWrite"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsCanWriteValidateBeforeCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling documentsCanWrite(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsCanWriteCall(docnumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns if the user can write the file.
     * 
     * @param docnumber Document Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void documentsCanWrite(Integer docnumber) throws ApiException {
        documentsCanWriteWithHttpInfo(docnumber);
    }

    /**
     * This call returns if the user can write the file.
     * 
     * @param docnumber Document Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> documentsCanWriteWithHttpInfo(Integer docnumber) throws ApiException {
        com.squareup.okhttp.Call call = documentsCanWriteValidateBeforeCall(docnumber, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call returns if the user can write the file. (asynchronously)
     * 
     * @param docnumber Document Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsCanWriteAsync(Integer docnumber, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsCanWriteValidateBeforeCall(docnumber, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for documentsCanWriteForTask
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsCanWriteForTaskCall(Integer processDocId, Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/forTask/{processDocId}/{taskWorkId}/canWrite"
            .replaceAll("\\{" + "processDocId" + "\\}", apiClient.escapeString(processDocId.toString()))
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsCanWriteForTaskValidateBeforeCall(Integer processDocId, Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDocId' is set
        if (processDocId == null) {
            throw new ApiException("Missing the required parameter 'processDocId' when calling documentsCanWriteForTask(Async)");
        }
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling documentsCanWriteForTask(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsCanWriteForTaskCall(processDocId, taskWorkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns if the user can write the document under workflow process.
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void documentsCanWriteForTask(Integer processDocId, Integer taskWorkId) throws ApiException {
        documentsCanWriteForTaskWithHttpInfo(processDocId, taskWorkId);
    }

    /**
     * This call returns if the user can write the document under workflow process.
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> documentsCanWriteForTaskWithHttpInfo(Integer processDocId, Integer taskWorkId) throws ApiException {
        com.squareup.okhttp.Call call = documentsCanWriteForTaskValidateBeforeCall(processDocId, taskWorkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call returns if the user can write the document under workflow process. (asynchronously)
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsCanWriteForTaskAsync(Integer processDocId, Integer taskWorkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsCanWriteForTaskValidateBeforeCall(processDocId, taskWorkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for documentsGetDocumentByRevisionId
     * @param revisionId Identifier of revision (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsGetDocumentByRevisionIdCall(Integer revisionId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/byRevision/{revisionId}"
            .replaceAll("\\{" + "revisionId" + "\\}", apiClient.escapeString(revisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetDocumentByRevisionIdValidateBeforeCall(Integer revisionId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling documentsGetDocumentByRevisionId(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsGetDocumentByRevisionIdCall(revisionId, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the document associated to a specified revision
     * 
     * @param revisionId Identifier of revision (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object documentsGetDocumentByRevisionId(Integer revisionId, Boolean forView) throws ApiException {
        ApiResponse<Object> resp = documentsGetDocumentByRevisionIdWithHttpInfo(revisionId, forView);
        return resp.getData();
    }

    /**
     * This call returns the document associated to a specified revision
     * 
     * @param revisionId Identifier of revision (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> documentsGetDocumentByRevisionIdWithHttpInfo(Integer revisionId, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetDocumentByRevisionIdValidateBeforeCall(revisionId, forView, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the document associated to a specified revision (asynchronously)
     * 
     * @param revisionId Identifier of revision (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsGetDocumentByRevisionIdAsync(Integer revisionId, Boolean forView, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetDocumentByRevisionIdValidateBeforeCall(revisionId, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentsGetExtractP7M
     * @param id Document Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call documentsGetExtractP7MCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/{id}/extract"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetExtractP7MValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsGetExtractP7M(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsGetExtractP7MCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the file, contained in the signature, associated with the profile
     * This method is deprecated. Use {id}/{forView} instead
     * @param id Document Identifier (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Object documentsGetExtractP7M(Integer id) throws ApiException {
        ApiResponse<Object> resp = documentsGetExtractP7MWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * This call returns the file, contained in the signature, associated with the profile
     * This method is deprecated. Use {id}/{forView} instead
     * @param id Document Identifier (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Object> documentsGetExtractP7MWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetExtractP7MValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the file, contained in the signature, associated with the profile (asynchronously)
     * This method is deprecated. Use {id}/{forView} instead
     * @param id Document Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call documentsGetExtractP7MAsync(Integer id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetExtractP7MValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentsGetForExternalAttachment
     * @param id Identifier of attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsGetForExternalAttachmentCall(Integer id, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/profileAttachment/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetForExternalAttachmentValidateBeforeCall(Integer id, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsGetForExternalAttachment(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsGetForExternalAttachmentCall(id, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call retrieve a file for an external profile attachment
     * 
     * @param id Identifier of attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object documentsGetForExternalAttachment(Integer id, Boolean forView) throws ApiException {
        ApiResponse<Object> resp = documentsGetForExternalAttachmentWithHttpInfo(id, forView);
        return resp.getData();
    }

    /**
     * This call retrieve a file for an external profile attachment
     * 
     * @param id Identifier of attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> documentsGetForExternalAttachmentWithHttpInfo(Integer id, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetForExternalAttachmentValidateBeforeCall(id, forView, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call retrieve a file for an external profile attachment (asynchronously)
     * 
     * @param id Identifier of attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsGetForExternalAttachmentAsync(Integer id, Boolean forView, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetForExternalAttachmentValidateBeforeCall(id, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentsGetForProcessAttachement
     * @param attachementid Identifier of attachment (required)
     * @param processId Identifier of process (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsGetForProcessAttachementCall(Integer attachementid, Integer processId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/processattachments/{processId}/{attachementid}"
            .replaceAll("\\{" + "attachementid" + "\\}", apiClient.escapeString(attachementid.toString()))
            .replaceAll("\\{" + "processId" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetForProcessAttachementValidateBeforeCall(Integer attachementid, Integer processId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attachementid' is set
        if (attachementid == null) {
            throw new ApiException("Missing the required parameter 'attachementid' when calling documentsGetForProcessAttachement(Async)");
        }
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling documentsGetForProcessAttachement(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsGetForProcessAttachementCall(attachementid, processId, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the file associated with the attachment into in a process workflow
     * 
     * @param attachementid Identifier of attachment (required)
     * @param processId Identifier of process (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File documentsGetForProcessAttachement(Integer attachementid, Integer processId, Boolean forView) throws ApiException {
        ApiResponse<File> resp = documentsGetForProcessAttachementWithHttpInfo(attachementid, processId, forView);
        return resp.getData();
    }

    /**
     * This call returns the file associated with the attachment into in a process workflow
     * 
     * @param attachementid Identifier of attachment (required)
     * @param processId Identifier of process (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> documentsGetForProcessAttachementWithHttpInfo(Integer attachementid, Integer processId, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetForProcessAttachementValidateBeforeCall(attachementid, processId, forView, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the file associated with the attachment into in a process workflow (asynchronously)
     * 
     * @param attachementid Identifier of attachment (required)
     * @param processId Identifier of process (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsGetForProcessAttachementAsync(Integer attachementid, Integer processId, Boolean forView, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetForProcessAttachementValidateBeforeCall(attachementid, processId, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentsGetForProcessDocument
     * @param processdocid Identifier of document process (required)
     * @param processId Identifier of process workflow (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsGetForProcessDocumentCall(Integer processdocid, Integer processId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/processdocument/{processId}/{processdocid}"
            .replaceAll("\\{" + "processdocid" + "\\}", apiClient.escapeString(processdocid.toString()))
            .replaceAll("\\{" + "processId" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetForProcessDocumentValidateBeforeCall(Integer processdocid, Integer processId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processdocid' is set
        if (processdocid == null) {
            throw new ApiException("Missing the required parameter 'processdocid' when calling documentsGetForProcessDocument(Async)");
        }
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling documentsGetForProcessDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsGetForProcessDocumentCall(processdocid, processId, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the file associated with the document process into in a process workflow
     * 
     * @param processdocid Identifier of document process (required)
     * @param processId Identifier of process workflow (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File documentsGetForProcessDocument(Integer processdocid, Integer processId, Boolean forView) throws ApiException {
        ApiResponse<File> resp = documentsGetForProcessDocumentWithHttpInfo(processdocid, processId, forView);
        return resp.getData();
    }

    /**
     * This call returns the file associated with the document process into in a process workflow
     * 
     * @param processdocid Identifier of document process (required)
     * @param processId Identifier of process workflow (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> documentsGetForProcessDocumentWithHttpInfo(Integer processdocid, Integer processId, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetForProcessDocumentValidateBeforeCall(processdocid, processId, forView, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the file associated with the document process into in a process workflow (asynchronously)
     * 
     * @param processdocid Identifier of document process (required)
     * @param processId Identifier of process workflow (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsGetForProcessDocumentAsync(Integer processdocid, Integer processId, Boolean forView, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetForProcessDocumentValidateBeforeCall(processdocid, processId, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentsGetForProfile
     * @param id Document Identifier (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsGetForProfileCall(Integer id, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetForProfileValidateBeforeCall(Integer id, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsGetForProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsGetForProfileCall(id, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the file associated with a specified profile
     * 
     * @param id Document Identifier (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File documentsGetForProfile(Integer id, Boolean forView) throws ApiException {
        ApiResponse<File> resp = documentsGetForProfileWithHttpInfo(id, forView);
        return resp.getData();
    }

    /**
     * This call returns the file associated with a specified profile
     * 
     * @param id Document Identifier (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> documentsGetForProfileWithHttpInfo(Integer id, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetForProfileValidateBeforeCall(id, forView, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the file associated with a specified profile (asynchronously)
     * 
     * @param id Document Identifier (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsGetForProfileAsync(Integer id, Boolean forView, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetForProfileValidateBeforeCall(id, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentsGetForTask
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsGetForTaskCall(Integer processDocId, Integer taskWorkId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/ForTask/{processDocId}/{taskWorkId}"
            .replaceAll("\\{" + "processDocId" + "\\}", apiClient.escapeString(processDocId.toString()))
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetForTaskValidateBeforeCall(Integer processDocId, Integer taskWorkId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDocId' is set
        if (processDocId == null) {
            throw new ApiException("Missing the required parameter 'processDocId' when calling documentsGetForTask(Async)");
        }
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling documentsGetForTask(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsGetForTaskCall(processDocId, taskWorkId, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the file associated with a taskwork and a document in process
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File documentsGetForTask(Integer processDocId, Integer taskWorkId, Boolean forView) throws ApiException {
        ApiResponse<File> resp = documentsGetForTaskWithHttpInfo(processDocId, taskWorkId, forView);
        return resp.getData();
    }

    /**
     * This call returns the file associated with a taskwork and a document in process
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> documentsGetForTaskWithHttpInfo(Integer processDocId, Integer taskWorkId, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetForTaskValidateBeforeCall(processDocId, taskWorkId, forView, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the file associated with a taskwork and a document in process (asynchronously)
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsGetForTaskAsync(Integer processDocId, Integer taskWorkId, Boolean forView, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetForTaskValidateBeforeCall(processDocId, taskWorkId, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentsGetForTaskAttachement
     * @param id Identifier of task attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsGetForTaskAttachementCall(Integer id, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/taskattachments/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetForTaskAttachementValidateBeforeCall(Integer id, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsGetForTaskAttachement(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsGetForTaskAttachementCall(id, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the file associated with the task attachment
     * 
     * @param id Identifier of task attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File documentsGetForTaskAttachement(Integer id, Boolean forView) throws ApiException {
        ApiResponse<File> resp = documentsGetForTaskAttachementWithHttpInfo(id, forView);
        return resp.getData();
    }

    /**
     * This call returns the file associated with the task attachment
     * 
     * @param id Identifier of task attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> documentsGetForTaskAttachementWithHttpInfo(Integer id, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetForTaskAttachementValidateBeforeCall(id, forView, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the file associated with the task attachment (asynchronously)
     * 
     * @param id Identifier of task attachment (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsGetForTaskAttachementAsync(Integer id, Boolean forView, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetForTaskAttachementValidateBeforeCall(id, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentsGetForTaskHasDocument
     * @param processDocId Identifier of document process (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsGetForTaskHasDocumentCall(Integer processDocId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/ForTask/HasDocument/{processDocId}"
            .replaceAll("\\{" + "processDocId" + "\\}", apiClient.escapeString(processDocId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetForTaskHasDocumentValidateBeforeCall(Integer processDocId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDocId' is set
        if (processDocId == null) {
            throw new ApiException("Missing the required parameter 'processDocId' when calling documentsGetForTaskHasDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsGetForTaskHasDocumentCall(processDocId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns if the document process has a associated file
     * 
     * @param processDocId Identifier of document process (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean documentsGetForTaskHasDocument(Integer processDocId) throws ApiException {
        ApiResponse<Boolean> resp = documentsGetForTaskHasDocumentWithHttpInfo(processDocId);
        return resp.getData();
    }

    /**
     * This call returns if the document process has a associated file
     * 
     * @param processDocId Identifier of document process (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> documentsGetForTaskHasDocumentWithHttpInfo(Integer processDocId) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetForTaskHasDocumentValidateBeforeCall(processDocId, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns if the document process has a associated file (asynchronously)
     * 
     * @param processDocId Identifier of document process (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsGetForTaskHasDocumentAsync(Integer processDocId, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetForTaskHasDocumentValidateBeforeCall(processDocId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentsGetForTaskReadOnly
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsGetForTaskReadOnlyCall(Integer processDocId, Integer taskWorkId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/ForTaskReadOnly/{processDocId}/{taskWorkId}"
            .replaceAll("\\{" + "processDocId" + "\\}", apiClient.escapeString(processDocId.toString()))
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetForTaskReadOnlyValidateBeforeCall(Integer processDocId, Integer taskWorkId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDocId' is set
        if (processDocId == null) {
            throw new ApiException("Missing the required parameter 'processDocId' when calling documentsGetForTaskReadOnly(Async)");
        }
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling documentsGetForTaskReadOnly(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsGetForTaskReadOnlyCall(processDocId, taskWorkId, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the file associated with a taskwork and a document in process, for read-only management
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File documentsGetForTaskReadOnly(Integer processDocId, Integer taskWorkId, Boolean forView) throws ApiException {
        ApiResponse<File> resp = documentsGetForTaskReadOnlyWithHttpInfo(processDocId, taskWorkId, forView);
        return resp.getData();
    }

    /**
     * This call returns the file associated with a taskwork and a document in process, for read-only management
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> documentsGetForTaskReadOnlyWithHttpInfo(Integer processDocId, Integer taskWorkId, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetForTaskReadOnlyValidateBeforeCall(processDocId, taskWorkId, forView, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the file associated with a taskwork and a document in process, for read-only management (asynchronously)
     * 
     * @param processDocId Identifier of document process (required)
     * @param taskWorkId Identifier of taskwork (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsGetForTaskReadOnlyAsync(Integer processDocId, Integer taskWorkId, Boolean forView, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetForTaskReadOnlyValidateBeforeCall(processDocId, taskWorkId, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentsGetHasDocumentForProfile
     * @param id Document Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsGetHasDocumentForProfileCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/HasDocument/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetHasDocumentForProfileValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsGetHasDocumentForProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsGetHasDocumentForProfileCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns if the profile has a associated file
     * 
     * @param id Document Identifier (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean documentsGetHasDocumentForProfile(Integer id) throws ApiException {
        ApiResponse<Boolean> resp = documentsGetHasDocumentForProfileWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * This call returns if the profile has a associated file
     * 
     * @param id Document Identifier (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> documentsGetHasDocumentForProfileWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetHasDocumentForProfileValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns if the profile has a associated file (asynchronously)
     * 
     * @param id Document Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsGetHasDocumentForProfileAsync(Integer id, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetHasDocumentForProfileValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentsGetRevisionDocumentById
     * @param attachmentId Identifier of attachment (required)
     * @param revisionId Revision Number (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsGetRevisionDocumentByIdCall(Integer attachmentId, Integer revisionId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/profileAttachment/{attachmentId}/revisions/{revisionId}"
            .replaceAll("\\{" + "attachmentId" + "\\}", apiClient.escapeString(attachmentId.toString()))
            .replaceAll("\\{" + "revisionId" + "\\}", apiClient.escapeString(revisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (forView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("forView", forView));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetRevisionDocumentByIdValidateBeforeCall(Integer attachmentId, Integer revisionId, Boolean forView, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling documentsGetRevisionDocumentById(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling documentsGetRevisionDocumentById(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsGetRevisionDocumentByIdCall(attachmentId, revisionId, forView, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call retrieve the attachemnt file by its revision
     * 
     * @param attachmentId Identifier of attachment (required)
     * @param revisionId Revision Number (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object documentsGetRevisionDocumentById(Integer attachmentId, Integer revisionId, Boolean forView) throws ApiException {
        ApiResponse<Object> resp = documentsGetRevisionDocumentByIdWithHttpInfo(attachmentId, revisionId, forView);
        return resp.getData();
    }

    /**
     * This call retrieve the attachemnt file by its revision
     * 
     * @param attachmentId Identifier of attachment (required)
     * @param revisionId Revision Number (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> documentsGetRevisionDocumentByIdWithHttpInfo(Integer attachmentId, Integer revisionId, Boolean forView) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetRevisionDocumentByIdValidateBeforeCall(attachmentId, revisionId, forView, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call retrieve the attachemnt file by its revision (asynchronously)
     * 
     * @param attachmentId Identifier of attachment (required)
     * @param revisionId Revision Number (required)
     * @param forView Cryptographic envelope removed and stylesheet applied if available (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsGetRevisionDocumentByIdAsync(Integer attachmentId, Integer revisionId, Boolean forView, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetRevisionDocumentByIdValidateBeforeCall(attachmentId, revisionId, forView, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentsSetDocument
     * @param cacheId Identifier of cache (required)
     * @param docNumber Document Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentsSetDocumentCall(String cacheId, Integer docNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Documents/{docNumber}/{cacheId}"
            .replaceAll("\\{" + "cacheId" + "\\}", apiClient.escapeString(cacheId.toString()))
            .replaceAll("\\{" + "docNumber" + "\\}", apiClient.escapeString(docNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsSetDocumentValidateBeforeCall(String cacheId, Integer docNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cacheId' is set
        if (cacheId == null) {
            throw new ApiException("Missing the required parameter 'cacheId' when calling documentsSetDocument(Async)");
        }
        
        // verify the required parameter 'docNumber' is set
        if (docNumber == null) {
            throw new ApiException("Missing the required parameter 'docNumber' when calling documentsSetDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = documentsSetDocumentCall(cacheId, docNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call update a file associated to a profile
     * 
     * @param cacheId Identifier of cache (required)
     * @param docNumber Document Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void documentsSetDocument(String cacheId, Integer docNumber) throws ApiException {
        documentsSetDocumentWithHttpInfo(cacheId, docNumber);
    }

    /**
     * This call update a file associated to a profile
     * 
     * @param cacheId Identifier of cache (required)
     * @param docNumber Document Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> documentsSetDocumentWithHttpInfo(String cacheId, Integer docNumber) throws ApiException {
        com.squareup.okhttp.Call call = documentsSetDocumentValidateBeforeCall(cacheId, docNumber, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call update a file associated to a profile (asynchronously)
     * 
     * @param cacheId Identifier of cache (required)
     * @param docNumber Document Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsSetDocumentAsync(String cacheId, Integer docNumber, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsSetDocumentValidateBeforeCall(cacheId, docNumber, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
