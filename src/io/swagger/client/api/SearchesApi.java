/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.FieldBaseForSearchDTO;
import io.swagger.client.model.FieldFilterDTO;
import io.swagger.client.model.FieldFormulaCalculateCriteriaDto;
import io.swagger.client.model.FieldValuesDTO;
import io.swagger.client.model.FieldValuesSearchCriteriaDto;
import io.swagger.client.model.ProfileDTO;
import io.swagger.client.model.RowSearchResult;
import io.swagger.client.model.SearchCriteriaDto;
import io.swagger.client.model.SearchDTO;
import io.swagger.client.model.SelectDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchesApi {
    private ApiClient apiClient;

    public SearchesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for searchesDelete
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesDeleteCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Searches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesDeleteValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchesDeleteCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call delete the default search for the user
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void searchesDelete() throws ApiException {
        searchesDeleteWithHttpInfo();
    }

    /**
     * This call delete the default search for the user
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> searchesDeleteWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = searchesDeleteValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * This call delete the default search for the user (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesDeleteAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesDeleteValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for searchesGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call searchesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Searches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchesGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a default search according to the Arxivar system settings
     * This method is deprecated. Use /api/v2/Searches
     * @return SearchDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SearchDTO searchesGet() throws ApiException {
        ApiResponse<SearchDTO> resp = searchesGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns a default search according to the Arxivar system settings
     * This method is deprecated. Use /api/v2/Searches
     * @return ApiResponse&lt;SearchDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SearchDTO> searchesGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = searchesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SearchDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a default search according to the Arxivar system settings (asynchronously)
     * This method is deprecated. Use /api/v2/Searches
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call searchesGetAsync(final ApiCallback<SearchDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesGetAdditionalByClasse
     * @param tipoUno Document type identifier of first level (required)
     * @param tipoDue Document type identifier of second level (required)
     * @param tipoTre Document type identifier of third level (required)
     * @param aoo Business unit code (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesGetAdditionalByClasseCall(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Searches/Additional/{tipoUno}/{tipoDue}/{tipoTre}"
            .replaceAll("\\{" + "tipoUno" + "\\}", apiClient.escapeString(tipoUno.toString()))
            .replaceAll("\\{" + "tipoDue" + "\\}", apiClient.escapeString(tipoDue.toString()))
            .replaceAll("\\{" + "tipoTre" + "\\}", apiClient.escapeString(tipoTre.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aoo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aoo", aoo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesGetAdditionalByClasseValidateBeforeCall(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tipoUno' is set
        if (tipoUno == null) {
            throw new ApiException("Missing the required parameter 'tipoUno' when calling searchesGetAdditionalByClasse(Async)");
        }
        
        // verify the required parameter 'tipoDue' is set
        if (tipoDue == null) {
            throw new ApiException("Missing the required parameter 'tipoDue' when calling searchesGetAdditionalByClasse(Async)");
        }
        
        // verify the required parameter 'tipoTre' is set
        if (tipoTre == null) {
            throw new ApiException("Missing the required parameter 'tipoTre' when calling searchesGetAdditionalByClasse(Async)");
        }
        

        com.squareup.okhttp.Call call = searchesGetAdditionalByClasseCall(tipoUno, tipoDue, tipoTre, aoo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the additional fields for search by the given document class and business unit
     * 
     * @param tipoUno Document type identifier of first level (required)
     * @param tipoDue Document type identifier of second level (required)
     * @param tipoTre Document type identifier of third level (required)
     * @param aoo Business unit code (optional)
     * @return List&lt;FieldBaseForSearchDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FieldBaseForSearchDTO> searchesGetAdditionalByClasse(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo) throws ApiException {
        ApiResponse<List<FieldBaseForSearchDTO>> resp = searchesGetAdditionalByClasseWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
        return resp.getData();
    }

    /**
     * This call returns the additional fields for search by the given document class and business unit
     * 
     * @param tipoUno Document type identifier of first level (required)
     * @param tipoDue Document type identifier of second level (required)
     * @param tipoTre Document type identifier of third level (required)
     * @param aoo Business unit code (optional)
     * @return ApiResponse&lt;List&lt;FieldBaseForSearchDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FieldBaseForSearchDTO>> searchesGetAdditionalByClasseWithHttpInfo(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo) throws ApiException {
        com.squareup.okhttp.Call call = searchesGetAdditionalByClasseValidateBeforeCall(tipoUno, tipoDue, tipoTre, aoo, null, null);
        Type localVarReturnType = new TypeToken<List<FieldBaseForSearchDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the additional fields for search by the given document class and business unit (asynchronously)
     * 
     * @param tipoUno Document type identifier of first level (required)
     * @param tipoDue Document type identifier of second level (required)
     * @param tipoTre Document type identifier of third level (required)
     * @param aoo Business unit code (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesGetAdditionalByClasseAsync(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo, final ApiCallback<List<FieldBaseForSearchDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesGetAdditionalByClasseValidateBeforeCall(tipoUno, tipoDue, tipoTre, aoo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldBaseForSearchDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesGetAdditionalByClasseOld
     * @param tipoUno Document type identifier of first level (required)
     * @param tipoDue Document type identifier of second level (required)
     * @param tipoTre Document type identifier of third level (required)
     * @param aoo Business unit code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call searchesGetAdditionalByClasseOldCall(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Searches/Additional/{tipoUno}/{tipoDue}/{tipoTre}/{aoo}"
            .replaceAll("\\{" + "tipoUno" + "\\}", apiClient.escapeString(tipoUno.toString()))
            .replaceAll("\\{" + "tipoDue" + "\\}", apiClient.escapeString(tipoDue.toString()))
            .replaceAll("\\{" + "tipoTre" + "\\}", apiClient.escapeString(tipoTre.toString()))
            .replaceAll("\\{" + "aoo" + "\\}", apiClient.escapeString(aoo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesGetAdditionalByClasseOldValidateBeforeCall(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tipoUno' is set
        if (tipoUno == null) {
            throw new ApiException("Missing the required parameter 'tipoUno' when calling searchesGetAdditionalByClasseOld(Async)");
        }
        
        // verify the required parameter 'tipoDue' is set
        if (tipoDue == null) {
            throw new ApiException("Missing the required parameter 'tipoDue' when calling searchesGetAdditionalByClasseOld(Async)");
        }
        
        // verify the required parameter 'tipoTre' is set
        if (tipoTre == null) {
            throw new ApiException("Missing the required parameter 'tipoTre' when calling searchesGetAdditionalByClasseOld(Async)");
        }
        
        // verify the required parameter 'aoo' is set
        if (aoo == null) {
            throw new ApiException("Missing the required parameter 'aoo' when calling searchesGetAdditionalByClasseOld(Async)");
        }
        

        com.squareup.okhttp.Call call = searchesGetAdditionalByClasseOldCall(tipoUno, tipoDue, tipoTre, aoo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the additional fields for search by the given document class and business unit
     * This method is deprecated. Use /api/Searches/additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
     * @param tipoUno Document type identifier of first level (required)
     * @param tipoDue Document type identifier of second level (required)
     * @param tipoTre Document type identifier of third level (required)
     * @param aoo Business unit code (required)
     * @return List&lt;FieldBaseForSearchDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public List<FieldBaseForSearchDTO> searchesGetAdditionalByClasseOld(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo) throws ApiException {
        ApiResponse<List<FieldBaseForSearchDTO>> resp = searchesGetAdditionalByClasseOldWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
        return resp.getData();
    }

    /**
     * This call returns the additional fields for search by the given document class and business unit
     * This method is deprecated. Use /api/Searches/additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
     * @param tipoUno Document type identifier of first level (required)
     * @param tipoDue Document type identifier of second level (required)
     * @param tipoTre Document type identifier of third level (required)
     * @param aoo Business unit code (required)
     * @return ApiResponse&lt;List&lt;FieldBaseForSearchDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<FieldBaseForSearchDTO>> searchesGetAdditionalByClasseOldWithHttpInfo(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo) throws ApiException {
        com.squareup.okhttp.Call call = searchesGetAdditionalByClasseOldValidateBeforeCall(tipoUno, tipoDue, tipoTre, aoo, null, null);
        Type localVarReturnType = new TypeToken<List<FieldBaseForSearchDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the additional fields for search by the given document class and business unit (asynchronously)
     * This method is deprecated. Use /api/Searches/additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
     * @param tipoUno Document type identifier of first level (required)
     * @param tipoDue Document type identifier of second level (required)
     * @param tipoTre Document type identifier of third level (required)
     * @param aoo Business unit code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call searchesGetAdditionalByClasseOldAsync(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo, final ApiCallback<List<FieldBaseForSearchDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesGetAdditionalByClasseOldValidateBeforeCall(tipoUno, tipoDue, tipoTre, aoo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldBaseForSearchDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesGetFiltersForSearch
     * @param fieldcriteria  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesGetFiltersForSearchCall(FieldValuesSearchCriteriaDto fieldcriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fieldcriteria;

        // create path and map variables
        String localVarPath = "/api/Searches/Filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesGetFiltersForSearchValidateBeforeCall(FieldValuesSearchCriteriaDto fieldcriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchesGetFiltersForSearchCall(fieldcriteria, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the list of filter avaible for a specific additional field
     * 
     * @param fieldcriteria  (optional)
     * @return FieldFilterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldFilterDTO searchesGetFiltersForSearch(FieldValuesSearchCriteriaDto fieldcriteria) throws ApiException {
        ApiResponse<FieldFilterDTO> resp = searchesGetFiltersForSearchWithHttpInfo(fieldcriteria);
        return resp.getData();
    }

    /**
     * This call returns the list of filter avaible for a specific additional field
     * 
     * @param fieldcriteria  (optional)
     * @return ApiResponse&lt;FieldFilterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldFilterDTO> searchesGetFiltersForSearchWithHttpInfo(FieldValuesSearchCriteriaDto fieldcriteria) throws ApiException {
        com.squareup.okhttp.Call call = searchesGetFiltersForSearchValidateBeforeCall(fieldcriteria, null, null);
        Type localVarReturnType = new TypeToken<FieldFilterDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the list of filter avaible for a specific additional field (asynchronously)
     * 
     * @param fieldcriteria  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesGetFiltersForSearchAsync(FieldValuesSearchCriteriaDto fieldcriteria, final ApiCallback<FieldFilterDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesGetFiltersForSearchValidateBeforeCall(fieldcriteria, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldFilterDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesGetFormulaForSearch
     * @param fieldcriteria  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesGetFormulaForSearchCall(FieldFormulaCalculateCriteriaDto fieldcriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fieldcriteria;

        // create path and map variables
        String localVarPath = "/api/Searches/Formula";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesGetFormulaForSearchValidateBeforeCall(FieldFormulaCalculateCriteriaDto fieldcriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchesGetFormulaForSearchCall(fieldcriteria, progressListener, progressRequestListener);
        return call;

    }

    /**
     * this method return the result of a formula given the array of fields of profile and their value
     * 
     * @param fieldcriteria  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String searchesGetFormulaForSearch(FieldFormulaCalculateCriteriaDto fieldcriteria) throws ApiException {
        ApiResponse<String> resp = searchesGetFormulaForSearchWithHttpInfo(fieldcriteria);
        return resp.getData();
    }

    /**
     * this method return the result of a formula given the array of fields of profile and their value
     * 
     * @param fieldcriteria  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> searchesGetFormulaForSearchWithHttpInfo(FieldFormulaCalculateCriteriaDto fieldcriteria) throws ApiException {
        com.squareup.okhttp.Call call = searchesGetFormulaForSearchValidateBeforeCall(fieldcriteria, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * this method return the result of a formula given the array of fields of profile and their value (asynchronously)
     * 
     * @param fieldcriteria  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesGetFormulaForSearchAsync(FieldFormulaCalculateCriteriaDto fieldcriteria, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesGetFormulaForSearchValidateBeforeCall(fieldcriteria, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesGetLastSearch
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call searchesGetLastSearchCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Searches/lastsearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesGetLastSearchValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchesGetLastSearchCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a default search according to the Arxivar system settings
     * This method is deprecated. Use /api/v2/Searches/lastsearch
     * @return SearchDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SearchDTO searchesGetLastSearch() throws ApiException {
        ApiResponse<SearchDTO> resp = searchesGetLastSearchWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns a default search according to the Arxivar system settings
     * This method is deprecated. Use /api/v2/Searches/lastsearch
     * @return ApiResponse&lt;SearchDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SearchDTO> searchesGetLastSearchWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = searchesGetLastSearchValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SearchDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a default search according to the Arxivar system settings (asynchronously)
     * This method is deprecated. Use /api/v2/Searches/lastsearch
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call searchesGetLastSearchAsync(final ApiCallback<SearchDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesGetLastSearchValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesGetSearchForClasseBox
     * @param additionalFieldName Additional field name (required)
     * @param profile  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesGetSearchForClasseBoxCall(String additionalFieldName, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/api/Searches/byclassadditionalfield/{additionalFieldName}/Search"
            .replaceAll("\\{" + "additionalFieldName" + "\\}", apiClient.escapeString(additionalFieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesGetSearchForClasseBoxValidateBeforeCall(String additionalFieldName, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'additionalFieldName' is set
        if (additionalFieldName == null) {
            throw new ApiException("Missing the required parameter 'additionalFieldName' when calling searchesGetSearchForClasseBox(Async)");
        }
        

        com.squareup.okhttp.Call call = searchesGetSearchForClasseBoxCall(additionalFieldName, profile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a complete search object for search a profile for a additional field
     * 
     * @param additionalFieldName Additional field name (required)
     * @param profile  (optional)
     * @return SearchDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchDTO searchesGetSearchForClasseBox(String additionalFieldName, ProfileDTO profile) throws ApiException {
        ApiResponse<SearchDTO> resp = searchesGetSearchForClasseBoxWithHttpInfo(additionalFieldName, profile);
        return resp.getData();
    }

    /**
     * This call returns a complete search object for search a profile for a additional field
     * 
     * @param additionalFieldName Additional field name (required)
     * @param profile  (optional)
     * @return ApiResponse&lt;SearchDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchDTO> searchesGetSearchForClasseBoxWithHttpInfo(String additionalFieldName, ProfileDTO profile) throws ApiException {
        com.squareup.okhttp.Call call = searchesGetSearchForClasseBoxValidateBeforeCall(additionalFieldName, profile, null, null);
        Type localVarReturnType = new TypeToken<SearchDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a complete search object for search a profile for a additional field (asynchronously)
     * 
     * @param additionalFieldName Additional field name (required)
     * @param profile  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesGetSearchForClasseBoxAsync(String additionalFieldName, ProfileDTO profile, final ApiCallback<SearchDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesGetSearchForClasseBoxValidateBeforeCall(additionalFieldName, profile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesGetSelect
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesGetSelectCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Searches/Select";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesGetSelectValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchesGetSelectCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a default select according to the Arxivar system settings
     * 
     * @return SelectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SelectDTO searchesGetSelect() throws ApiException {
        ApiResponse<SelectDTO> resp = searchesGetSelectWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns a default select according to the Arxivar system settings
     * 
     * @return ApiResponse&lt;SelectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SelectDTO> searchesGetSelectWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = searchesGetSelectValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SelectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a default select according to the Arxivar system settings (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesGetSelectAsync(final ApiCallback<SelectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesGetSelectValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SelectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesGetSelect_0
     * @param documentType Document Type Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesGetSelect_0Call(Integer documentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Searches/Select/{documentType}"
            .replaceAll("\\{" + "documentType" + "\\}", apiClient.escapeString(documentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesGetSelect_0ValidateBeforeCall(Integer documentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling searchesGetSelect_0(Async)");
        }
        

        com.squareup.okhttp.Call call = searchesGetSelect_0Call(documentType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a new select dto by document type
     * 
     * @param documentType Document Type Identifier (required)
     * @return SelectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SelectDTO searchesGetSelect_0(Integer documentType) throws ApiException {
        ApiResponse<SelectDTO> resp = searchesGetSelect_0WithHttpInfo(documentType);
        return resp.getData();
    }

    /**
     * This call returns a new select dto by document type
     * 
     * @param documentType Document Type Identifier (required)
     * @return ApiResponse&lt;SelectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SelectDTO> searchesGetSelect_0WithHttpInfo(Integer documentType) throws ApiException {
        com.squareup.okhttp.Call call = searchesGetSelect_0ValidateBeforeCall(documentType, null, null);
        Type localVarReturnType = new TypeToken<SelectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a new select dto by document type (asynchronously)
     * 
     * @param documentType Document Type Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesGetSelect_0Async(Integer documentType, final ApiCallback<SelectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesGetSelect_0ValidateBeforeCall(documentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SelectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesGetSelect_1
     * @param documentType Document type identifier of first level (required)
     * @param tipo2 Document type identifier of second level (required)
     * @param tipo3 Document type identifier of third level (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesGetSelect_1Call(Integer documentType, Integer tipo2, Integer tipo3, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Searches/Select/{documentType}/{tipo2}/{tipo3}"
            .replaceAll("\\{" + "documentType" + "\\}", apiClient.escapeString(documentType.toString()))
            .replaceAll("\\{" + "tipo2" + "\\}", apiClient.escapeString(tipo2.toString()))
            .replaceAll("\\{" + "tipo3" + "\\}", apiClient.escapeString(tipo3.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesGetSelect_1ValidateBeforeCall(Integer documentType, Integer tipo2, Integer tipo3, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling searchesGetSelect_1(Async)");
        }
        
        // verify the required parameter 'tipo2' is set
        if (tipo2 == null) {
            throw new ApiException("Missing the required parameter 'tipo2' when calling searchesGetSelect_1(Async)");
        }
        
        // verify the required parameter 'tipo3' is set
        if (tipo3 == null) {
            throw new ApiException("Missing the required parameter 'tipo3' when calling searchesGetSelect_1(Async)");
        }
        

        com.squareup.okhttp.Call call = searchesGetSelect_1Call(documentType, tipo2, tipo3, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a new select dto by document type levels
     * 
     * @param documentType Document type identifier of first level (required)
     * @param tipo2 Document type identifier of second level (required)
     * @param tipo3 Document type identifier of third level (required)
     * @return SelectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SelectDTO searchesGetSelect_1(Integer documentType, Integer tipo2, Integer tipo3) throws ApiException {
        ApiResponse<SelectDTO> resp = searchesGetSelect_1WithHttpInfo(documentType, tipo2, tipo3);
        return resp.getData();
    }

    /**
     * This call returns a new select dto by document type levels
     * 
     * @param documentType Document type identifier of first level (required)
     * @param tipo2 Document type identifier of second level (required)
     * @param tipo3 Document type identifier of third level (required)
     * @return ApiResponse&lt;SelectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SelectDTO> searchesGetSelect_1WithHttpInfo(Integer documentType, Integer tipo2, Integer tipo3) throws ApiException {
        com.squareup.okhttp.Call call = searchesGetSelect_1ValidateBeforeCall(documentType, tipo2, tipo3, null, null);
        Type localVarReturnType = new TypeToken<SelectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a new select dto by document type levels (asynchronously)
     * 
     * @param documentType Document type identifier of first level (required)
     * @param tipo2 Document type identifier of second level (required)
     * @param tipo3 Document type identifier of third level (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesGetSelect_1Async(Integer documentType, Integer tipo2, Integer tipo3, final ApiCallback<SelectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesGetSelect_1ValidateBeforeCall(documentType, tipo2, tipo3, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SelectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesGetValuesForSearch
     * @param fieldcriteria  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesGetValuesForSearchCall(FieldValuesSearchCriteriaDto fieldcriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fieldcriteria;

        // create path and map variables
        String localVarPath = "/api/Searches/Values";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesGetValuesForSearchValidateBeforeCall(FieldValuesSearchCriteriaDto fieldcriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchesGetValuesForSearchCall(fieldcriteria, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
     * 
     * @param fieldcriteria  (optional)
     * @return FieldValuesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldValuesDTO searchesGetValuesForSearch(FieldValuesSearchCriteriaDto fieldcriteria) throws ApiException {
        ApiResponse<FieldValuesDTO> resp = searchesGetValuesForSearchWithHttpInfo(fieldcriteria);
        return resp.getData();
    }

    /**
     * This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
     * 
     * @param fieldcriteria  (optional)
     * @return ApiResponse&lt;FieldValuesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldValuesDTO> searchesGetValuesForSearchWithHttpInfo(FieldValuesSearchCriteriaDto fieldcriteria) throws ApiException {
        com.squareup.okhttp.Call call = searchesGetValuesForSearchValidateBeforeCall(fieldcriteria, null, null);
        Type localVarReturnType = new TypeToken<FieldValuesDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This method returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile (asynchronously)
     * 
     * @param fieldcriteria  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesGetValuesForSearchAsync(FieldValuesSearchCriteriaDto fieldcriteria, final ApiCallback<FieldValuesDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesGetValuesForSearchValidateBeforeCall(fieldcriteria, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldValuesDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesLastDocuments
     * @param maxRows Maximun items to search (required)
     * @param selectDto Object representing the select (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesLastDocumentsCall(Integer maxRows, SelectDTO selectDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = selectDto;

        // create path and map variables
        String localVarPath = "/api/Searches/lastdocuments/{maxRows}"
            .replaceAll("\\{" + "maxRows" + "\\}", apiClient.escapeString(maxRows.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesLastDocumentsValidateBeforeCall(Integer maxRows, SelectDTO selectDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'maxRows' is set
        if (maxRows == null) {
            throw new ApiException("Missing the required parameter 'maxRows' when calling searchesLastDocuments(Async)");
        }
        
        // verify the required parameter 'selectDto' is set
        if (selectDto == null) {
            throw new ApiException("Missing the required parameter 'selectDto' when calling searchesLastDocuments(Async)");
        }
        

        com.squareup.okhttp.Call call = searchesLastDocumentsCall(maxRows, selectDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call searches documents
     * 
     * @param maxRows Maximun items to search (required)
     * @param selectDto Object representing the select (required)
     * @return List&lt;RowSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RowSearchResult> searchesLastDocuments(Integer maxRows, SelectDTO selectDto) throws ApiException {
        ApiResponse<List<RowSearchResult>> resp = searchesLastDocumentsWithHttpInfo(maxRows, selectDto);
        return resp.getData();
    }

    /**
     * This call searches documents
     * 
     * @param maxRows Maximun items to search (required)
     * @param selectDto Object representing the select (required)
     * @return ApiResponse&lt;List&lt;RowSearchResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RowSearchResult>> searchesLastDocumentsWithHttpInfo(Integer maxRows, SelectDTO selectDto) throws ApiException {
        com.squareup.okhttp.Call call = searchesLastDocumentsValidateBeforeCall(maxRows, selectDto, null, null);
        Type localVarReturnType = new TypeToken<List<RowSearchResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call searches documents (asynchronously)
     * 
     * @param maxRows Maximun items to search (required)
     * @param selectDto Object representing the select (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesLastDocumentsAsync(Integer maxRows, SelectDTO selectDto, final ApiCallback<List<RowSearchResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesLastDocumentsValidateBeforeCall(maxRows, selectDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RowSearchResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesPostSearch
     * @param searchwebapidto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesPostSearchCall(SearchCriteriaDto searchwebapidto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = searchwebapidto;

        // create path and map variables
        String localVarPath = "/api/Searches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesPostSearchValidateBeforeCall(SearchCriteriaDto searchwebapidto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchesPostSearchCall(searchwebapidto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call searches documents
     * 
     * @param searchwebapidto  (optional)
     * @return List&lt;RowSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RowSearchResult> searchesPostSearch(SearchCriteriaDto searchwebapidto) throws ApiException {
        ApiResponse<List<RowSearchResult>> resp = searchesPostSearchWithHttpInfo(searchwebapidto);
        return resp.getData();
    }

    /**
     * This call searches documents
     * 
     * @param searchwebapidto  (optional)
     * @return ApiResponse&lt;List&lt;RowSearchResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RowSearchResult>> searchesPostSearchWithHttpInfo(SearchCriteriaDto searchwebapidto) throws ApiException {
        com.squareup.okhttp.Call call = searchesPostSearchValidateBeforeCall(searchwebapidto, null, null);
        Type localVarReturnType = new TypeToken<List<RowSearchResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call searches documents (asynchronously)
     * 
     * @param searchwebapidto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesPostSearchAsync(SearchCriteriaDto searchwebapidto, final ApiCallback<List<RowSearchResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesPostSearchValidateBeforeCall(searchwebapidto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RowSearchResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchesPostSelect
     * @param selectDto Object representing the select (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesPostSelectCall(SelectDTO selectDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = selectDto;

        // create path and map variables
        String localVarPath = "/api/Searches/Select";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesPostSelectValidateBeforeCall(SelectDTO selectDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'selectDto' is set
        if (selectDto == null) {
            throw new ApiException("Missing the required parameter 'selectDto' when calling searchesPostSelect(Async)");
        }
        

        com.squareup.okhttp.Call call = searchesPostSelectCall(selectDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call saves the default select for the user
     * 
     * @param selectDto Object representing the select (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void searchesPostSelect(SelectDTO selectDto) throws ApiException {
        searchesPostSelectWithHttpInfo(selectDto);
    }

    /**
     * This call saves the default select for the user
     * 
     * @param selectDto Object representing the select (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> searchesPostSelectWithHttpInfo(SelectDTO selectDto) throws ApiException {
        com.squareup.okhttp.Call call = searchesPostSelectValidateBeforeCall(selectDto, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call saves the default select for the user (asynchronously)
     * 
     * @param selectDto Object representing the select (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesPostSelectAsync(SelectDTO selectDto, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesPostSelectValidateBeforeCall(selectDto, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for searchesResetSelect
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchesResetSelectCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Searches/Reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesResetSelectValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchesResetSelectCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a possible custom select for the user
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void searchesResetSelect() throws ApiException {
        searchesResetSelectWithHttpInfo();
    }

    /**
     * This call deletes a possible custom select for the user
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> searchesResetSelectWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = searchesResetSelectValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes a possible custom select for the user (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchesResetSelectAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesResetSelectValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for searchesSetDefaultSearch
     * @param searchwebapidto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call searchesSetDefaultSearchCall(SearchCriteriaDto searchwebapidto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = searchwebapidto;

        // create path and map variables
        String localVarPath = "/api/Searches/defaultsearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesSetDefaultSearchValidateBeforeCall(SearchCriteriaDto searchwebapidto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchesSetDefaultSearchCall(searchwebapidto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call saves the default search for the user
     * This method is deprecated. Use /api/v2/Searches/defaultsearch
     * @param searchwebapidto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void searchesSetDefaultSearch(SearchCriteriaDto searchwebapidto) throws ApiException {
        searchesSetDefaultSearchWithHttpInfo(searchwebapidto);
    }

    /**
     * This call saves the default search for the user
     * This method is deprecated. Use /api/v2/Searches/defaultsearch
     * @param searchwebapidto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> searchesSetDefaultSearchWithHttpInfo(SearchCriteriaDto searchwebapidto) throws ApiException {
        com.squareup.okhttp.Call call = searchesSetDefaultSearchValidateBeforeCall(searchwebapidto, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call saves the default search for the user (asynchronously)
     * This method is deprecated. Use /api/v2/Searches/defaultsearch
     * @param searchwebapidto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call searchesSetDefaultSearchAsync(SearchCriteriaDto searchwebapidto, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesSetDefaultSearchValidateBeforeCall(searchwebapidto, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for searchesSetLastSearch
     * @param searchwebapidto  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call searchesSetLastSearchCall(SearchCriteriaDto searchwebapidto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = searchwebapidto;

        // create path and map variables
        String localVarPath = "/api/Searches/lastsearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchesSetLastSearchValidateBeforeCall(SearchCriteriaDto searchwebapidto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchesSetLastSearchCall(searchwebapidto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call saves the last search for the user
     * This method is deprecated. Use /api/v2/Searches/lastsearch
     * @param searchwebapidto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void searchesSetLastSearch(SearchCriteriaDto searchwebapidto) throws ApiException {
        searchesSetLastSearchWithHttpInfo(searchwebapidto);
    }

    /**
     * This call saves the last search for the user
     * This method is deprecated. Use /api/v2/Searches/lastsearch
     * @param searchwebapidto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> searchesSetLastSearchWithHttpInfo(SearchCriteriaDto searchwebapidto) throws ApiException {
        com.squareup.okhttp.Call call = searchesSetLastSearchValidateBeforeCall(searchwebapidto, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call saves the last search for the user (asynchronously)
     * This method is deprecated. Use /api/v2/Searches/lastsearch
     * @param searchwebapidto  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call searchesSetLastSearchAsync(SearchCriteriaDto searchwebapidto, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchesSetLastSearchValidateBeforeCall(searchwebapidto, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
