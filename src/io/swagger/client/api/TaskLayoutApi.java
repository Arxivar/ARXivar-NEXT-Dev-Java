/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.TaskLayoutDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskLayoutApi {
    private ApiClient apiClient;

    public TaskLayoutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskLayoutApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for taskLayoutDeleteTaskLayout
     * @param tasklayoutid Task layout identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskLayoutDeleteTaskLayoutCall(Integer tasklayoutid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskLayout/{tasklayoutid}"
            .replaceAll("\\{" + "tasklayoutid" + "\\}", apiClient.escapeString(tasklayoutid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskLayoutDeleteTaskLayoutValidateBeforeCall(Integer tasklayoutid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tasklayoutid' is set
        if (tasklayoutid == null) {
            throw new ApiException("Missing the required parameter 'tasklayoutid' when calling taskLayoutDeleteTaskLayout(Async)");
        }
        

        com.squareup.okhttp.Call call = taskLayoutDeleteTaskLayoutCall(tasklayoutid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a task layout by the id
     * 
     * @param tasklayoutid Task layout identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskLayoutDeleteTaskLayout(Integer tasklayoutid) throws ApiException {
        taskLayoutDeleteTaskLayoutWithHttpInfo(tasklayoutid);
    }

    /**
     * This call deletes a task layout by the id
     * 
     * @param tasklayoutid Task layout identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskLayoutDeleteTaskLayoutWithHttpInfo(Integer tasklayoutid) throws ApiException {
        com.squareup.okhttp.Call call = taskLayoutDeleteTaskLayoutValidateBeforeCall(tasklayoutid, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes a task layout by the id (asynchronously)
     * 
     * @param tasklayoutid Task layout identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskLayoutDeleteTaskLayoutAsync(Integer tasklayoutid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskLayoutDeleteTaskLayoutValidateBeforeCall(tasklayoutid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskLayoutGetTaskLayoutById
     * @param tasklayoutid Task Layout Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskLayoutGetTaskLayoutByIdCall(Integer tasklayoutid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskLayout/{tasklayoutid}"
            .replaceAll("\\{" + "tasklayoutid" + "\\}", apiClient.escapeString(tasklayoutid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskLayoutGetTaskLayoutByIdValidateBeforeCall(Integer tasklayoutid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tasklayoutid' is set
        if (tasklayoutid == null) {
            throw new ApiException("Missing the required parameter 'tasklayoutid' when calling taskLayoutGetTaskLayoutById(Async)");
        }
        

        com.squareup.okhttp.Call call = taskLayoutGetTaskLayoutByIdCall(tasklayoutid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the task layout by the task layout id
     * 
     * @param tasklayoutid Task Layout Identifier (required)
     * @return TaskLayoutDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskLayoutDTO taskLayoutGetTaskLayoutById(Integer tasklayoutid) throws ApiException {
        ApiResponse<TaskLayoutDTO> resp = taskLayoutGetTaskLayoutByIdWithHttpInfo(tasklayoutid);
        return resp.getData();
    }

    /**
     * This call returns the task layout by the task layout id
     * 
     * @param tasklayoutid Task Layout Identifier (required)
     * @return ApiResponse&lt;TaskLayoutDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskLayoutDTO> taskLayoutGetTaskLayoutByIdWithHttpInfo(Integer tasklayoutid) throws ApiException {
        com.squareup.okhttp.Call call = taskLayoutGetTaskLayoutByIdValidateBeforeCall(tasklayoutid, null, null);
        Type localVarReturnType = new TypeToken<TaskLayoutDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the task layout by the task layout id (asynchronously)
     * 
     * @param tasklayoutid Task Layout Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskLayoutGetTaskLayoutByIdAsync(Integer tasklayoutid, final ApiCallback<TaskLayoutDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskLayoutGetTaskLayoutByIdValidateBeforeCall(tasklayoutid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskLayoutDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskLayoutGetTaskLayoutByTaskWorkId
     * @param taskWorkId Taskwork Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskLayoutGetTaskLayoutByTaskWorkIdCall(Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskLayout/taskwork/{taskWorkId}"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskLayoutGetTaskLayoutByTaskWorkIdValidateBeforeCall(Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskLayoutGetTaskLayoutByTaskWorkId(Async)");
        }
        

        com.squareup.okhttp.Call call = taskLayoutGetTaskLayoutByTaskWorkIdCall(taskWorkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the task layout by the taskwork
     * 
     * @param taskWorkId Taskwork Identifier (required)
     * @return TaskLayoutDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskLayoutDTO taskLayoutGetTaskLayoutByTaskWorkId(Integer taskWorkId) throws ApiException {
        ApiResponse<TaskLayoutDTO> resp = taskLayoutGetTaskLayoutByTaskWorkIdWithHttpInfo(taskWorkId);
        return resp.getData();
    }

    /**
     * This call returns the task layout by the taskwork
     * 
     * @param taskWorkId Taskwork Identifier (required)
     * @return ApiResponse&lt;TaskLayoutDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskLayoutDTO> taskLayoutGetTaskLayoutByTaskWorkIdWithHttpInfo(Integer taskWorkId) throws ApiException {
        com.squareup.okhttp.Call call = taskLayoutGetTaskLayoutByTaskWorkIdValidateBeforeCall(taskWorkId, null, null);
        Type localVarReturnType = new TypeToken<TaskLayoutDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the task layout by the taskwork (asynchronously)
     * 
     * @param taskWorkId Taskwork Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskLayoutGetTaskLayoutByTaskWorkIdAsync(Integer taskWorkId, final ApiCallback<TaskLayoutDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskLayoutGetTaskLayoutByTaskWorkIdValidateBeforeCall(taskWorkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskLayoutDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskLayoutGetTaskLayoutForUser
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskLayoutGetTaskLayoutForUserCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskLayout/foruser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskLayoutGetTaskLayoutForUserValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = taskLayoutGetTaskLayoutForUserCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the task layout for user default if exist
     * 
     * @return TaskLayoutDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskLayoutDTO taskLayoutGetTaskLayoutForUser() throws ApiException {
        ApiResponse<TaskLayoutDTO> resp = taskLayoutGetTaskLayoutForUserWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns the task layout for user default if exist
     * 
     * @return ApiResponse&lt;TaskLayoutDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskLayoutDTO> taskLayoutGetTaskLayoutForUserWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = taskLayoutGetTaskLayoutForUserValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TaskLayoutDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the task layout for user default if exist (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskLayoutGetTaskLayoutForUserAsync(final ApiCallback<TaskLayoutDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskLayoutGetTaskLayoutForUserValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskLayoutDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskLayoutGetTaskLayouts
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskLayoutGetTaskLayoutsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskLayout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskLayoutGetTaskLayoutsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = taskLayoutGetTaskLayoutsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all task layouts configured
     * 
     * @return List&lt;TaskLayoutDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TaskLayoutDTO> taskLayoutGetTaskLayouts() throws ApiException {
        ApiResponse<List<TaskLayoutDTO>> resp = taskLayoutGetTaskLayoutsWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns all task layouts configured
     * 
     * @return ApiResponse&lt;List&lt;TaskLayoutDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TaskLayoutDTO>> taskLayoutGetTaskLayoutsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = taskLayoutGetTaskLayoutsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<TaskLayoutDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all task layouts configured (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskLayoutGetTaskLayoutsAsync(final ApiCallback<List<TaskLayoutDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskLayoutGetTaskLayoutsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TaskLayoutDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskLayoutNewTaskLayout
     * @param taskLayout Task layout information to insert (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskLayoutNewTaskLayoutCall(TaskLayoutDTO taskLayout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskLayout;

        // create path and map variables
        String localVarPath = "/api/TaskLayout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskLayoutNewTaskLayoutValidateBeforeCall(TaskLayoutDTO taskLayout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskLayout' is set
        if (taskLayout == null) {
            throw new ApiException("Missing the required parameter 'taskLayout' when calling taskLayoutNewTaskLayout(Async)");
        }
        

        com.squareup.okhttp.Call call = taskLayoutNewTaskLayoutCall(taskLayout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call inserts a new task layout
     * 
     * @param taskLayout Task layout information to insert (required)
     * @return TaskLayoutDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskLayoutDTO taskLayoutNewTaskLayout(TaskLayoutDTO taskLayout) throws ApiException {
        ApiResponse<TaskLayoutDTO> resp = taskLayoutNewTaskLayoutWithHttpInfo(taskLayout);
        return resp.getData();
    }

    /**
     * This call inserts a new task layout
     * 
     * @param taskLayout Task layout information to insert (required)
     * @return ApiResponse&lt;TaskLayoutDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskLayoutDTO> taskLayoutNewTaskLayoutWithHttpInfo(TaskLayoutDTO taskLayout) throws ApiException {
        com.squareup.okhttp.Call call = taskLayoutNewTaskLayoutValidateBeforeCall(taskLayout, null, null);
        Type localVarReturnType = new TypeToken<TaskLayoutDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call inserts a new task layout (asynchronously)
     * 
     * @param taskLayout Task layout information to insert (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskLayoutNewTaskLayoutAsync(TaskLayoutDTO taskLayout, final ApiCallback<TaskLayoutDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskLayoutNewTaskLayoutValidateBeforeCall(taskLayout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskLayoutDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskLayoutUpdateTaskLayout
     * @param taskLayout Task layout information to edit (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskLayoutUpdateTaskLayoutCall(TaskLayoutDTO taskLayout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskLayout;

        // create path and map variables
        String localVarPath = "/api/TaskLayout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskLayoutUpdateTaskLayoutValidateBeforeCall(TaskLayoutDTO taskLayout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskLayout' is set
        if (taskLayout == null) {
            throw new ApiException("Missing the required parameter 'taskLayout' when calling taskLayoutUpdateTaskLayout(Async)");
        }
        

        com.squareup.okhttp.Call call = taskLayoutUpdateTaskLayoutCall(taskLayout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates a task layout
     * 
     * @param taskLayout Task layout information to edit (required)
     * @return TaskLayoutDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskLayoutDTO taskLayoutUpdateTaskLayout(TaskLayoutDTO taskLayout) throws ApiException {
        ApiResponse<TaskLayoutDTO> resp = taskLayoutUpdateTaskLayoutWithHttpInfo(taskLayout);
        return resp.getData();
    }

    /**
     * This call updates a task layout
     * 
     * @param taskLayout Task layout information to edit (required)
     * @return ApiResponse&lt;TaskLayoutDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskLayoutDTO> taskLayoutUpdateTaskLayoutWithHttpInfo(TaskLayoutDTO taskLayout) throws ApiException {
        com.squareup.okhttp.Call call = taskLayoutUpdateTaskLayoutValidateBeforeCall(taskLayout, null, null);
        Type localVarReturnType = new TypeToken<TaskLayoutDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call updates a task layout (asynchronously)
     * 
     * @param taskLayout Task layout information to edit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskLayoutUpdateTaskLayoutAsync(TaskLayoutDTO taskLayout, final ApiCallback<TaskLayoutDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskLayoutUpdateTaskLayoutValidateBeforeCall(taskLayout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskLayoutDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskLayoutUpdateTaskLayoutPriority
     * @param tasklayoutid Task layout identifier (required)
     * @param priority Priority to set (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskLayoutUpdateTaskLayoutPriorityCall(Integer tasklayoutid, Integer priority, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskLayout/changepriority/{tasklayoutid}/{priority}"
            .replaceAll("\\{" + "tasklayoutid" + "\\}", apiClient.escapeString(tasklayoutid.toString()))
            .replaceAll("\\{" + "priority" + "\\}", apiClient.escapeString(priority.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskLayoutUpdateTaskLayoutPriorityValidateBeforeCall(Integer tasklayoutid, Integer priority, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tasklayoutid' is set
        if (tasklayoutid == null) {
            throw new ApiException("Missing the required parameter 'tasklayoutid' when calling taskLayoutUpdateTaskLayoutPriority(Async)");
        }
        
        // verify the required parameter 'priority' is set
        if (priority == null) {
            throw new ApiException("Missing the required parameter 'priority' when calling taskLayoutUpdateTaskLayoutPriority(Async)");
        }
        

        com.squareup.okhttp.Call call = taskLayoutUpdateTaskLayoutPriorityCall(tasklayoutid, priority, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates the priority of a task layout
     * 
     * @param tasklayoutid Task layout identifier (required)
     * @param priority Priority to set (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskLayoutUpdateTaskLayoutPriority(Integer tasklayoutid, Integer priority) throws ApiException {
        taskLayoutUpdateTaskLayoutPriorityWithHttpInfo(tasklayoutid, priority);
    }

    /**
     * This call updates the priority of a task layout
     * 
     * @param tasklayoutid Task layout identifier (required)
     * @param priority Priority to set (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskLayoutUpdateTaskLayoutPriorityWithHttpInfo(Integer tasklayoutid, Integer priority) throws ApiException {
        com.squareup.okhttp.Call call = taskLayoutUpdateTaskLayoutPriorityValidateBeforeCall(tasklayoutid, priority, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call updates the priority of a task layout (asynchronously)
     * 
     * @param tasklayoutid Task layout identifier (required)
     * @param priority Priority to set (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskLayoutUpdateTaskLayoutPriorityAsync(Integer tasklayoutid, Integer priority, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskLayoutUpdateTaskLayoutPriorityValidateBeforeCall(tasklayoutid, priority, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskLayoutWriteTaskLayoutForUser
     * @param taskLayout Task layout information to write (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskLayoutWriteTaskLayoutForUserCall(TaskLayoutDTO taskLayout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskLayout;

        // create path and map variables
        String localVarPath = "/api/TaskLayout/foruser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskLayoutWriteTaskLayoutForUserValidateBeforeCall(TaskLayoutDTO taskLayout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskLayout' is set
        if (taskLayout == null) {
            throw new ApiException("Missing the required parameter 'taskLayout' when calling taskLayoutWriteTaskLayoutForUser(Async)");
        }
        

        com.squareup.okhttp.Call call = taskLayoutWriteTaskLayoutForUserCall(taskLayout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call inserts or updates personal task layout for user
     * 
     * @param taskLayout Task layout information to write (required)
     * @return TaskLayoutDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskLayoutDTO taskLayoutWriteTaskLayoutForUser(TaskLayoutDTO taskLayout) throws ApiException {
        ApiResponse<TaskLayoutDTO> resp = taskLayoutWriteTaskLayoutForUserWithHttpInfo(taskLayout);
        return resp.getData();
    }

    /**
     * This call inserts or updates personal task layout for user
     * 
     * @param taskLayout Task layout information to write (required)
     * @return ApiResponse&lt;TaskLayoutDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskLayoutDTO> taskLayoutWriteTaskLayoutForUserWithHttpInfo(TaskLayoutDTO taskLayout) throws ApiException {
        com.squareup.okhttp.Call call = taskLayoutWriteTaskLayoutForUserValidateBeforeCall(taskLayout, null, null);
        Type localVarReturnType = new TypeToken<TaskLayoutDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call inserts or updates personal task layout for user (asynchronously)
     * 
     * @param taskLayout Task layout information to write (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskLayoutWriteTaskLayoutForUserAsync(TaskLayoutDTO taskLayout, final ApiCallback<TaskLayoutDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskLayoutWriteTaskLayoutForUserValidateBeforeCall(taskLayout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskLayoutDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
