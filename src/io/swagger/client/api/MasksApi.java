/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DocumentTypeBaseDTO;
import io.swagger.client.model.DocumentTypeBaseTreeDTO;
import io.swagger.client.model.MaskCloneOptionsDto;
import io.swagger.client.model.MaskDTO;
import io.swagger.client.model.MaskDetailDTO;
import io.swagger.client.model.MaskProfileSchemaDTO;
import io.swagger.client.model.PermissionsDTO;
import io.swagger.client.model.ProfileDTO;
import io.swagger.client.model.ProfilePostExceptionDTO;
import io.swagger.client.model.ProfileResultDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MasksApi {
    private ApiClient apiClient;

    public MasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MasksApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for masksCloneMask
     * @param id Identifier of the mask (required)
     * @param cloneOptions Options to use for cloning (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksCloneMaskCall(String id, MaskCloneOptionsDto cloneOptions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cloneOptions;

        // create path and map variables
        String localVarPath = "/api/Masks/{id}/Clone"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksCloneMaskValidateBeforeCall(String id, MaskCloneOptionsDto cloneOptions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling masksCloneMask(Async)");
        }
        
        // verify the required parameter 'cloneOptions' is set
        if (cloneOptions == null) {
            throw new ApiException("Missing the required parameter 'cloneOptions' when calling masksCloneMask(Async)");
        }
        

        com.squareup.okhttp.Call call = masksCloneMaskCall(id, cloneOptions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call clones a mask
     * 
     * @param id Identifier of the mask (required)
     * @param cloneOptions Options to use for cloning (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void masksCloneMask(String id, MaskCloneOptionsDto cloneOptions) throws ApiException {
        masksCloneMaskWithHttpInfo(id, cloneOptions);
    }

    /**
     * This call clones a mask
     * 
     * @param id Identifier of the mask (required)
     * @param cloneOptions Options to use for cloning (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> masksCloneMaskWithHttpInfo(String id, MaskCloneOptionsDto cloneOptions) throws ApiException {
        com.squareup.okhttp.Call call = masksCloneMaskValidateBeforeCall(id, cloneOptions, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call clones a mask (asynchronously)
     * 
     * @param id Identifier of the mask (required)
     * @param cloneOptions Options to use for cloning (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksCloneMaskAsync(String id, MaskCloneOptionsDto cloneOptions, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksCloneMaskValidateBeforeCall(id, cloneOptions, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for masksDelete
     * @param id Identifier of the mask (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksDeleteCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Masks/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksDeleteValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling masksDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = masksDeleteCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a mask
     * 
     * @param id Identifier of the mask (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object masksDelete(String id) throws ApiException {
        ApiResponse<Object> resp = masksDeleteWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * This call deletes a mask
     * 
     * @param id Identifier of the mask (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> masksDeleteWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = masksDeleteValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call deletes a mask (asynchronously)
     * 
     * @param id Identifier of the mask (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksDeleteAsync(String id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksGetById
     * @param id Identifier of the mask (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksGetByIdCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Masks/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksGetByIdValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling masksGetById(Async)");
        }
        

        com.squareup.okhttp.Call call = masksGetByIdCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a mask by its identifier
     * 
     * @param id Identifier of the mask (required)
     * @return MaskDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskDTO masksGetById(String id) throws ApiException {
        ApiResponse<MaskDTO> resp = masksGetByIdWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * This call returns a mask by its identifier
     * 
     * @param id Identifier of the mask (required)
     * @return ApiResponse&lt;MaskDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskDTO> masksGetByIdWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = masksGetByIdValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<MaskDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a mask by its identifier (asynchronously)
     * 
     * @param id Identifier of the mask (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksGetByIdAsync(String id, final ApiCallback<MaskDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksGetByIdValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksGetDocumentTypesByMaskId
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksGetDocumentTypesByMaskIdCall(String maskId, String businessUnitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Masks/{maskId}/DocumentTypes"
            .replaceAll("\\{" + "maskId" + "\\}", apiClient.escapeString(maskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (businessUnitCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("businessUnitCode", businessUnitCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksGetDocumentTypesByMaskIdValidateBeforeCall(String maskId, String businessUnitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'maskId' is set
        if (maskId == null) {
            throw new ApiException("Missing the required parameter 'maskId' when calling masksGetDocumentTypesByMaskId(Async)");
        }
        

        com.squareup.okhttp.Call call = masksGetDocumentTypesByMaskIdCall(maskId, businessUnitCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all possibile Document Types for a mask
     * 
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (optional)
     * @return List&lt;DocumentTypeBaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DocumentTypeBaseDTO> masksGetDocumentTypesByMaskId(String maskId, String businessUnitCode) throws ApiException {
        ApiResponse<List<DocumentTypeBaseDTO>> resp = masksGetDocumentTypesByMaskIdWithHttpInfo(maskId, businessUnitCode);
        return resp.getData();
    }

    /**
     * This call returns all possibile Document Types for a mask
     * 
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (optional)
     * @return ApiResponse&lt;List&lt;DocumentTypeBaseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DocumentTypeBaseDTO>> masksGetDocumentTypesByMaskIdWithHttpInfo(String maskId, String businessUnitCode) throws ApiException {
        com.squareup.okhttp.Call call = masksGetDocumentTypesByMaskIdValidateBeforeCall(maskId, businessUnitCode, null, null);
        Type localVarReturnType = new TypeToken<List<DocumentTypeBaseDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all possibile Document Types for a mask (asynchronously)
     * 
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksGetDocumentTypesByMaskIdAsync(String maskId, String businessUnitCode, final ApiCallback<List<DocumentTypeBaseDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksGetDocumentTypesByMaskIdValidateBeforeCall(maskId, businessUnitCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DocumentTypeBaseDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksGetDocumentTypesByMaskIdOld
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call masksGetDocumentTypesByMaskIdOldCall(String maskId, String businessUnitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Masks/{maskId}/DocumentTypes/{businessUnitCode}"
            .replaceAll("\\{" + "maskId" + "\\}", apiClient.escapeString(maskId.toString()))
            .replaceAll("\\{" + "businessUnitCode" + "\\}", apiClient.escapeString(businessUnitCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksGetDocumentTypesByMaskIdOldValidateBeforeCall(String maskId, String businessUnitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'maskId' is set
        if (maskId == null) {
            throw new ApiException("Missing the required parameter 'maskId' when calling masksGetDocumentTypesByMaskIdOld(Async)");
        }
        
        // verify the required parameter 'businessUnitCode' is set
        if (businessUnitCode == null) {
            throw new ApiException("Missing the required parameter 'businessUnitCode' when calling masksGetDocumentTypesByMaskIdOld(Async)");
        }
        

        com.squareup.okhttp.Call call = masksGetDocumentTypesByMaskIdOldCall(maskId, businessUnitCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all possibile Document Types for a mask
     * This method is deprecated. Use api/Masks/{maskId}/DocumentTypes?businessunitcode&#x3D;{businessunitcode}
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (required)
     * @return List&lt;DocumentTypeBaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public List<DocumentTypeBaseDTO> masksGetDocumentTypesByMaskIdOld(String maskId, String businessUnitCode) throws ApiException {
        ApiResponse<List<DocumentTypeBaseDTO>> resp = masksGetDocumentTypesByMaskIdOldWithHttpInfo(maskId, businessUnitCode);
        return resp.getData();
    }

    /**
     * This call returns all possibile Document Types for a mask
     * This method is deprecated. Use api/Masks/{maskId}/DocumentTypes?businessunitcode&#x3D;{businessunitcode}
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (required)
     * @return ApiResponse&lt;List&lt;DocumentTypeBaseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<DocumentTypeBaseDTO>> masksGetDocumentTypesByMaskIdOldWithHttpInfo(String maskId, String businessUnitCode) throws ApiException {
        com.squareup.okhttp.Call call = masksGetDocumentTypesByMaskIdOldValidateBeforeCall(maskId, businessUnitCode, null, null);
        Type localVarReturnType = new TypeToken<List<DocumentTypeBaseDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all possibile Document Types for a mask (asynchronously)
     * This method is deprecated. Use api/Masks/{maskId}/DocumentTypes?businessunitcode&#x3D;{businessunitcode}
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call masksGetDocumentTypesByMaskIdOldAsync(String maskId, String businessUnitCode, final ApiCallback<List<DocumentTypeBaseDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksGetDocumentTypesByMaskIdOldValidateBeforeCall(maskId, businessUnitCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DocumentTypeBaseDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksGetDocumentTypesTreeByMaskId
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksGetDocumentTypesTreeByMaskIdCall(String maskId, String businessUnitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Masks/{maskId}/DocumentTypesTree"
            .replaceAll("\\{" + "maskId" + "\\}", apiClient.escapeString(maskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (businessUnitCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("businessUnitCode", businessUnitCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksGetDocumentTypesTreeByMaskIdValidateBeforeCall(String maskId, String businessUnitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'maskId' is set
        if (maskId == null) {
            throw new ApiException("Missing the required parameter 'maskId' when calling masksGetDocumentTypesTreeByMaskId(Async)");
        }
        

        com.squareup.okhttp.Call call = masksGetDocumentTypesTreeByMaskIdCall(maskId, businessUnitCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all possibile Document Types for a mask (tree format)
     * 
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (optional)
     * @return DocumentTypeBaseTreeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentTypeBaseTreeDTO masksGetDocumentTypesTreeByMaskId(String maskId, String businessUnitCode) throws ApiException {
        ApiResponse<DocumentTypeBaseTreeDTO> resp = masksGetDocumentTypesTreeByMaskIdWithHttpInfo(maskId, businessUnitCode);
        return resp.getData();
    }

    /**
     * This call returns all possibile Document Types for a mask (tree format)
     * 
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (optional)
     * @return ApiResponse&lt;DocumentTypeBaseTreeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentTypeBaseTreeDTO> masksGetDocumentTypesTreeByMaskIdWithHttpInfo(String maskId, String businessUnitCode) throws ApiException {
        com.squareup.okhttp.Call call = masksGetDocumentTypesTreeByMaskIdValidateBeforeCall(maskId, businessUnitCode, null, null);
        Type localVarReturnType = new TypeToken<DocumentTypeBaseTreeDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all possibile Document Types for a mask (tree format) (asynchronously)
     * 
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksGetDocumentTypesTreeByMaskIdAsync(String maskId, String businessUnitCode, final ApiCallback<DocumentTypeBaseTreeDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksGetDocumentTypesTreeByMaskIdValidateBeforeCall(maskId, businessUnitCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentTypeBaseTreeDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksGetDocumentTypesTreeByMaskIdOld
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call masksGetDocumentTypesTreeByMaskIdOldCall(String maskId, String businessUnitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Masks/{maskId}/DocumentTypesTree/{businessUnitCode}"
            .replaceAll("\\{" + "maskId" + "\\}", apiClient.escapeString(maskId.toString()))
            .replaceAll("\\{" + "businessUnitCode" + "\\}", apiClient.escapeString(businessUnitCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksGetDocumentTypesTreeByMaskIdOldValidateBeforeCall(String maskId, String businessUnitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'maskId' is set
        if (maskId == null) {
            throw new ApiException("Missing the required parameter 'maskId' when calling masksGetDocumentTypesTreeByMaskIdOld(Async)");
        }
        
        // verify the required parameter 'businessUnitCode' is set
        if (businessUnitCode == null) {
            throw new ApiException("Missing the required parameter 'businessUnitCode' when calling masksGetDocumentTypesTreeByMaskIdOld(Async)");
        }
        

        com.squareup.okhttp.Call call = masksGetDocumentTypesTreeByMaskIdOldCall(maskId, businessUnitCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all possibile Document Types for a mask (tree format)
     * This method is deprecated. Use api/Masks/{maskId}/DocumentTypesTree?businessunitcode&#x3D;{businessunitcode}
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (required)
     * @return DocumentTypeBaseTreeDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public DocumentTypeBaseTreeDTO masksGetDocumentTypesTreeByMaskIdOld(String maskId, String businessUnitCode) throws ApiException {
        ApiResponse<DocumentTypeBaseTreeDTO> resp = masksGetDocumentTypesTreeByMaskIdOldWithHttpInfo(maskId, businessUnitCode);
        return resp.getData();
    }

    /**
     * This call returns all possibile Document Types for a mask (tree format)
     * This method is deprecated. Use api/Masks/{maskId}/DocumentTypesTree?businessunitcode&#x3D;{businessunitcode}
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (required)
     * @return ApiResponse&lt;DocumentTypeBaseTreeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DocumentTypeBaseTreeDTO> masksGetDocumentTypesTreeByMaskIdOldWithHttpInfo(String maskId, String businessUnitCode) throws ApiException {
        com.squareup.okhttp.Call call = masksGetDocumentTypesTreeByMaskIdOldValidateBeforeCall(maskId, businessUnitCode, null, null);
        Type localVarReturnType = new TypeToken<DocumentTypeBaseTreeDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all possibile Document Types for a mask (tree format) (asynchronously)
     * This method is deprecated. Use api/Masks/{maskId}/DocumentTypesTree?businessunitcode&#x3D;{businessunitcode}
     * @param maskId Identifier of the mask (required)
     * @param businessUnitCode Business Unit Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call masksGetDocumentTypesTreeByMaskIdOldAsync(String maskId, String businessUnitCode, final ApiCallback<DocumentTypeBaseTreeDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksGetDocumentTypesTreeByMaskIdOldValidateBeforeCall(maskId, businessUnitCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentTypeBaseTreeDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksGetFieldsByClasse
     * @param systemid Document Type Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksGetFieldsByClasseCall(Integer systemid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Masks/fieldsbydocumenttype/{systemid}"
            .replaceAll("\\{" + "systemid" + "\\}", apiClient.escapeString(systemid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksGetFieldsByClasseValidateBeforeCall(Integer systemid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemid' is set
        if (systemid == null) {
            throw new ApiException("Missing the required parameter 'systemid' when calling masksGetFieldsByClasse(Async)");
        }
        

        com.squareup.okhttp.Call call = masksGetFieldsByClasseCall(systemid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns possibile fields by a Document Type
     * 
     * @param systemid Document Type Identifier (required)
     * @return List&lt;MaskDetailDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MaskDetailDTO> masksGetFieldsByClasse(Integer systemid) throws ApiException {
        ApiResponse<List<MaskDetailDTO>> resp = masksGetFieldsByClasseWithHttpInfo(systemid);
        return resp.getData();
    }

    /**
     * This call returns possibile fields by a Document Type
     * 
     * @param systemid Document Type Identifier (required)
     * @return ApiResponse&lt;List&lt;MaskDetailDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MaskDetailDTO>> masksGetFieldsByClasseWithHttpInfo(Integer systemid) throws ApiException {
        com.squareup.okhttp.Call call = masksGetFieldsByClasseValidateBeforeCall(systemid, null, null);
        Type localVarReturnType = new TypeToken<List<MaskDetailDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns possibile fields by a Document Type (asynchronously)
     * 
     * @param systemid Document Type Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksGetFieldsByClasseAsync(Integer systemid, final ApiCallback<List<MaskDetailDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksGetFieldsByClasseValidateBeforeCall(systemid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MaskDetailDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksGetList
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksGetListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Masks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksGetListValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = masksGetListCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all masks
     * 
     * @return List&lt;MaskDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MaskDTO> masksGetList() throws ApiException {
        ApiResponse<List<MaskDTO>> resp = masksGetListWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns all masks
     * 
     * @return ApiResponse&lt;List&lt;MaskDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MaskDTO>> masksGetListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = masksGetListValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<MaskDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all masks (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksGetListAsync(final ApiCallback<List<MaskDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksGetListValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MaskDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksGetPermission
     * @param maskId Identifier of the mask (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksGetPermissionCall(String maskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Masks/{maskId}/Permissions"
            .replaceAll("\\{" + "maskId" + "\\}", apiClient.escapeString(maskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksGetPermissionValidateBeforeCall(String maskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'maskId' is set
        if (maskId == null) {
            throw new ApiException("Missing the required parameter 'maskId' when calling masksGetPermission(Async)");
        }
        

        com.squareup.okhttp.Call call = masksGetPermissionCall(maskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the permissions for a mask
     * 
     * @param maskId Identifier of the mask (required)
     * @return PermissionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PermissionsDTO masksGetPermission(String maskId) throws ApiException {
        ApiResponse<PermissionsDTO> resp = masksGetPermissionWithHttpInfo(maskId);
        return resp.getData();
    }

    /**
     * This call returns the permissions for a mask
     * 
     * @param maskId Identifier of the mask (required)
     * @return ApiResponse&lt;PermissionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PermissionsDTO> masksGetPermissionWithHttpInfo(String maskId) throws ApiException {
        com.squareup.okhttp.Call call = masksGetPermissionValidateBeforeCall(maskId, null, null);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the permissions for a mask (asynchronously)
     * 
     * @param maskId Identifier of the mask (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksGetPermissionAsync(String maskId, final ApiCallback<PermissionsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksGetPermissionValidateBeforeCall(maskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksGetProfileForClasseBox
     * @param additionalFieldName Additional name (required)
     * @param profile  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksGetProfileForClasseBoxCall(String additionalFieldName, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/api/Masks/byclassadditionalfield/{additionalFieldName}/profileSchema"
            .replaceAll("\\{" + "additionalFieldName" + "\\}", apiClient.escapeString(additionalFieldName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksGetProfileForClasseBoxValidateBeforeCall(String additionalFieldName, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'additionalFieldName' is set
        if (additionalFieldName == null) {
            throw new ApiException("Missing the required parameter 'additionalFieldName' when calling masksGetProfileForClasseBox(Async)");
        }
        

        com.squareup.okhttp.Call call = masksGetProfileForClasseBoxCall(additionalFieldName, profile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This calls returns the profile schema for a mask associated to a class additional field
     * 
     * @param additionalFieldName Additional name (required)
     * @param profile  (optional)
     * @return MaskProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskProfileSchemaDTO masksGetProfileForClasseBox(String additionalFieldName, ProfileDTO profile) throws ApiException {
        ApiResponse<MaskProfileSchemaDTO> resp = masksGetProfileForClasseBoxWithHttpInfo(additionalFieldName, profile);
        return resp.getData();
    }

    /**
     * This calls returns the profile schema for a mask associated to a class additional field
     * 
     * @param additionalFieldName Additional name (required)
     * @param profile  (optional)
     * @return ApiResponse&lt;MaskProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskProfileSchemaDTO> masksGetProfileForClasseBoxWithHttpInfo(String additionalFieldName, ProfileDTO profile) throws ApiException {
        com.squareup.okhttp.Call call = masksGetProfileForClasseBoxValidateBeforeCall(additionalFieldName, profile, null, null);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This calls returns the profile schema for a mask associated to a class additional field (asynchronously)
     * 
     * @param additionalFieldName Additional name (required)
     * @param profile  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksGetProfileForClasseBoxAsync(String additionalFieldName, ProfileDTO profile, final ApiCallback<MaskProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksGetProfileForClasseBoxValidateBeforeCall(additionalFieldName, profile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksGetProfileSchemaByMaskId
     * @param maskId Identifier of the mask (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksGetProfileSchemaByMaskIdCall(String maskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Masks/{maskId}/profileSchema"
            .replaceAll("\\{" + "maskId" + "\\}", apiClient.escapeString(maskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksGetProfileSchemaByMaskIdValidateBeforeCall(String maskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'maskId' is set
        if (maskId == null) {
            throw new ApiException("Missing the required parameter 'maskId' when calling masksGetProfileSchemaByMaskId(Async)");
        }
        

        com.squareup.okhttp.Call call = masksGetProfileSchemaByMaskIdCall(maskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the profile schema by a mask
     * 
     * @param maskId Identifier of the mask (required)
     * @return MaskProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskProfileSchemaDTO masksGetProfileSchemaByMaskId(String maskId) throws ApiException {
        ApiResponse<MaskProfileSchemaDTO> resp = masksGetProfileSchemaByMaskIdWithHttpInfo(maskId);
        return resp.getData();
    }

    /**
     * This call returns the profile schema by a mask
     * 
     * @param maskId Identifier of the mask (required)
     * @return ApiResponse&lt;MaskProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskProfileSchemaDTO> masksGetProfileSchemaByMaskIdWithHttpInfo(String maskId) throws ApiException {
        com.squareup.okhttp.Call call = masksGetProfileSchemaByMaskIdValidateBeforeCall(maskId, null, null);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the profile schema by a mask (asynchronously)
     * 
     * @param maskId Identifier of the mask (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksGetProfileSchemaByMaskIdAsync(String maskId, final ApiCallback<MaskProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksGetProfileSchemaByMaskIdValidateBeforeCall(maskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksGetRoot
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksGetRootCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Masks/root";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksGetRootValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = masksGetRootCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the root mask
     * 
     * @return MaskDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskDTO masksGetRoot() throws ApiException {
        ApiResponse<MaskDTO> resp = masksGetRootWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns the root mask
     * 
     * @return ApiResponse&lt;MaskDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskDTO> masksGetRootWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = masksGetRootValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<MaskDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the root mask (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksGetRootAsync(final ApiCallback<MaskDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksGetRootValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksInserMask
     * @param mask  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksInserMaskCall(MaskDTO mask, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mask;

        // create path and map variables
        String localVarPath = "/api/Masks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksInserMaskValidateBeforeCall(MaskDTO mask, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = masksInserMaskCall(mask, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call inserts a new mask
     * 
     * @param mask  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void masksInserMask(MaskDTO mask) throws ApiException {
        masksInserMaskWithHttpInfo(mask);
    }

    /**
     * This call inserts a new mask
     * 
     * @param mask  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> masksInserMaskWithHttpInfo(MaskDTO mask) throws ApiException {
        com.squareup.okhttp.Call call = masksInserMaskValidateBeforeCall(mask, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call inserts a new mask (asynchronously)
     * 
     * @param mask  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksInserMaskAsync(MaskDTO mask, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksInserMaskValidateBeforeCall(mask, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for masksPost
     * @param maskId Identifier of the mask (required)
     * @param profile  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksPostCall(String maskId, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/api/Masks/{maskId}/Profile"
            .replaceAll("\\{" + "maskId" + "\\}", apiClient.escapeString(maskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksPostValidateBeforeCall(String maskId, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'maskId' is set
        if (maskId == null) {
            throw new ApiException("Missing the required parameter 'maskId' when calling masksPost(Async)");
        }
        

        com.squareup.okhttp.Call call = masksPostCall(maskId, profile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call executes a new profiling
     * 
     * @param maskId Identifier of the mask (required)
     * @param profile  (optional)
     * @return ProfileResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProfileResultDTO masksPost(String maskId, ProfileDTO profile) throws ApiException {
        ApiResponse<ProfileResultDTO> resp = masksPostWithHttpInfo(maskId, profile);
        return resp.getData();
    }

    /**
     * This call executes a new profiling
     * 
     * @param maskId Identifier of the mask (required)
     * @param profile  (optional)
     * @return ApiResponse&lt;ProfileResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProfileResultDTO> masksPostWithHttpInfo(String maskId, ProfileDTO profile) throws ApiException {
        com.squareup.okhttp.Call call = masksPostValidateBeforeCall(maskId, profile, null, null);
        Type localVarReturnType = new TypeToken<ProfileResultDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call executes a new profiling (asynchronously)
     * 
     * @param maskId Identifier of the mask (required)
     * @param profile  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksPostAsync(String maskId, ProfileDTO profile, final ApiCallback<ProfileResultDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksPostValidateBeforeCall(maskId, profile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProfileResultDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for masksSetPermission
     * @param maskId Identifier of the mask (required)
     * @param permissions Permissions to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksSetPermissionCall(String maskId, PermissionsDTO permissions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = permissions;

        // create path and map variables
        String localVarPath = "/api/Masks/{maskId}/Permissions"
            .replaceAll("\\{" + "maskId" + "\\}", apiClient.escapeString(maskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksSetPermissionValidateBeforeCall(String maskId, PermissionsDTO permissions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'maskId' is set
        if (maskId == null) {
            throw new ApiException("Missing the required parameter 'maskId' when calling masksSetPermission(Async)");
        }
        
        // verify the required parameter 'permissions' is set
        if (permissions == null) {
            throw new ApiException("Missing the required parameter 'permissions' when calling masksSetPermission(Async)");
        }
        

        com.squareup.okhttp.Call call = masksSetPermissionCall(maskId, permissions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates the permissions for a mask
     * 
     * @param maskId Identifier of the mask (required)
     * @param permissions Permissions to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void masksSetPermission(String maskId, PermissionsDTO permissions) throws ApiException {
        masksSetPermissionWithHttpInfo(maskId, permissions);
    }

    /**
     * This call updates the permissions for a mask
     * 
     * @param maskId Identifier of the mask (required)
     * @param permissions Permissions to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> masksSetPermissionWithHttpInfo(String maskId, PermissionsDTO permissions) throws ApiException {
        com.squareup.okhttp.Call call = masksSetPermissionValidateBeforeCall(maskId, permissions, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call updates the permissions for a mask (asynchronously)
     * 
     * @param maskId Identifier of the mask (required)
     * @param permissions Permissions to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksSetPermissionAsync(String maskId, PermissionsDTO permissions, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksSetPermissionValidateBeforeCall(maskId, permissions, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for masksUpdateMask
     * @param id Identifier of the mask (required)
     * @param mask  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call masksUpdateMaskCall(String id, MaskDTO mask, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mask;

        // create path and map variables
        String localVarPath = "/api/Masks/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call masksUpdateMaskValidateBeforeCall(String id, MaskDTO mask, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling masksUpdateMask(Async)");
        }
        

        com.squareup.okhttp.Call call = masksUpdateMaskCall(id, mask, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates a mask
     * 
     * @param id Identifier of the mask (required)
     * @param mask  (optional)
     * @return MaskDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskDTO masksUpdateMask(String id, MaskDTO mask) throws ApiException {
        ApiResponse<MaskDTO> resp = masksUpdateMaskWithHttpInfo(id, mask);
        return resp.getData();
    }

    /**
     * This call updates a mask
     * 
     * @param id Identifier of the mask (required)
     * @param mask  (optional)
     * @return ApiResponse&lt;MaskDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskDTO> masksUpdateMaskWithHttpInfo(String id, MaskDTO mask) throws ApiException {
        com.squareup.okhttp.Call call = masksUpdateMaskValidateBeforeCall(id, mask, null, null);
        Type localVarReturnType = new TypeToken<MaskDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call updates a mask (asynchronously)
     * 
     * @param id Identifier of the mask (required)
     * @param mask  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call masksUpdateMaskAsync(String id, MaskDTO mask, final ApiCallback<MaskDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = masksUpdateMaskValidateBeforeCall(id, mask, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
