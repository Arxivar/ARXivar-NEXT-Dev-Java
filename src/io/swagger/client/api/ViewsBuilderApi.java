/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.SearchDTO;
import io.swagger.client.model.SelectDTO;
import io.swagger.client.model.ViewEditDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ViewsBuilderApi {
    private ApiClient apiClient;

    public ViewsBuilderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ViewsBuilderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for viewsBuilderChangeShowFields
     * @param viewId View identifier (required)
     * @param showFields Value for the flag (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderChangeShowFieldsCall(String viewId, Boolean showFields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/ViewsBuilder/showFields/{viewId}/{showFields}"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()))
            .replaceAll("\\{" + "showFields" + "\\}", apiClient.escapeString(showFields.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsBuilderChangeShowFieldsValidateBeforeCall(String viewId, Boolean showFields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling viewsBuilderChangeShowFields(Async)");
        }
        
        // verify the required parameter 'showFields' is set
        if (showFields == null) {
            throw new ApiException("Missing the required parameter 'showFields' when calling viewsBuilderChangeShowFields(Async)");
        }
        

        com.squareup.okhttp.Call call = viewsBuilderChangeShowFieldsCall(viewId, showFields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates &#39;show field&#39; in view execution
     * 
     * @param viewId View identifier (required)
     * @param showFields Value for the flag (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void viewsBuilderChangeShowFields(String viewId, Boolean showFields) throws ApiException {
        viewsBuilderChangeShowFieldsWithHttpInfo(viewId, showFields);
    }

    /**
     * This call updates &#39;show field&#39; in view execution
     * 
     * @param viewId View identifier (required)
     * @param showFields Value for the flag (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> viewsBuilderChangeShowFieldsWithHttpInfo(String viewId, Boolean showFields) throws ApiException {
        com.squareup.okhttp.Call call = viewsBuilderChangeShowFieldsValidateBeforeCall(viewId, showFields, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call updates &#39;show field&#39; in view execution (asynchronously)
     * 
     * @param viewId View identifier (required)
     * @param showFields Value for the flag (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderChangeShowFieldsAsync(String viewId, Boolean showFields, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsBuilderChangeShowFieldsValidateBeforeCall(viewId, showFields, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for viewsBuilderEditView
     * @param viewedit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderEditViewCall(ViewEditDTO viewedit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = viewedit;

        // create path and map variables
        String localVarPath = "/api/ViewsBuilder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsBuilderEditViewValidateBeforeCall(ViewEditDTO viewedit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = viewsBuilderEditViewCall(viewedit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates a view
     * 
     * @param viewedit  (optional)
     * @return ViewEditDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewEditDTO viewsBuilderEditView(ViewEditDTO viewedit) throws ApiException {
        ApiResponse<ViewEditDTO> resp = viewsBuilderEditViewWithHttpInfo(viewedit);
        return resp.getData();
    }

    /**
     * This call updates a view
     * 
     * @param viewedit  (optional)
     * @return ApiResponse&lt;ViewEditDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewEditDTO> viewsBuilderEditViewWithHttpInfo(ViewEditDTO viewedit) throws ApiException {
        com.squareup.okhttp.Call call = viewsBuilderEditViewValidateBeforeCall(viewedit, null, null);
        Type localVarReturnType = new TypeToken<ViewEditDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call updates a view (asynchronously)
     * 
     * @param viewedit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderEditViewAsync(ViewEditDTO viewedit, final ApiCallback<ViewEditDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsBuilderEditViewValidateBeforeCall(viewedit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewEditDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for viewsBuilderEditView_0
     * @param viewedit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderEditView_0Call(ViewEditDTO viewedit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = viewedit;

        // create path and map variables
        String localVarPath = "/api/ViewsBuilder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsBuilderEditView_0ValidateBeforeCall(ViewEditDTO viewedit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = viewsBuilderEditView_0Call(viewedit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates a view
     * 
     * @param viewedit  (optional)
     * @return ViewEditDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewEditDTO viewsBuilderEditView_0(ViewEditDTO viewedit) throws ApiException {
        ApiResponse<ViewEditDTO> resp = viewsBuilderEditView_0WithHttpInfo(viewedit);
        return resp.getData();
    }

    /**
     * This call updates a view
     * 
     * @param viewedit  (optional)
     * @return ApiResponse&lt;ViewEditDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewEditDTO> viewsBuilderEditView_0WithHttpInfo(ViewEditDTO viewedit) throws ApiException {
        com.squareup.okhttp.Call call = viewsBuilderEditView_0ValidateBeforeCall(viewedit, null, null);
        Type localVarReturnType = new TypeToken<ViewEditDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call updates a view (asynchronously)
     * 
     * @param viewedit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderEditView_0Async(ViewEditDTO viewedit, final ApiCallback<ViewEditDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsBuilderEditView_0ValidateBeforeCall(viewedit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewEditDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for viewsBuilderGetSearch
     * @param documentType Document type identifer (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderGetSearchCall(Integer documentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/ViewsBuilder/search/{documentType}"
            .replaceAll("\\{" + "documentType" + "\\}", apiClient.escapeString(documentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsBuilderGetSearchValidateBeforeCall(Integer documentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling viewsBuilderGetSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = viewsBuilderGetSearchCall(documentType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a new search by a document type
     * 
     * @param documentType Document type identifer (required)
     * @return SearchDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchDTO viewsBuilderGetSearch(Integer documentType) throws ApiException {
        ApiResponse<SearchDTO> resp = viewsBuilderGetSearchWithHttpInfo(documentType);
        return resp.getData();
    }

    /**
     * This call returns a new search by a document type
     * 
     * @param documentType Document type identifer (required)
     * @return ApiResponse&lt;SearchDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchDTO> viewsBuilderGetSearchWithHttpInfo(Integer documentType) throws ApiException {
        com.squareup.okhttp.Call call = viewsBuilderGetSearchValidateBeforeCall(documentType, null, null);
        Type localVarReturnType = new TypeToken<SearchDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a new search by a document type (asynchronously)
     * 
     * @param documentType Document type identifer (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderGetSearchAsync(Integer documentType, final ApiCallback<SearchDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsBuilderGetSearchValidateBeforeCall(documentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for viewsBuilderGetSearch_0
     * @param documentType Identifier of first level document type (required)
     * @param tipo2 Identifier of secodn level document type (required)
     * @param tipo3 Identifier of third level document type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderGetSearch_0Call(Integer documentType, Integer tipo2, Integer tipo3, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/ViewsBuilder/search/{documentType}/{tipo2}/{tipo3}"
            .replaceAll("\\{" + "documentType" + "\\}", apiClient.escapeString(documentType.toString()))
            .replaceAll("\\{" + "tipo2" + "\\}", apiClient.escapeString(tipo2.toString()))
            .replaceAll("\\{" + "tipo3" + "\\}", apiClient.escapeString(tipo3.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsBuilderGetSearch_0ValidateBeforeCall(Integer documentType, Integer tipo2, Integer tipo3, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling viewsBuilderGetSearch_0(Async)");
        }
        
        // verify the required parameter 'tipo2' is set
        if (tipo2 == null) {
            throw new ApiException("Missing the required parameter 'tipo2' when calling viewsBuilderGetSearch_0(Async)");
        }
        
        // verify the required parameter 'tipo3' is set
        if (tipo3 == null) {
            throw new ApiException("Missing the required parameter 'tipo3' when calling viewsBuilderGetSearch_0(Async)");
        }
        

        com.squareup.okhttp.Call call = viewsBuilderGetSearch_0Call(documentType, tipo2, tipo3, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a new search by a document type
     * 
     * @param documentType Identifier of first level document type (required)
     * @param tipo2 Identifier of secodn level document type (required)
     * @param tipo3 Identifier of third level document type (required)
     * @return SearchDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchDTO viewsBuilderGetSearch_0(Integer documentType, Integer tipo2, Integer tipo3) throws ApiException {
        ApiResponse<SearchDTO> resp = viewsBuilderGetSearch_0WithHttpInfo(documentType, tipo2, tipo3);
        return resp.getData();
    }

    /**
     * This call returns a new search by a document type
     * 
     * @param documentType Identifier of first level document type (required)
     * @param tipo2 Identifier of secodn level document type (required)
     * @param tipo3 Identifier of third level document type (required)
     * @return ApiResponse&lt;SearchDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchDTO> viewsBuilderGetSearch_0WithHttpInfo(Integer documentType, Integer tipo2, Integer tipo3) throws ApiException {
        com.squareup.okhttp.Call call = viewsBuilderGetSearch_0ValidateBeforeCall(documentType, tipo2, tipo3, null, null);
        Type localVarReturnType = new TypeToken<SearchDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a new search by a document type (asynchronously)
     * 
     * @param documentType Identifier of first level document type (required)
     * @param tipo2 Identifier of secodn level document type (required)
     * @param tipo3 Identifier of third level document type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderGetSearch_0Async(Integer documentType, Integer tipo2, Integer tipo3, final ApiCallback<SearchDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsBuilderGetSearch_0ValidateBeforeCall(documentType, tipo2, tipo3, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for viewsBuilderGetSelect
     * @param documentType Document type identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderGetSelectCall(Integer documentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/ViewsBuilder/select/{documentType}"
            .replaceAll("\\{" + "documentType" + "\\}", apiClient.escapeString(documentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsBuilderGetSelectValidateBeforeCall(Integer documentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling viewsBuilderGetSelect(Async)");
        }
        

        com.squareup.okhttp.Call call = viewsBuilderGetSelectCall(documentType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a new select by a document type
     * 
     * @param documentType Document type identifier (required)
     * @return SelectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SelectDTO viewsBuilderGetSelect(Integer documentType) throws ApiException {
        ApiResponse<SelectDTO> resp = viewsBuilderGetSelectWithHttpInfo(documentType);
        return resp.getData();
    }

    /**
     * This call returns a new select by a document type
     * 
     * @param documentType Document type identifier (required)
     * @return ApiResponse&lt;SelectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SelectDTO> viewsBuilderGetSelectWithHttpInfo(Integer documentType) throws ApiException {
        com.squareup.okhttp.Call call = viewsBuilderGetSelectValidateBeforeCall(documentType, null, null);
        Type localVarReturnType = new TypeToken<SelectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a new select by a document type (asynchronously)
     * 
     * @param documentType Document type identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderGetSelectAsync(Integer documentType, final ApiCallback<SelectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsBuilderGetSelectValidateBeforeCall(documentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SelectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for viewsBuilderGetSelect_0
     * @param documentType Identifier of first level document type (required)
     * @param tipo2 Identifier of secodn level document type (required)
     * @param tipo3 Identifier of third level document type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderGetSelect_0Call(Integer documentType, Integer tipo2, Integer tipo3, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/ViewsBuilder/select/{documentType}/{tipo2}/{tipo3}"
            .replaceAll("\\{" + "documentType" + "\\}", apiClient.escapeString(documentType.toString()))
            .replaceAll("\\{" + "tipo2" + "\\}", apiClient.escapeString(tipo2.toString()))
            .replaceAll("\\{" + "tipo3" + "\\}", apiClient.escapeString(tipo3.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsBuilderGetSelect_0ValidateBeforeCall(Integer documentType, Integer tipo2, Integer tipo3, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling viewsBuilderGetSelect_0(Async)");
        }
        
        // verify the required parameter 'tipo2' is set
        if (tipo2 == null) {
            throw new ApiException("Missing the required parameter 'tipo2' when calling viewsBuilderGetSelect_0(Async)");
        }
        
        // verify the required parameter 'tipo3' is set
        if (tipo3 == null) {
            throw new ApiException("Missing the required parameter 'tipo3' when calling viewsBuilderGetSelect_0(Async)");
        }
        

        com.squareup.okhttp.Call call = viewsBuilderGetSelect_0Call(documentType, tipo2, tipo3, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a new select by a document type
     * 
     * @param documentType Identifier of first level document type (required)
     * @param tipo2 Identifier of secodn level document type (required)
     * @param tipo3 Identifier of third level document type (required)
     * @return SelectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SelectDTO viewsBuilderGetSelect_0(Integer documentType, Integer tipo2, Integer tipo3) throws ApiException {
        ApiResponse<SelectDTO> resp = viewsBuilderGetSelect_0WithHttpInfo(documentType, tipo2, tipo3);
        return resp.getData();
    }

    /**
     * This call returns a new select by a document type
     * 
     * @param documentType Identifier of first level document type (required)
     * @param tipo2 Identifier of secodn level document type (required)
     * @param tipo3 Identifier of third level document type (required)
     * @return ApiResponse&lt;SelectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SelectDTO> viewsBuilderGetSelect_0WithHttpInfo(Integer documentType, Integer tipo2, Integer tipo3) throws ApiException {
        com.squareup.okhttp.Call call = viewsBuilderGetSelect_0ValidateBeforeCall(documentType, tipo2, tipo3, null, null);
        Type localVarReturnType = new TypeToken<SelectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a new select by a document type (asynchronously)
     * 
     * @param documentType Identifier of first level document type (required)
     * @param tipo2 Identifier of secodn level document type (required)
     * @param tipo3 Identifier of third level document type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderGetSelect_0Async(Integer documentType, Integer tipo2, Integer tipo3, final ApiCallback<SelectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsBuilderGetSelect_0ValidateBeforeCall(documentType, tipo2, tipo3, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SelectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for viewsBuilderGetViewForEdit
     * @param viewId View identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderGetViewForEditCall(String viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/ViewsBuilder/{viewId}"
            .replaceAll("\\{" + "viewId" + "\\}", apiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewsBuilderGetViewForEditValidateBeforeCall(String viewId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling viewsBuilderGetViewForEdit(Async)");
        }
        

        com.squareup.okhttp.Call call = viewsBuilderGetViewForEditCall(viewId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a view for edit purpose
     * 
     * @param viewId View identifier (required)
     * @return ViewEditDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewEditDTO viewsBuilderGetViewForEdit(String viewId) throws ApiException {
        ApiResponse<ViewEditDTO> resp = viewsBuilderGetViewForEditWithHttpInfo(viewId);
        return resp.getData();
    }

    /**
     * This call returns a view for edit purpose
     * 
     * @param viewId View identifier (required)
     * @return ApiResponse&lt;ViewEditDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewEditDTO> viewsBuilderGetViewForEditWithHttpInfo(String viewId) throws ApiException {
        com.squareup.okhttp.Call call = viewsBuilderGetViewForEditValidateBeforeCall(viewId, null, null);
        Type localVarReturnType = new TypeToken<ViewEditDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a view for edit purpose (asynchronously)
     * 
     * @param viewId View identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewsBuilderGetViewForEditAsync(String viewId, final ApiCallback<ViewEditDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewsBuilderGetViewForEditValidateBeforeCall(viewId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewEditDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
