/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.PluginSettingRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientSettingsApi {
    private ApiClient apiClient;

    public ClientSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientSettingsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for clientSettingsGetPluginSettings
     * @param pluginId Identifier of plugin (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientSettingsGetPluginSettingsCall(String pluginId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Settings/plugin/{pluginId}"
            .replaceAll("\\{" + "pluginId" + "\\}", apiClient.escapeString(pluginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientSettingsGetPluginSettingsValidateBeforeCall(String pluginId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pluginId' is set
        if (pluginId == null) {
            throw new ApiException("Missing the required parameter 'pluginId' when calling clientSettingsGetPluginSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = clientSettingsGetPluginSettingsCall(pluginId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the settings of plugin
     * 
     * @param pluginId Identifier of plugin (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object clientSettingsGetPluginSettings(String pluginId) throws ApiException {
        ApiResponse<Object> resp = clientSettingsGetPluginSettingsWithHttpInfo(pluginId);
        return resp.getData();
    }

    /**
     * This call returns the settings of plugin
     * 
     * @param pluginId Identifier of plugin (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> clientSettingsGetPluginSettingsWithHttpInfo(String pluginId) throws ApiException {
        com.squareup.okhttp.Call call = clientSettingsGetPluginSettingsValidateBeforeCall(pluginId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the settings of plugin (asynchronously)
     * 
     * @param pluginId Identifier of plugin (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientSettingsGetPluginSettingsAsync(String pluginId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientSettingsGetPluginSettingsValidateBeforeCall(pluginId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for clientSettingsGetPluginUserSettings
     * @param pluginRequest Request of plugin settings (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientSettingsGetPluginUserSettingsCall(PluginSettingRequest pluginRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pluginRequest;

        // create path and map variables
        String localVarPath = "/api/Settings/pluginForUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientSettingsGetPluginUserSettingsValidateBeforeCall(PluginSettingRequest pluginRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pluginRequest' is set
        if (pluginRequest == null) {
            throw new ApiException("Missing the required parameter 'pluginRequest' when calling clientSettingsGetPluginUserSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = clientSettingsGetPluginUserSettingsCall(pluginRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the plugin settings of connected user
     * 
     * @param pluginRequest Request of plugin settings (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object clientSettingsGetPluginUserSettings(PluginSettingRequest pluginRequest) throws ApiException {
        ApiResponse<Object> resp = clientSettingsGetPluginUserSettingsWithHttpInfo(pluginRequest);
        return resp.getData();
    }

    /**
     * This call returns the plugin settings of connected user
     * 
     * @param pluginRequest Request of plugin settings (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> clientSettingsGetPluginUserSettingsWithHttpInfo(PluginSettingRequest pluginRequest) throws ApiException {
        com.squareup.okhttp.Call call = clientSettingsGetPluginUserSettingsValidateBeforeCall(pluginRequest, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the plugin settings of connected user (asynchronously)
     * 
     * @param pluginRequest Request of plugin settings (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientSettingsGetPluginUserSettingsAsync(PluginSettingRequest pluginRequest, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientSettingsGetPluginUserSettingsValidateBeforeCall(pluginRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for clientSettingsGetSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientSettingsGetSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Settings/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientSettingsGetSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = clientSettingsGetSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the settings of connected user
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object clientSettingsGetSettings() throws ApiException {
        ApiResponse<Object> resp = clientSettingsGetSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns the settings of connected user
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> clientSettingsGetSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = clientSettingsGetSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the settings of connected user (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientSettingsGetSettingsAsync(final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientSettingsGetSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for clientSettingsGetSystemSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientSettingsGetSystemSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientSettingsGetSystemSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = clientSettingsGetSystemSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the settings of system
     * 
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object clientSettingsGetSystemSettings() throws ApiException {
        ApiResponse<Object> resp = clientSettingsGetSystemSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns the settings of system
     * 
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> clientSettingsGetSystemSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = clientSettingsGetSystemSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the settings of system (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientSettingsGetSystemSettingsAsync(final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientSettingsGetSystemSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for clientSettingsGetWidgetSettings
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientSettingsGetWidgetSettingsCall(String id, String instanceId, Integer desktopId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Settings/widget/{id}/{instanceId}/{desktopId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()))
            .replaceAll("\\{" + "desktopId" + "\\}", apiClient.escapeString(desktopId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientSettingsGetWidgetSettingsValidateBeforeCall(String id, String instanceId, Integer desktopId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling clientSettingsGetWidgetSettings(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling clientSettingsGetWidgetSettings(Async)");
        }
        
        // verify the required parameter 'desktopId' is set
        if (desktopId == null) {
            throw new ApiException("Missing the required parameter 'desktopId' when calling clientSettingsGetWidgetSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = clientSettingsGetWidgetSettingsCall(id, instanceId, desktopId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the widget settings
     * 
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object clientSettingsGetWidgetSettings(String id, String instanceId, Integer desktopId) throws ApiException {
        ApiResponse<Object> resp = clientSettingsGetWidgetSettingsWithHttpInfo(id, instanceId, desktopId);
        return resp.getData();
    }

    /**
     * This call returns the widget settings
     * 
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> clientSettingsGetWidgetSettingsWithHttpInfo(String id, String instanceId, Integer desktopId) throws ApiException {
        com.squareup.okhttp.Call call = clientSettingsGetWidgetSettingsValidateBeforeCall(id, instanceId, desktopId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the widget settings (asynchronously)
     * 
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientSettingsGetWidgetSettingsAsync(String id, String instanceId, Integer desktopId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientSettingsGetWidgetSettingsValidateBeforeCall(id, instanceId, desktopId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for clientSettingsGetWidgetUserSettings
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientSettingsGetWidgetUserSettingsCall(String id, String instanceId, Integer desktopId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Settings/widgetForUser/{id}/{instanceId}/{desktopId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()))
            .replaceAll("\\{" + "desktopId" + "\\}", apiClient.escapeString(desktopId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientSettingsGetWidgetUserSettingsValidateBeforeCall(String id, String instanceId, Integer desktopId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling clientSettingsGetWidgetUserSettings(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling clientSettingsGetWidgetUserSettings(Async)");
        }
        
        // verify the required parameter 'desktopId' is set
        if (desktopId == null) {
            throw new ApiException("Missing the required parameter 'desktopId' when calling clientSettingsGetWidgetUserSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = clientSettingsGetWidgetUserSettingsCall(id, instanceId, desktopId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the widget settings of connected user
     * 
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object clientSettingsGetWidgetUserSettings(String id, String instanceId, Integer desktopId) throws ApiException {
        ApiResponse<Object> resp = clientSettingsGetWidgetUserSettingsWithHttpInfo(id, instanceId, desktopId);
        return resp.getData();
    }

    /**
     * This call returns the widget settings of connected user
     * 
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> clientSettingsGetWidgetUserSettingsWithHttpInfo(String id, String instanceId, Integer desktopId) throws ApiException {
        com.squareup.okhttp.Call call = clientSettingsGetWidgetUserSettingsValidateBeforeCall(id, instanceId, desktopId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the widget settings of connected user (asynchronously)
     * 
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientSettingsGetWidgetUserSettingsAsync(String id, String instanceId, Integer desktopId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientSettingsGetWidgetUserSettingsValidateBeforeCall(id, instanceId, desktopId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for clientSettingsUpdatePluginSetting
     * @param pluginId Identifier of plugin (required)
     * @param setting Settings information to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientSettingsUpdatePluginSettingCall(String pluginId, Object setting, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = setting;

        // create path and map variables
        String localVarPath = "/api/Settings/plugin/{pluginId}"
            .replaceAll("\\{" + "pluginId" + "\\}", apiClient.escapeString(pluginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientSettingsUpdatePluginSettingValidateBeforeCall(String pluginId, Object setting, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pluginId' is set
        if (pluginId == null) {
            throw new ApiException("Missing the required parameter 'pluginId' when calling clientSettingsUpdatePluginSetting(Async)");
        }
        
        // verify the required parameter 'setting' is set
        if (setting == null) {
            throw new ApiException("Missing the required parameter 'setting' when calling clientSettingsUpdatePluginSetting(Async)");
        }
        

        com.squareup.okhttp.Call call = clientSettingsUpdatePluginSettingCall(pluginId, setting, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call upade the setting of plugin
     * 
     * @param pluginId Identifier of plugin (required)
     * @param setting Settings information to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clientSettingsUpdatePluginSetting(String pluginId, Object setting) throws ApiException {
        clientSettingsUpdatePluginSettingWithHttpInfo(pluginId, setting);
    }

    /**
     * This call upade the setting of plugin
     * 
     * @param pluginId Identifier of plugin (required)
     * @param setting Settings information to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clientSettingsUpdatePluginSettingWithHttpInfo(String pluginId, Object setting) throws ApiException {
        com.squareup.okhttp.Call call = clientSettingsUpdatePluginSettingValidateBeforeCall(pluginId, setting, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call upade the setting of plugin (asynchronously)
     * 
     * @param pluginId Identifier of plugin (required)
     * @param setting Settings information to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientSettingsUpdatePluginSettingAsync(String pluginId, Object setting, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientSettingsUpdatePluginSettingValidateBeforeCall(pluginId, setting, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for clientSettingsUpdatePluginUserSetting
     * @param pluginRequest Request of plugin settings (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientSettingsUpdatePluginUserSettingCall(PluginSettingRequest pluginRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pluginRequest;

        // create path and map variables
        String localVarPath = "/api/Settings/pluginForUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientSettingsUpdatePluginUserSettingValidateBeforeCall(PluginSettingRequest pluginRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pluginRequest' is set
        if (pluginRequest == null) {
            throw new ApiException("Missing the required parameter 'pluginRequest' when calling clientSettingsUpdatePluginUserSetting(Async)");
        }
        

        com.squareup.okhttp.Call call = clientSettingsUpdatePluginUserSettingCall(pluginRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call upade the plugin settings of connected user
     * 
     * @param pluginRequest Request of plugin settings (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clientSettingsUpdatePluginUserSetting(PluginSettingRequest pluginRequest) throws ApiException {
        clientSettingsUpdatePluginUserSettingWithHttpInfo(pluginRequest);
    }

    /**
     * This call upade the plugin settings of connected user
     * 
     * @param pluginRequest Request of plugin settings (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clientSettingsUpdatePluginUserSettingWithHttpInfo(PluginSettingRequest pluginRequest) throws ApiException {
        com.squareup.okhttp.Call call = clientSettingsUpdatePluginUserSettingValidateBeforeCall(pluginRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call upade the plugin settings of connected user (asynchronously)
     * 
     * @param pluginRequest Request of plugin settings (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientSettingsUpdatePluginUserSettingAsync(PluginSettingRequest pluginRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientSettingsUpdatePluginUserSettingValidateBeforeCall(pluginRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for clientSettingsUpdateUserSetting
     * @param setting Settings information to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientSettingsUpdateUserSettingCall(Object setting, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = setting;

        // create path and map variables
        String localVarPath = "/api/Settings/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientSettingsUpdateUserSettingValidateBeforeCall(Object setting, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'setting' is set
        if (setting == null) {
            throw new ApiException("Missing the required parameter 'setting' when calling clientSettingsUpdateUserSetting(Async)");
        }
        

        com.squareup.okhttp.Call call = clientSettingsUpdateUserSettingCall(setting, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call upade the setting of system
     * 
     * @param setting Settings information to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clientSettingsUpdateUserSetting(Object setting) throws ApiException {
        clientSettingsUpdateUserSettingWithHttpInfo(setting);
    }

    /**
     * This call upade the setting of system
     * 
     * @param setting Settings information to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clientSettingsUpdateUserSettingWithHttpInfo(Object setting) throws ApiException {
        com.squareup.okhttp.Call call = clientSettingsUpdateUserSettingValidateBeforeCall(setting, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call upade the setting of system (asynchronously)
     * 
     * @param setting Settings information to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientSettingsUpdateUserSettingAsync(Object setting, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientSettingsUpdateUserSettingValidateBeforeCall(setting, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for clientSettingsUpdateWidgetSetting
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @param userSettings  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientSettingsUpdateWidgetSettingCall(String id, String instanceId, Integer desktopId, Object userSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userSettings;

        // create path and map variables
        String localVarPath = "/api/Settings/widget/{id}/{instanceId}/{desktopId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()))
            .replaceAll("\\{" + "desktopId" + "\\}", apiClient.escapeString(desktopId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientSettingsUpdateWidgetSettingValidateBeforeCall(String id, String instanceId, Integer desktopId, Object userSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling clientSettingsUpdateWidgetSetting(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling clientSettingsUpdateWidgetSetting(Async)");
        }
        
        // verify the required parameter 'desktopId' is set
        if (desktopId == null) {
            throw new ApiException("Missing the required parameter 'desktopId' when calling clientSettingsUpdateWidgetSetting(Async)");
        }
        
        // verify the required parameter 'userSettings' is set
        if (userSettings == null) {
            throw new ApiException("Missing the required parameter 'userSettings' when calling clientSettingsUpdateWidgetSetting(Async)");
        }
        

        com.squareup.okhttp.Call call = clientSettingsUpdateWidgetSettingCall(id, instanceId, desktopId, userSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call upade the widget settings
     * 
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @param userSettings  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clientSettingsUpdateWidgetSetting(String id, String instanceId, Integer desktopId, Object userSettings) throws ApiException {
        clientSettingsUpdateWidgetSettingWithHttpInfo(id, instanceId, desktopId, userSettings);
    }

    /**
     * This call upade the widget settings
     * 
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @param userSettings  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clientSettingsUpdateWidgetSettingWithHttpInfo(String id, String instanceId, Integer desktopId, Object userSettings) throws ApiException {
        com.squareup.okhttp.Call call = clientSettingsUpdateWidgetSettingValidateBeforeCall(id, instanceId, desktopId, userSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call upade the widget settings (asynchronously)
     * 
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @param userSettings  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientSettingsUpdateWidgetSettingAsync(String id, String instanceId, Integer desktopId, Object userSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientSettingsUpdateWidgetSettingValidateBeforeCall(id, instanceId, desktopId, userSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for clientSettingsUpdateWidgetUserSetting
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @param userSettings Settings information to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clientSettingsUpdateWidgetUserSettingCall(String id, String instanceId, Integer desktopId, Object userSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userSettings;

        // create path and map variables
        String localVarPath = "/api/Settings/widgetForUser/{id}/{instanceId}/{desktopId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()))
            .replaceAll("\\{" + "desktopId" + "\\}", apiClient.escapeString(desktopId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call clientSettingsUpdateWidgetUserSettingValidateBeforeCall(String id, String instanceId, Integer desktopId, Object userSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling clientSettingsUpdateWidgetUserSetting(Async)");
        }
        
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling clientSettingsUpdateWidgetUserSetting(Async)");
        }
        
        // verify the required parameter 'desktopId' is set
        if (desktopId == null) {
            throw new ApiException("Missing the required parameter 'desktopId' when calling clientSettingsUpdateWidgetUserSetting(Async)");
        }
        
        // verify the required parameter 'userSettings' is set
        if (userSettings == null) {
            throw new ApiException("Missing the required parameter 'userSettings' when calling clientSettingsUpdateWidgetUserSetting(Async)");
        }
        

        com.squareup.okhttp.Call call = clientSettingsUpdateWidgetUserSettingCall(id, instanceId, desktopId, userSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call upade the widget settings of connected user
     * 
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @param userSettings Settings information to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void clientSettingsUpdateWidgetUserSetting(String id, String instanceId, Integer desktopId, Object userSettings) throws ApiException {
        clientSettingsUpdateWidgetUserSettingWithHttpInfo(id, instanceId, desktopId, userSettings);
    }

    /**
     * This call upade the widget settings of connected user
     * 
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @param userSettings Settings information to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> clientSettingsUpdateWidgetUserSettingWithHttpInfo(String id, String instanceId, Integer desktopId, Object userSettings) throws ApiException {
        com.squareup.okhttp.Call call = clientSettingsUpdateWidgetUserSettingValidateBeforeCall(id, instanceId, desktopId, userSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call upade the widget settings of connected user (asynchronously)
     * 
     * @param id Widget identifier (required)
     * @param instanceId Instance identifier (required)
     * @param desktopId Desktop identifier (required)
     * @param userSettings Settings information to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call clientSettingsUpdateWidgetUserSettingAsync(String id, String instanceId, Integer desktopId, Object userSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clientSettingsUpdateWidgetUserSettingValidateBeforeCall(id, instanceId, desktopId, userSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
