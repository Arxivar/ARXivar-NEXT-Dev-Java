/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DynamicJobMultipleSetRequestDTO;
import io.swagger.client.model.FieldFilterConcreteDTO;
import io.swagger.client.model.FieldValuesDTO;
import io.swagger.client.model.ProcessVariablesFieldsDTO;
import io.swagger.client.model.ProfessionalRoleOperationDTO;
import io.swagger.client.model.SignDocumentDataDTO;
import io.swagger.client.model.TaskExitCodeDTO;
import io.swagger.client.model.TaskWorkDynamicJobOperationDTO;
import io.swagger.client.model.TaskWorkOperationsDTO;
import io.swagger.client.model.TaskWorkSignOperationRequestDTO;
import io.swagger.client.model.UserCompleteDTO;
import io.swagger.client.model.VariablesValuesCriteriaDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskWorkOperationsApi {
    private ApiClient apiClient;

    public TaskWorkOperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskWorkOperationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for taskWorkOperationsExecuteSignOperation
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsExecuteSignOperationCall(TaskWorkSignOperationRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/ExecuteSignOperation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsExecuteSignOperationValidateBeforeCall(TaskWorkSignOperationRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling taskWorkOperationsExecuteSignOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsExecuteSignOperationCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkOperationsExecuteSignOperation(TaskWorkSignOperationRequestDTO request) throws ApiException {
        taskWorkOperationsExecuteSignOperationWithHttpInfo(request);
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkOperationsExecuteSignOperationWithHttpInfo(TaskWorkSignOperationRequestDTO request) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsExecuteSignOperationValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsExecuteSignOperationAsync(TaskWorkSignOperationRequestDTO request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsExecuteSignOperationValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsGetByTaskWorkId
     * @param taskWorkId Taskwork identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetByTaskWorkIdCall(Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/byTaskWork/{taskWorkId}"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsGetByTaskWorkIdValidateBeforeCall(Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkOperationsGetByTaskWorkId(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsGetByTaskWorkIdCall(taskWorkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all the operations in a task work
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @return TaskWorkOperationsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskWorkOperationsDTO taskWorkOperationsGetByTaskWorkId(Integer taskWorkId) throws ApiException {
        ApiResponse<TaskWorkOperationsDTO> resp = taskWorkOperationsGetByTaskWorkIdWithHttpInfo(taskWorkId);
        return resp.getData();
    }

    /**
     * This call returns all the operations in a task work
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @return ApiResponse&lt;TaskWorkOperationsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskWorkOperationsDTO> taskWorkOperationsGetByTaskWorkIdWithHttpInfo(Integer taskWorkId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsGetByTaskWorkIdValidateBeforeCall(taskWorkId, null, null);
        Type localVarReturnType = new TypeToken<TaskWorkOperationsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all the operations in a task work (asynchronously)
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetByTaskWorkIdAsync(Integer taskWorkId, final ApiCallback<TaskWorkOperationsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsGetByTaskWorkIdValidateBeforeCall(taskWorkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskWorkOperationsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsGetDocumentForSignOperation
     * @param taskWorkId  (required)
     * @param signOperationId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetDocumentForSignOperationCall(Integer taskWorkId, Integer signOperationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/{taskWorkId}/signOperationInfo/{signOperationId}"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "signOperationId" + "\\}", apiClient.escapeString(signOperationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsGetDocumentForSignOperationValidateBeforeCall(Integer taskWorkId, Integer signOperationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkOperationsGetDocumentForSignOperation(Async)");
        }
        
        // verify the required parameter 'signOperationId' is set
        if (signOperationId == null) {
            throw new ApiException("Missing the required parameter 'signOperationId' when calling taskWorkOperationsGetDocumentForSignOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsGetDocumentForSignOperationCall(taskWorkId, signOperationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param taskWorkId  (required)
     * @param signOperationId  (required)
     * @return List&lt;SignDocumentDataDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SignDocumentDataDTO> taskWorkOperationsGetDocumentForSignOperation(Integer taskWorkId, Integer signOperationId) throws ApiException {
        ApiResponse<List<SignDocumentDataDTO>> resp = taskWorkOperationsGetDocumentForSignOperationWithHttpInfo(taskWorkId, signOperationId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param taskWorkId  (required)
     * @param signOperationId  (required)
     * @return ApiResponse&lt;List&lt;SignDocumentDataDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SignDocumentDataDTO>> taskWorkOperationsGetDocumentForSignOperationWithHttpInfo(Integer taskWorkId, Integer signOperationId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsGetDocumentForSignOperationValidateBeforeCall(taskWorkId, signOperationId, null, null);
        Type localVarReturnType = new TypeToken<List<SignDocumentDataDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param taskWorkId  (required)
     * @param signOperationId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetDocumentForSignOperationAsync(Integer taskWorkId, Integer signOperationId, final ApiCallback<List<SignDocumentDataDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsGetDocumentForSignOperationValidateBeforeCall(taskWorkId, signOperationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SignDocumentDataDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds
     * @param taskExitCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsCall(TaskExitCodeDTO taskExitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskExitCode;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/getdynamicjoboperations/exitcode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsValidateBeforeCall(TaskExitCodeDTO taskExitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskExitCode' is set
        if (taskExitCode == null) {
            throw new ApiException("Missing the required parameter 'taskExitCode' when calling taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsCall(taskExitCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
     * 
     * @param taskExitCode  (required)
     * @return List&lt;TaskWorkDynamicJobOperationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TaskWorkDynamicJobOperationDTO> taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIds(TaskExitCodeDTO taskExitCode) throws ApiException {
        ApiResponse<List<TaskWorkDynamicJobOperationDTO>> resp = taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo(taskExitCode);
        return resp.getData();
    }

    /**
     * This call returns the dynamic job operation to execute for a taskwork list close action by an exit code
     * 
     * @param taskExitCode  (required)
     * @return ApiResponse&lt;List&lt;TaskWorkDynamicJobOperationDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TaskWorkDynamicJobOperationDTO>> taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsWithHttpInfo(TaskExitCodeDTO taskExitCode) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsValidateBeforeCall(taskExitCode, null, null);
        Type localVarReturnType = new TypeToken<List<TaskWorkDynamicJobOperationDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the dynamic job operation to execute for a taskwork list close action by an exit code (asynchronously)
     * 
     * @param taskExitCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsAsync(TaskExitCodeDTO taskExitCode, final ApiCallback<List<TaskWorkDynamicJobOperationDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsGetDynamicJobOperationsByExitCodeAndTaskWorkIdsValidateBeforeCall(taskExitCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TaskWorkDynamicJobOperationDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsGetFieldValuesByProcessVariable
     * @param processVariableId Id of the process variable (required)
     * @param taskWorkId Id of the task work (required)
     * @param processVariables Actual values of the process variables (for value dependant query) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetFieldValuesByProcessVariableCall(Integer processVariableId, Integer taskWorkId, VariablesValuesCriteriaDTO processVariables, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = processVariables;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/{taskWorkId}/processvariable/{processVariableId}/getValues"
            .replaceAll("\\{" + "processVariableId" + "\\}", apiClient.escapeString(processVariableId.toString()))
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsGetFieldValuesByProcessVariableValidateBeforeCall(Integer processVariableId, Integer taskWorkId, VariablesValuesCriteriaDTO processVariables, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processVariableId' is set
        if (processVariableId == null) {
            throw new ApiException("Missing the required parameter 'processVariableId' when calling taskWorkOperationsGetFieldValuesByProcessVariable(Async)");
        }
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkOperationsGetFieldValuesByProcessVariable(Async)");
        }
        
        // verify the required parameter 'processVariables' is set
        if (processVariables == null) {
            throw new ApiException("Missing the required parameter 'processVariables' when calling taskWorkOperationsGetFieldValuesByProcessVariable(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsGetFieldValuesByProcessVariableCall(processVariableId, taskWorkId, processVariables, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the possibile values for a process variable (combo or table)
     * 
     * @param processVariableId Id of the process variable (required)
     * @param taskWorkId Id of the task work (required)
     * @param processVariables Actual values of the process variables (for value dependant query) (required)
     * @return FieldValuesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldValuesDTO taskWorkOperationsGetFieldValuesByProcessVariable(Integer processVariableId, Integer taskWorkId, VariablesValuesCriteriaDTO processVariables) throws ApiException {
        ApiResponse<FieldValuesDTO> resp = taskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo(processVariableId, taskWorkId, processVariables);
        return resp.getData();
    }

    /**
     * This call returns the possibile values for a process variable (combo or table)
     * 
     * @param processVariableId Id of the process variable (required)
     * @param taskWorkId Id of the task work (required)
     * @param processVariables Actual values of the process variables (for value dependant query) (required)
     * @return ApiResponse&lt;FieldValuesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldValuesDTO> taskWorkOperationsGetFieldValuesByProcessVariableWithHttpInfo(Integer processVariableId, Integer taskWorkId, VariablesValuesCriteriaDTO processVariables) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsGetFieldValuesByProcessVariableValidateBeforeCall(processVariableId, taskWorkId, processVariables, null, null);
        Type localVarReturnType = new TypeToken<FieldValuesDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the possibile values for a process variable (combo or table) (asynchronously)
     * 
     * @param processVariableId Id of the process variable (required)
     * @param taskWorkId Id of the task work (required)
     * @param processVariables Actual values of the process variables (for value dependant query) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetFieldValuesByProcessVariableAsync(Integer processVariableId, Integer taskWorkId, VariablesValuesCriteriaDTO processVariables, final ApiCallback<FieldValuesDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsGetFieldValuesByProcessVariableValidateBeforeCall(processVariableId, taskWorkId, processVariables, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldValuesDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsGetFiltersByProcessVariables
     * @param processVariableId Id of the process variable (required)
     * @param processVariables Actual values of the process variables (for value dependant query) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetFiltersByProcessVariablesCall(Integer processVariableId, ProcessVariablesFieldsDTO processVariables, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = processVariables;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/processvariable/{processVariableId}/getFilters"
            .replaceAll("\\{" + "processVariableId" + "\\}", apiClient.escapeString(processVariableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsGetFiltersByProcessVariablesValidateBeforeCall(Integer processVariableId, ProcessVariablesFieldsDTO processVariables, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processVariableId' is set
        if (processVariableId == null) {
            throw new ApiException("Missing the required parameter 'processVariableId' when calling taskWorkOperationsGetFiltersByProcessVariables(Async)");
        }
        
        // verify the required parameter 'processVariables' is set
        if (processVariables == null) {
            throw new ApiException("Missing the required parameter 'processVariables' when calling taskWorkOperationsGetFiltersByProcessVariables(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsGetFiltersByProcessVariablesCall(processVariableId, processVariables, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the possibile filters for a table process variable
     * 
     * @param processVariableId Id of the process variable (required)
     * @param processVariables Actual values of the process variables (for value dependant query) (required)
     * @return FieldFilterConcreteDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldFilterConcreteDTO taskWorkOperationsGetFiltersByProcessVariables(Integer processVariableId, ProcessVariablesFieldsDTO processVariables) throws ApiException {
        ApiResponse<FieldFilterConcreteDTO> resp = taskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo(processVariableId, processVariables);
        return resp.getData();
    }

    /**
     * This call returns the possibile filters for a table process variable
     * 
     * @param processVariableId Id of the process variable (required)
     * @param processVariables Actual values of the process variables (for value dependant query) (required)
     * @return ApiResponse&lt;FieldFilterConcreteDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldFilterConcreteDTO> taskWorkOperationsGetFiltersByProcessVariablesWithHttpInfo(Integer processVariableId, ProcessVariablesFieldsDTO processVariables) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsGetFiltersByProcessVariablesValidateBeforeCall(processVariableId, processVariables, null, null);
        Type localVarReturnType = new TypeToken<FieldFilterConcreteDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the possibile filters for a table process variable (asynchronously)
     * 
     * @param processVariableId Id of the process variable (required)
     * @param processVariables Actual values of the process variables (for value dependant query) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetFiltersByProcessVariablesAsync(Integer processVariableId, ProcessVariablesFieldsDTO processVariables, final ApiCallback<FieldFilterConcreteDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsGetFiltersByProcessVariablesValidateBeforeCall(processVariableId, processVariables, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldFilterConcreteDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsGetProfessionalRoleByTaskIds
     * @param taskWorkIds Ids of the TaskWorks (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetProfessionalRoleByTaskIdsCall(List<Integer> taskWorkIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskWorkIds;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/professionalroleoperation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsGetProfessionalRoleByTaskIdsValidateBeforeCall(List<Integer> taskWorkIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkIds' is set
        if (taskWorkIds == null) {
            throw new ApiException("Missing the required parameter 'taskWorkIds' when calling taskWorkOperationsGetProfessionalRoleByTaskIds(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsGetProfessionalRoleByTaskIdsCall(taskWorkIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all professional role operations by multiple TaskWork
     * 
     * @param taskWorkIds Ids of the TaskWorks (required)
     * @return List&lt;ProfessionalRoleOperationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProfessionalRoleOperationDTO> taskWorkOperationsGetProfessionalRoleByTaskIds(List<Integer> taskWorkIds) throws ApiException {
        ApiResponse<List<ProfessionalRoleOperationDTO>> resp = taskWorkOperationsGetProfessionalRoleByTaskIdsWithHttpInfo(taskWorkIds);
        return resp.getData();
    }

    /**
     * This call returns all professional role operations by multiple TaskWork
     * 
     * @param taskWorkIds Ids of the TaskWorks (required)
     * @return ApiResponse&lt;List&lt;ProfessionalRoleOperationDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProfessionalRoleOperationDTO>> taskWorkOperationsGetProfessionalRoleByTaskIdsWithHttpInfo(List<Integer> taskWorkIds) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsGetProfessionalRoleByTaskIdsValidateBeforeCall(taskWorkIds, null, null);
        Type localVarReturnType = new TypeToken<List<ProfessionalRoleOperationDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all professional role operations by multiple TaskWork (asynchronously)
     * 
     * @param taskWorkIds Ids of the TaskWorks (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetProfessionalRoleByTaskIdsAsync(List<Integer> taskWorkIds, final ApiCallback<List<ProfessionalRoleOperationDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsGetProfessionalRoleByTaskIdsValidateBeforeCall(taskWorkIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProfessionalRoleOperationDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds
     * @param taskExitCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsCall(TaskExitCodeDTO taskExitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskExitCode;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/getprofessionalroleoperations/exitcode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsValidateBeforeCall(TaskExitCodeDTO taskExitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskExitCode' is set
        if (taskExitCode == null) {
            throw new ApiException("Missing the required parameter 'taskExitCode' when calling taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsCall(taskExitCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the professional role operation to execute for a taskwork list close action by an exit code
     * 
     * @param taskExitCode  (required)
     * @return List&lt;ProfessionalRoleOperationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProfessionalRoleOperationDTO> taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIds(TaskExitCodeDTO taskExitCode) throws ApiException {
        ApiResponse<List<ProfessionalRoleOperationDTO>> resp = taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo(taskExitCode);
        return resp.getData();
    }

    /**
     * This call returns the professional role operation to execute for a taskwork list close action by an exit code
     * 
     * @param taskExitCode  (required)
     * @return ApiResponse&lt;List&lt;ProfessionalRoleOperationDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProfessionalRoleOperationDTO>> taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsWithHttpInfo(TaskExitCodeDTO taskExitCode) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsValidateBeforeCall(taskExitCode, null, null);
        Type localVarReturnType = new TypeToken<List<ProfessionalRoleOperationDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the professional role operation to execute for a taskwork list close action by an exit code (asynchronously)
     * 
     * @param taskExitCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsAsync(TaskExitCodeDTO taskExitCode, final ApiCallback<List<ProfessionalRoleOperationDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsGetProfessionalRoleOperationsByExitCodeAndTaskWorkIdsValidateBeforeCall(taskExitCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProfessionalRoleOperationDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsGetSelectedUsersForDynamicJob
     * @param dynamicJobUser Id of the dynamic job (required)
     * @param processId Id of the process (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetSelectedUsersForDynamicJobCall(Integer dynamicJobUser, Integer processId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/dynamicjob/{dynamicJobUser}/byprocessid/{processId}"
            .replaceAll("\\{" + "dynamicJobUser" + "\\}", apiClient.escapeString(dynamicJobUser.toString()))
            .replaceAll("\\{" + "processId" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsGetSelectedUsersForDynamicJobValidateBeforeCall(Integer dynamicJobUser, Integer processId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dynamicJobUser' is set
        if (dynamicJobUser == null) {
            throw new ApiException("Missing the required parameter 'dynamicJobUser' when calling taskWorkOperationsGetSelectedUsersForDynamicJob(Async)");
        }
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling taskWorkOperationsGetSelectedUsersForDynamicJob(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsGetSelectedUsersForDynamicJobCall(dynamicJobUser, processId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the selected users list for a dynamic job in a process
     * 
     * @param dynamicJobUser Id of the dynamic job (required)
     * @param processId Id of the process (required)
     * @return List&lt;UserCompleteDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserCompleteDTO> taskWorkOperationsGetSelectedUsersForDynamicJob(Integer dynamicJobUser, Integer processId) throws ApiException {
        ApiResponse<List<UserCompleteDTO>> resp = taskWorkOperationsGetSelectedUsersForDynamicJobWithHttpInfo(dynamicJobUser, processId);
        return resp.getData();
    }

    /**
     * This call returns the selected users list for a dynamic job in a process
     * 
     * @param dynamicJobUser Id of the dynamic job (required)
     * @param processId Id of the process (required)
     * @return ApiResponse&lt;List&lt;UserCompleteDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserCompleteDTO>> taskWorkOperationsGetSelectedUsersForDynamicJobWithHttpInfo(Integer dynamicJobUser, Integer processId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsGetSelectedUsersForDynamicJobValidateBeforeCall(dynamicJobUser, processId, null, null);
        Type localVarReturnType = new TypeToken<List<UserCompleteDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the selected users list for a dynamic job in a process (asynchronously)
     * 
     * @param dynamicJobUser Id of the dynamic job (required)
     * @param processId Id of the process (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetSelectedUsersForDynamicJobAsync(Integer dynamicJobUser, Integer processId, final ApiCallback<List<UserCompleteDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsGetSelectedUsersForDynamicJobValidateBeforeCall(dynamicJobUser, processId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserCompleteDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsGetUsersForDynamicJob
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetUsersForDynamicJobCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/dynamicjobusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsGetUsersForDynamicJobValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = taskWorkOperationsGetUsersForDynamicJobCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns al possibile user for a dynamic job attribution
     * 
     * @return List&lt;UserCompleteDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserCompleteDTO> taskWorkOperationsGetUsersForDynamicJob() throws ApiException {
        ApiResponse<List<UserCompleteDTO>> resp = taskWorkOperationsGetUsersForDynamicJobWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns al possibile user for a dynamic job attribution
     * 
     * @return ApiResponse&lt;List&lt;UserCompleteDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserCompleteDTO>> taskWorkOperationsGetUsersForDynamicJobWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsGetUsersForDynamicJobValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<UserCompleteDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns al possibile user for a dynamic job attribution (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetUsersForDynamicJobAsync(final ApiCallback<List<UserCompleteDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsGetUsersForDynamicJobValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserCompleteDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsGetUsersForProfessionalRoleSelection
     * @param taskWorkId Id of the task work (required)
     * @param professionalRoleId Id of the professional role (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetUsersForProfessionalRoleSelectionCall(Integer taskWorkId, Integer professionalRoleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/usersbytaskwork/{taskWorkId}"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "professionalRoleId" + "\\}", apiClient.escapeString(professionalRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsGetUsersForProfessionalRoleSelectionValidateBeforeCall(Integer taskWorkId, Integer professionalRoleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkOperationsGetUsersForProfessionalRoleSelection(Async)");
        }
        
        // verify the required parameter 'professionalRoleId' is set
        if (professionalRoleId == null) {
            throw new ApiException("Missing the required parameter 'professionalRoleId' when calling taskWorkOperationsGetUsersForProfessionalRoleSelection(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsGetUsersForProfessionalRoleSelectionCall(taskWorkId, professionalRoleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the professional role possibile users for a professional role operation
     * 
     * @param taskWorkId Id of the task work (required)
     * @param professionalRoleId Id of the professional role (required)
     * @return List&lt;UserCompleteDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserCompleteDTO> taskWorkOperationsGetUsersForProfessionalRoleSelection(Integer taskWorkId, Integer professionalRoleId) throws ApiException {
        ApiResponse<List<UserCompleteDTO>> resp = taskWorkOperationsGetUsersForProfessionalRoleSelectionWithHttpInfo(taskWorkId, professionalRoleId);
        return resp.getData();
    }

    /**
     * This call returns the professional role possibile users for a professional role operation
     * 
     * @param taskWorkId Id of the task work (required)
     * @param professionalRoleId Id of the professional role (required)
     * @return ApiResponse&lt;List&lt;UserCompleteDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserCompleteDTO>> taskWorkOperationsGetUsersForProfessionalRoleSelectionWithHttpInfo(Integer taskWorkId, Integer professionalRoleId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsGetUsersForProfessionalRoleSelectionValidateBeforeCall(taskWorkId, professionalRoleId, null, null);
        Type localVarReturnType = new TypeToken<List<UserCompleteDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the professional role possibile users for a professional role operation (asynchronously)
     * 
     * @param taskWorkId Id of the task work (required)
     * @param professionalRoleId Id of the professional role (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsGetUsersForProfessionalRoleSelectionAsync(Integer taskWorkId, Integer professionalRoleId, final ApiCallback<List<UserCompleteDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsGetUsersForProfessionalRoleSelectionValidateBeforeCall(taskWorkId, professionalRoleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserCompleteDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsSetDynamicJob
     * @param dynamicJobId Id of the dynamic job (required)
     * @param taskWorkId Id of the task work (required)
     * @param users users list to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsSetDynamicJobCall(Integer dynamicJobId, Integer taskWorkId, List<UserCompleteDTO> users, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = users;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/dynamicjob/{dynamicJobId}/taskwork/{taskWorkId}"
            .replaceAll("\\{" + "dynamicJobId" + "\\}", apiClient.escapeString(dynamicJobId.toString()))
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsSetDynamicJobValidateBeforeCall(Integer dynamicJobId, Integer taskWorkId, List<UserCompleteDTO> users, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dynamicJobId' is set
        if (dynamicJobId == null) {
            throw new ApiException("Missing the required parameter 'dynamicJobId' when calling taskWorkOperationsSetDynamicJob(Async)");
        }
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkOperationsSetDynamicJob(Async)");
        }
        
        // verify the required parameter 'users' is set
        if (users == null) {
            throw new ApiException("Missing the required parameter 'users' when calling taskWorkOperationsSetDynamicJob(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsSetDynamicJobCall(dynamicJobId, taskWorkId, users, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call sets the users for a process dynamic job
     * 
     * @param dynamicJobId Id of the dynamic job (required)
     * @param taskWorkId Id of the task work (required)
     * @param users users list to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkOperationsSetDynamicJob(Integer dynamicJobId, Integer taskWorkId, List<UserCompleteDTO> users) throws ApiException {
        taskWorkOperationsSetDynamicJobWithHttpInfo(dynamicJobId, taskWorkId, users);
    }

    /**
     * This call sets the users for a process dynamic job
     * 
     * @param dynamicJobId Id of the dynamic job (required)
     * @param taskWorkId Id of the task work (required)
     * @param users users list to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkOperationsSetDynamicJobWithHttpInfo(Integer dynamicJobId, Integer taskWorkId, List<UserCompleteDTO> users) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsSetDynamicJobValidateBeforeCall(dynamicJobId, taskWorkId, users, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call sets the users for a process dynamic job (asynchronously)
     * 
     * @param dynamicJobId Id of the dynamic job (required)
     * @param taskWorkId Id of the task work (required)
     * @param users users list to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsSetDynamicJobAsync(Integer dynamicJobId, Integer taskWorkId, List<UserCompleteDTO> users, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsSetDynamicJobValidateBeforeCall(dynamicJobId, taskWorkId, users, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsSetDynamicJobMultiple
     * @param dynamicJobMultipleSetRequest Request for multiple dynamic job set (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsSetDynamicJobMultipleCall(DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dynamicJobMultipleSetRequest;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/dynamicjobmultiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsSetDynamicJobMultipleValidateBeforeCall(DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dynamicJobMultipleSetRequest' is set
        if (dynamicJobMultipleSetRequest == null) {
            throw new ApiException("Missing the required parameter 'dynamicJobMultipleSetRequest' when calling taskWorkOperationsSetDynamicJobMultiple(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsSetDynamicJobMultipleCall(dynamicJobMultipleSetRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call sets the users for multiple process dynamic job
     * 
     * @param dynamicJobMultipleSetRequest Request for multiple dynamic job set (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkOperationsSetDynamicJobMultiple(DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest) throws ApiException {
        taskWorkOperationsSetDynamicJobMultipleWithHttpInfo(dynamicJobMultipleSetRequest);
    }

    /**
     * This call sets the users for multiple process dynamic job
     * 
     * @param dynamicJobMultipleSetRequest Request for multiple dynamic job set (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkOperationsSetDynamicJobMultipleWithHttpInfo(DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsSetDynamicJobMultipleValidateBeforeCall(dynamicJobMultipleSetRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call sets the users for multiple process dynamic job (asynchronously)
     * 
     * @param dynamicJobMultipleSetRequest Request for multiple dynamic job set (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsSetDynamicJobMultipleAsync(DynamicJobMultipleSetRequestDTO dynamicJobMultipleSetRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsSetDynamicJobMultipleValidateBeforeCall(dynamicJobMultipleSetRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsSetProcessVariableValueByTaskWorkId
     * @param taskWorkId Id of the task work (required)
     * @param processVariables Process variables informations (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsSetProcessVariableValueByTaskWorkIdCall(Integer taskWorkId, ProcessVariablesFieldsDTO processVariables, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = processVariables;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/{taskWorkId}/setprocessvariables"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsSetProcessVariableValueByTaskWorkIdValidateBeforeCall(Integer taskWorkId, ProcessVariablesFieldsDTO processVariables, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkOperationsSetProcessVariableValueByTaskWorkId(Async)");
        }
        
        // verify the required parameter 'processVariables' is set
        if (processVariables == null) {
            throw new ApiException("Missing the required parameter 'processVariables' when calling taskWorkOperationsSetProcessVariableValueByTaskWorkId(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsSetProcessVariableValueByTaskWorkIdCall(taskWorkId, processVariables, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call sets the values for the process variables
     * 
     * @param taskWorkId Id of the task work (required)
     * @param processVariables Process variables informations (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkOperationsSetProcessVariableValueByTaskWorkId(Integer taskWorkId, ProcessVariablesFieldsDTO processVariables) throws ApiException {
        taskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo(taskWorkId, processVariables);
    }

    /**
     * This call sets the values for the process variables
     * 
     * @param taskWorkId Id of the task work (required)
     * @param processVariables Process variables informations (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkOperationsSetProcessVariableValueByTaskWorkIdWithHttpInfo(Integer taskWorkId, ProcessVariablesFieldsDTO processVariables) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsSetProcessVariableValueByTaskWorkIdValidateBeforeCall(taskWorkId, processVariables, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call sets the values for the process variables (asynchronously)
     * 
     * @param taskWorkId Id of the task work (required)
     * @param processVariables Process variables informations (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsSetProcessVariableValueByTaskWorkIdAsync(Integer taskWorkId, ProcessVariablesFieldsDTO processVariables, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsSetProcessVariableValueByTaskWorkIdValidateBeforeCall(taskWorkId, processVariables, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsSetProfessionalRoleByTaskIds
     * @param professionalRoleId Id of the professional role (required)
     * @param userToAssignId If of user (required)
     * @param taskWorkIds List of taskwork id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsSetProfessionalRoleByTaskIdsCall(Integer professionalRoleId, Integer userToAssignId, List<Integer> taskWorkIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskWorkIds;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/{userToAssignId}"
            .replaceAll("\\{" + "professionalRoleId" + "\\}", apiClient.escapeString(professionalRoleId.toString()))
            .replaceAll("\\{" + "userToAssignId" + "\\}", apiClient.escapeString(userToAssignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsSetProfessionalRoleByTaskIdsValidateBeforeCall(Integer professionalRoleId, Integer userToAssignId, List<Integer> taskWorkIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'professionalRoleId' is set
        if (professionalRoleId == null) {
            throw new ApiException("Missing the required parameter 'professionalRoleId' when calling taskWorkOperationsSetProfessionalRoleByTaskIds(Async)");
        }
        
        // verify the required parameter 'userToAssignId' is set
        if (userToAssignId == null) {
            throw new ApiException("Missing the required parameter 'userToAssignId' when calling taskWorkOperationsSetProfessionalRoleByTaskIds(Async)");
        }
        
        // verify the required parameter 'taskWorkIds' is set
        if (taskWorkIds == null) {
            throw new ApiException("Missing the required parameter 'taskWorkIds' when calling taskWorkOperationsSetProfessionalRoleByTaskIds(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsSetProfessionalRoleByTaskIdsCall(professionalRoleId, userToAssignId, taskWorkIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call sets the professional roles users for multiple TaskWork Ids
     * 
     * @param professionalRoleId Id of the professional role (required)
     * @param userToAssignId If of user (required)
     * @param taskWorkIds List of taskwork id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkOperationsSetProfessionalRoleByTaskIds(Integer professionalRoleId, Integer userToAssignId, List<Integer> taskWorkIds) throws ApiException {
        taskWorkOperationsSetProfessionalRoleByTaskIdsWithHttpInfo(professionalRoleId, userToAssignId, taskWorkIds);
    }

    /**
     * This call sets the professional roles users for multiple TaskWork Ids
     * 
     * @param professionalRoleId Id of the professional role (required)
     * @param userToAssignId If of user (required)
     * @param taskWorkIds List of taskwork id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkOperationsSetProfessionalRoleByTaskIdsWithHttpInfo(Integer professionalRoleId, Integer userToAssignId, List<Integer> taskWorkIds) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsSetProfessionalRoleByTaskIdsValidateBeforeCall(professionalRoleId, userToAssignId, taskWorkIds, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call sets the professional roles users for multiple TaskWork Ids (asynchronously)
     * 
     * @param professionalRoleId Id of the professional role (required)
     * @param userToAssignId If of user (required)
     * @param taskWorkIds List of taskwork id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsSetProfessionalRoleByTaskIdsAsync(Integer professionalRoleId, Integer userToAssignId, List<Integer> taskWorkIds, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsSetProfessionalRoleByTaskIdsValidateBeforeCall(professionalRoleId, userToAssignId, taskWorkIds, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsSetUsersForProfessionalRoleSelection
     * @param taskWorkId Id of the task work (required)
     * @param professionalRoleId Id of the professional role (required)
     * @param userId Id of the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsSetUsersForProfessionalRoleSelectionCall(Integer taskWorkId, Integer professionalRoleId, Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/setuserbytaskwork/{taskWorkId}/{userId}"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "professionalRoleId" + "\\}", apiClient.escapeString(professionalRoleId.toString()))
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsSetUsersForProfessionalRoleSelectionValidateBeforeCall(Integer taskWorkId, Integer professionalRoleId, Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkOperationsSetUsersForProfessionalRoleSelection(Async)");
        }
        
        // verify the required parameter 'professionalRoleId' is set
        if (professionalRoleId == null) {
            throw new ApiException("Missing the required parameter 'professionalRoleId' when calling taskWorkOperationsSetUsersForProfessionalRoleSelection(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling taskWorkOperationsSetUsersForProfessionalRoleSelection(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsSetUsersForProfessionalRoleSelectionCall(taskWorkId, professionalRoleId, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call sets the user for a professional role operation
     * 
     * @param taskWorkId Id of the task work (required)
     * @param professionalRoleId Id of the professional role (required)
     * @param userId Id of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkOperationsSetUsersForProfessionalRoleSelection(Integer taskWorkId, Integer professionalRoleId, Integer userId) throws ApiException {
        taskWorkOperationsSetUsersForProfessionalRoleSelectionWithHttpInfo(taskWorkId, professionalRoleId, userId);
    }

    /**
     * This call sets the user for a professional role operation
     * 
     * @param taskWorkId Id of the task work (required)
     * @param professionalRoleId Id of the professional role (required)
     * @param userId Id of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkOperationsSetUsersForProfessionalRoleSelectionWithHttpInfo(Integer taskWorkId, Integer professionalRoleId, Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsSetUsersForProfessionalRoleSelectionValidateBeforeCall(taskWorkId, professionalRoleId, userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call sets the user for a professional role operation (asynchronously)
     * 
     * @param taskWorkId Id of the task work (required)
     * @param professionalRoleId Id of the professional role (required)
     * @param userId Id of the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsSetUsersForProfessionalRoleSelectionAsync(Integer taskWorkId, Integer professionalRoleId, Integer userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsSetUsersForProfessionalRoleSelectionValidateBeforeCall(taskWorkId, professionalRoleId, userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsTaskWorkCommandExecute
     * @param taskWorkId Task id of the operation (required)
     * @param taskWorkCommandId Id of the command operation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsTaskWorkCommandExecuteCall(Integer taskWorkId, Integer taskWorkCommandId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/{taskWorkId}/taskworkcommand/{taskWorkCommandId}/execute"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "taskWorkCommandId" + "\\}", apiClient.escapeString(taskWorkCommandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsTaskWorkCommandExecuteValidateBeforeCall(Integer taskWorkId, Integer taskWorkCommandId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkOperationsTaskWorkCommandExecute(Async)");
        }
        
        // verify the required parameter 'taskWorkCommandId' is set
        if (taskWorkCommandId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkCommandId' when calling taskWorkOperationsTaskWorkCommandExecute(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsTaskWorkCommandExecuteCall(taskWorkId, taskWorkCommandId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * this call executes a command task operation
     * 
     * @param taskWorkId Task id of the operation (required)
     * @param taskWorkCommandId Id of the command operation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkOperationsTaskWorkCommandExecute(Integer taskWorkId, Integer taskWorkCommandId) throws ApiException {
        taskWorkOperationsTaskWorkCommandExecuteWithHttpInfo(taskWorkId, taskWorkCommandId);
    }

    /**
     * this call executes a command task operation
     * 
     * @param taskWorkId Task id of the operation (required)
     * @param taskWorkCommandId Id of the command operation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkOperationsTaskWorkCommandExecuteWithHttpInfo(Integer taskWorkId, Integer taskWorkCommandId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsTaskWorkCommandExecuteValidateBeforeCall(taskWorkId, taskWorkCommandId, null, null);
        return apiClient.execute(call);
    }

    /**
     * this call executes a command task operation (asynchronously)
     * 
     * @param taskWorkId Task id of the operation (required)
     * @param taskWorkCommandId Id of the command operation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsTaskWorkCommandExecuteAsync(Integer taskWorkId, Integer taskWorkCommandId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsTaskWorkCommandExecuteValidateBeforeCall(taskWorkId, taskWorkCommandId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskWorkOperationsUnSetProfessionalRoleSelection
     * @param professionalRoleId Id of the professional role (required)
     * @param taskWorkId Id of the task work (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsUnSetProfessionalRoleSelectionCall(Integer professionalRoleId, Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskOperations/professionalroleoperation/{professionalRoleId}/bytaskwork/{taskWorkId}"
            .replaceAll("\\{" + "professionalRoleId" + "\\}", apiClient.escapeString(professionalRoleId.toString()))
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkOperationsUnSetProfessionalRoleSelectionValidateBeforeCall(Integer professionalRoleId, Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'professionalRoleId' is set
        if (professionalRoleId == null) {
            throw new ApiException("Missing the required parameter 'professionalRoleId' when calling taskWorkOperationsUnSetProfessionalRoleSelection(Async)");
        }
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkOperationsUnSetProfessionalRoleSelection(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkOperationsUnSetProfessionalRoleSelectionCall(professionalRoleId, taskWorkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes the professional role actual value
     * 
     * @param professionalRoleId Id of the professional role (required)
     * @param taskWorkId Id of the task work (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkOperationsUnSetProfessionalRoleSelection(Integer professionalRoleId, Integer taskWorkId) throws ApiException {
        taskWorkOperationsUnSetProfessionalRoleSelectionWithHttpInfo(professionalRoleId, taskWorkId);
    }

    /**
     * This call deletes the professional role actual value
     * 
     * @param professionalRoleId Id of the professional role (required)
     * @param taskWorkId Id of the task work (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkOperationsUnSetProfessionalRoleSelectionWithHttpInfo(Integer professionalRoleId, Integer taskWorkId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkOperationsUnSetProfessionalRoleSelectionValidateBeforeCall(professionalRoleId, taskWorkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes the professional role actual value (asynchronously)
     * 
     * @param professionalRoleId Id of the professional role (required)
     * @param taskWorkId Id of the task work (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkOperationsUnSetProfessionalRoleSelectionAsync(Integer professionalRoleId, Integer taskWorkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkOperationsUnSetProfessionalRoleSelectionValidateBeforeCall(professionalRoleId, taskWorkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
