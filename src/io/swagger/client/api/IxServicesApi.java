/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccumulationPackageDTO;
import io.swagger.client.model.AccumulationPackageDeleteStatus;
import io.swagger.client.model.AccumulationPackageDocumentDeleteStatus;
import io.swagger.client.model.AccumulationPackageDocumentValidationDTO;
import org.joda.time.DateTime;
import io.swagger.client.model.IxCeDocumentCompleteDTO;
import io.swagger.client.model.IxCeDocumentDTO;
import io.swagger.client.model.IxFeDocumentCompleteDTO;
import io.swagger.client.model.IxFeSendRequestDTO;
import io.swagger.client.model.IxFeSendResponseDTO;
import io.swagger.client.model.SendOutcomeRequestDTO;
import io.swagger.client.model.SendToIxCeRequestDTO;
import io.swagger.client.model.SendToIxFeSignRequiredRequestDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IxServicesApi {
    private ApiClient apiClient;

    public IxServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IxServicesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ixServicesCanDeleteAccumulationPackage
     * @param accumulationPackageId The id of the accumulation package (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesCanDeleteAccumulationPackageCall(Integer accumulationPackageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IxServices/{accumulationPackageId}/CanDelete"
            .replaceAll("\\{" + "accumulationPackageId" + "\\}", apiClient.escapeString(accumulationPackageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesCanDeleteAccumulationPackageValidateBeforeCall(Integer accumulationPackageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accumulationPackageId' is set
        if (accumulationPackageId == null) {
            throw new ApiException("Missing the required parameter 'accumulationPackageId' when calling ixServicesCanDeleteAccumulationPackage(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesCanDeleteAccumulationPackageCall(accumulationPackageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This method return the possibility for user to delete a accumulation package
     * 
     * @param accumulationPackageId The id of the accumulation package (required)
     * @return AccumulationPackageDeleteStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccumulationPackageDeleteStatus ixServicesCanDeleteAccumulationPackage(Integer accumulationPackageId) throws ApiException {
        ApiResponse<AccumulationPackageDeleteStatus> resp = ixServicesCanDeleteAccumulationPackageWithHttpInfo(accumulationPackageId);
        return resp.getData();
    }

    /**
     * This method return the possibility for user to delete a accumulation package
     * 
     * @param accumulationPackageId The id of the accumulation package (required)
     * @return ApiResponse&lt;AccumulationPackageDeleteStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccumulationPackageDeleteStatus> ixServicesCanDeleteAccumulationPackageWithHttpInfo(Integer accumulationPackageId) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesCanDeleteAccumulationPackageValidateBeforeCall(accumulationPackageId, null, null);
        Type localVarReturnType = new TypeToken<AccumulationPackageDeleteStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This method return the possibility for user to delete a accumulation package (asynchronously)
     * 
     * @param accumulationPackageId The id of the accumulation package (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesCanDeleteAccumulationPackageAsync(Integer accumulationPackageId, final ApiCallback<AccumulationPackageDeleteStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesCanDeleteAccumulationPackageValidateBeforeCall(accumulationPackageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccumulationPackageDeleteStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ixServicesCanDeleteAccumulationPackageDocument
     * @param accumulationPackageDocumentId The code of the accumulation package document (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesCanDeleteAccumulationPackageDocumentCall(Integer accumulationPackageDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IxServices/Document/{accumulationPackageDocumentId}/CanDelete"
            .replaceAll("\\{" + "accumulationPackageDocumentId" + "\\}", apiClient.escapeString(accumulationPackageDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesCanDeleteAccumulationPackageDocumentValidateBeforeCall(Integer accumulationPackageDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accumulationPackageDocumentId' is set
        if (accumulationPackageDocumentId == null) {
            throw new ApiException("Missing the required parameter 'accumulationPackageDocumentId' when calling ixServicesCanDeleteAccumulationPackageDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesCanDeleteAccumulationPackageDocumentCall(accumulationPackageDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This method return the possibility for user to delete a document in an accumulation package
     * 
     * @param accumulationPackageDocumentId The code of the accumulation package document (required)
     * @return AccumulationPackageDocumentDeleteStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccumulationPackageDocumentDeleteStatus ixServicesCanDeleteAccumulationPackageDocument(Integer accumulationPackageDocumentId) throws ApiException {
        ApiResponse<AccumulationPackageDocumentDeleteStatus> resp = ixServicesCanDeleteAccumulationPackageDocumentWithHttpInfo(accumulationPackageDocumentId);
        return resp.getData();
    }

    /**
     * This method return the possibility for user to delete a document in an accumulation package
     * 
     * @param accumulationPackageDocumentId The code of the accumulation package document (required)
     * @return ApiResponse&lt;AccumulationPackageDocumentDeleteStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccumulationPackageDocumentDeleteStatus> ixServicesCanDeleteAccumulationPackageDocumentWithHttpInfo(Integer accumulationPackageDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesCanDeleteAccumulationPackageDocumentValidateBeforeCall(accumulationPackageDocumentId, null, null);
        Type localVarReturnType = new TypeToken<AccumulationPackageDocumentDeleteStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This method return the possibility for user to delete a document in an accumulation package (asynchronously)
     * 
     * @param accumulationPackageDocumentId The code of the accumulation package document (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesCanDeleteAccumulationPackageDocumentAsync(Integer accumulationPackageDocumentId, final ApiCallback<AccumulationPackageDocumentDeleteStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesCanDeleteAccumulationPackageDocumentValidateBeforeCall(accumulationPackageDocumentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccumulationPackageDocumentDeleteStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ixServicesDeleteAccumulationPackage
     * @param accumulationPackageId The id of the package (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesDeleteAccumulationPackageCall(Integer accumulationPackageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IxServices/{accumulationPackageId}"
            .replaceAll("\\{" + "accumulationPackageId" + "\\}", apiClient.escapeString(accumulationPackageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesDeleteAccumulationPackageValidateBeforeCall(Integer accumulationPackageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accumulationPackageId' is set
        if (accumulationPackageId == null) {
            throw new ApiException("Missing the required parameter 'accumulationPackageId' when calling ixServicesDeleteAccumulationPackage(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesDeleteAccumulationPackageCall(accumulationPackageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This method deletes a accumulation package
     * 
     * @param accumulationPackageId The id of the package (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ixServicesDeleteAccumulationPackage(Integer accumulationPackageId) throws ApiException {
        ixServicesDeleteAccumulationPackageWithHttpInfo(accumulationPackageId);
    }

    /**
     * This method deletes a accumulation package
     * 
     * @param accumulationPackageId The id of the package (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ixServicesDeleteAccumulationPackageWithHttpInfo(Integer accumulationPackageId) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesDeleteAccumulationPackageValidateBeforeCall(accumulationPackageId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This method deletes a accumulation package (asynchronously)
     * 
     * @param accumulationPackageId The id of the package (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesDeleteAccumulationPackageAsync(Integer accumulationPackageId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesDeleteAccumulationPackageValidateBeforeCall(accumulationPackageId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ixServicesDeleteAccumulationPackageDocument
     * @param accumulationPackageDocumentId The id of the document (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesDeleteAccumulationPackageDocumentCall(Integer accumulationPackageDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IxServices/Document/{accumulationPackageDocumentId}"
            .replaceAll("\\{" + "accumulationPackageDocumentId" + "\\}", apiClient.escapeString(accumulationPackageDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesDeleteAccumulationPackageDocumentValidateBeforeCall(Integer accumulationPackageDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accumulationPackageDocumentId' is set
        if (accumulationPackageDocumentId == null) {
            throw new ApiException("Missing the required parameter 'accumulationPackageDocumentId' when calling ixServicesDeleteAccumulationPackageDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesDeleteAccumulationPackageDocumentCall(accumulationPackageDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This method deletes a document in an accumulation package
     * 
     * @param accumulationPackageDocumentId The id of the document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ixServicesDeleteAccumulationPackageDocument(Integer accumulationPackageDocumentId) throws ApiException {
        ixServicesDeleteAccumulationPackageDocumentWithHttpInfo(accumulationPackageDocumentId);
    }

    /**
     * This method deletes a document in an accumulation package
     * 
     * @param accumulationPackageDocumentId The id of the document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ixServicesDeleteAccumulationPackageDocumentWithHttpInfo(Integer accumulationPackageDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesDeleteAccumulationPackageDocumentValidateBeforeCall(accumulationPackageDocumentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This method deletes a document in an accumulation package (asynchronously)
     * 
     * @param accumulationPackageDocumentId The id of the document (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesDeleteAccumulationPackageDocumentAsync(Integer accumulationPackageDocumentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesDeleteAccumulationPackageDocumentValidateBeforeCall(accumulationPackageDocumentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ixServicesDetachAccumulationPackage
     * @param accumulationPackageId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesDetachAccumulationPackageCall(Integer accumulationPackageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IxServices/{accumulationPackageId}/Detach"
            .replaceAll("\\{" + "accumulationPackageId" + "\\}", apiClient.escapeString(accumulationPackageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesDetachAccumulationPackageValidateBeforeCall(Integer accumulationPackageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accumulationPackageId' is set
        if (accumulationPackageId == null) {
            throw new ApiException("Missing the required parameter 'accumulationPackageId' when calling ixServicesDetachAccumulationPackage(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesDetachAccumulationPackageCall(accumulationPackageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Detach the accumulation package from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2
     * 
     * @param accumulationPackageId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ixServicesDetachAccumulationPackage(Integer accumulationPackageId) throws ApiException {
        ixServicesDetachAccumulationPackageWithHttpInfo(accumulationPackageId);
    }

    /**
     * Detach the accumulation package from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2
     * 
     * @param accumulationPackageId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ixServicesDetachAccumulationPackageWithHttpInfo(Integer accumulationPackageId) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesDetachAccumulationPackageValidateBeforeCall(accumulationPackageId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Detach the accumulation package from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2 (asynchronously)
     * 
     * @param accumulationPackageId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesDetachAccumulationPackageAsync(Integer accumulationPackageId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesDetachAccumulationPackageValidateBeforeCall(accumulationPackageId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ixServicesDetachAccumulationPackageDocument
     * @param accumulationPackageDocumentId The code of the accumulation package document (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesDetachAccumulationPackageDocumentCall(Integer accumulationPackageDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IxServices/Document/{accumulationPackageDocumentId}/Detach"
            .replaceAll("\\{" + "accumulationPackageDocumentId" + "\\}", apiClient.escapeString(accumulationPackageDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesDetachAccumulationPackageDocumentValidateBeforeCall(Integer accumulationPackageDocumentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accumulationPackageDocumentId' is set
        if (accumulationPackageDocumentId == null) {
            throw new ApiException("Missing the required parameter 'accumulationPackageDocumentId' when calling ixServicesDetachAccumulationPackageDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesDetachAccumulationPackageDocumentCall(accumulationPackageDocumentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Detach the document from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2
     * 
     * @param accumulationPackageDocumentId The code of the accumulation package document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ixServicesDetachAccumulationPackageDocument(Integer accumulationPackageDocumentId) throws ApiException {
        ixServicesDetachAccumulationPackageDocumentWithHttpInfo(accumulationPackageDocumentId);
    }

    /**
     * Detach the document from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2
     * 
     * @param accumulationPackageDocumentId The code of the accumulation package document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ixServicesDetachAccumulationPackageDocumentWithHttpInfo(Integer accumulationPackageDocumentId) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesDetachAccumulationPackageDocumentValidateBeforeCall(accumulationPackageDocumentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Detach the document from the WebSuite service. This call is required if the call CanDelete returns DetachRequired &#x3D; 2 (asynchronously)
     * 
     * @param accumulationPackageDocumentId The code of the accumulation package document (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesDetachAccumulationPackageDocumentAsync(Integer accumulationPackageDocumentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesDetachAccumulationPackageDocumentValidateBeforeCall(accumulationPackageDocumentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ixServicesGetAccumulationPackageDocumentValidationByDate
     * @param startDate Start date (required)
     * @param endDate End date (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesGetAccumulationPackageDocumentValidationByDateCall(DateTime startDate, DateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IxServices/Validation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesGetAccumulationPackageDocumentValidationByDateValidateBeforeCall(DateTime startDate, DateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling ixServicesGetAccumulationPackageDocumentValidationByDate(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling ixServicesGetAccumulationPackageDocumentValidationByDate(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesGetAccumulationPackageDocumentValidationByDateCall(startDate, endDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call return the status of the validations for accumulation package documents in a range of date
     * 
     * @param startDate Start date (required)
     * @param endDate End date (required)
     * @return List&lt;AccumulationPackageDocumentValidationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AccumulationPackageDocumentValidationDTO> ixServicesGetAccumulationPackageDocumentValidationByDate(DateTime startDate, DateTime endDate) throws ApiException {
        ApiResponse<List<AccumulationPackageDocumentValidationDTO>> resp = ixServicesGetAccumulationPackageDocumentValidationByDateWithHttpInfo(startDate, endDate);
        return resp.getData();
    }

    /**
     * This call return the status of the validations for accumulation package documents in a range of date
     * 
     * @param startDate Start date (required)
     * @param endDate End date (required)
     * @return ApiResponse&lt;List&lt;AccumulationPackageDocumentValidationDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AccumulationPackageDocumentValidationDTO>> ixServicesGetAccumulationPackageDocumentValidationByDateWithHttpInfo(DateTime startDate, DateTime endDate) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesGetAccumulationPackageDocumentValidationByDateValidateBeforeCall(startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<List<AccumulationPackageDocumentValidationDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call return the status of the validations for accumulation package documents in a range of date (asynchronously)
     * 
     * @param startDate Start date (required)
     * @param endDate End date (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesGetAccumulationPackageDocumentValidationByDateAsync(DateTime startDate, DateTime endDate, final ApiCallback<List<AccumulationPackageDocumentValidationDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesGetAccumulationPackageDocumentValidationByDateValidateBeforeCall(startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AccumulationPackageDocumentValidationDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ixServicesGetByAoo
     * @param businessUnitCode The code of the business unit (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesGetByAooCall(String businessUnitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IxServices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (businessUnitCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("businessUnitCode", businessUnitCode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesGetByAooValidateBeforeCall(String businessUnitCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessUnitCode' is set
        if (businessUnitCode == null) {
            throw new ApiException("Missing the required parameter 'businessUnitCode' when calling ixServicesGetByAoo(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesGetByAooCall(businessUnitCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This method return the accumulation packages contained in IX-CE services
     * 
     * @param businessUnitCode The code of the business unit (required)
     * @return List&lt;AccumulationPackageDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AccumulationPackageDTO> ixServicesGetByAoo(String businessUnitCode) throws ApiException {
        ApiResponse<List<AccumulationPackageDTO>> resp = ixServicesGetByAooWithHttpInfo(businessUnitCode);
        return resp.getData();
    }

    /**
     * This method return the accumulation packages contained in IX-CE services
     * 
     * @param businessUnitCode The code of the business unit (required)
     * @return ApiResponse&lt;List&lt;AccumulationPackageDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AccumulationPackageDTO>> ixServicesGetByAooWithHttpInfo(String businessUnitCode) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesGetByAooValidateBeforeCall(businessUnitCode, null, null);
        Type localVarReturnType = new TypeToken<List<AccumulationPackageDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This method return the accumulation packages contained in IX-CE services (asynchronously)
     * 
     * @param businessUnitCode The code of the business unit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesGetByAooAsync(String businessUnitCode, final ApiCallback<List<AccumulationPackageDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesGetByAooValidateBeforeCall(businessUnitCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AccumulationPackageDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ixServicesGetDocumentsByAccumulationPackageId
     * @param accumulationPackageId The code of the accumulation package (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesGetDocumentsByAccumulationPackageIdCall(Integer accumulationPackageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IxServices/{accumulationPackageId}/Documents"
            .replaceAll("\\{" + "accumulationPackageId" + "\\}", apiClient.escapeString(accumulationPackageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesGetDocumentsByAccumulationPackageIdValidateBeforeCall(Integer accumulationPackageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accumulationPackageId' is set
        if (accumulationPackageId == null) {
            throw new ApiException("Missing the required parameter 'accumulationPackageId' when calling ixServicesGetDocumentsByAccumulationPackageId(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesGetDocumentsByAccumulationPackageIdCall(accumulationPackageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This method return the document contained in IX-CE accumulation packages
     * 
     * @param accumulationPackageId The code of the accumulation package (required)
     * @return List&lt;IxCeDocumentDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IxCeDocumentDTO> ixServicesGetDocumentsByAccumulationPackageId(Integer accumulationPackageId) throws ApiException {
        ApiResponse<List<IxCeDocumentDTO>> resp = ixServicesGetDocumentsByAccumulationPackageIdWithHttpInfo(accumulationPackageId);
        return resp.getData();
    }

    /**
     * This method return the document contained in IX-CE accumulation packages
     * 
     * @param accumulationPackageId The code of the accumulation package (required)
     * @return ApiResponse&lt;List&lt;IxCeDocumentDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IxCeDocumentDTO>> ixServicesGetDocumentsByAccumulationPackageIdWithHttpInfo(Integer accumulationPackageId) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesGetDocumentsByAccumulationPackageIdValidateBeforeCall(accumulationPackageId, null, null);
        Type localVarReturnType = new TypeToken<List<IxCeDocumentDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This method return the document contained in IX-CE accumulation packages (asynchronously)
     * 
     * @param accumulationPackageId The code of the accumulation package (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesGetDocumentsByAccumulationPackageIdAsync(Integer accumulationPackageId, final ApiCallback<List<IxCeDocumentDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesGetDocumentsByAccumulationPackageIdValidateBeforeCall(accumulationPackageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IxCeDocumentDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ixServicesGetIxCeCompleteDetailsByDocnumber
     * @param docnumber Docnumber (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesGetIxCeCompleteDetailsByDocnumberCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IxServices/Document/{docnumber}/IxCeInfo"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesGetIxCeCompleteDetailsByDocnumberValidateBeforeCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling ixServicesGetIxCeCompleteDetailsByDocnumber(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesGetIxCeCompleteDetailsByDocnumberCall(docnumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all the information about a document sent to IX-CE Service
     * 
     * @param docnumber Docnumber (required)
     * @return List&lt;IxCeDocumentCompleteDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IxCeDocumentCompleteDTO> ixServicesGetIxCeCompleteDetailsByDocnumber(Integer docnumber) throws ApiException {
        ApiResponse<List<IxCeDocumentCompleteDTO>> resp = ixServicesGetIxCeCompleteDetailsByDocnumberWithHttpInfo(docnumber);
        return resp.getData();
    }

    /**
     * This call returns all the information about a document sent to IX-CE Service
     * 
     * @param docnumber Docnumber (required)
     * @return ApiResponse&lt;List&lt;IxCeDocumentCompleteDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IxCeDocumentCompleteDTO>> ixServicesGetIxCeCompleteDetailsByDocnumberWithHttpInfo(Integer docnumber) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesGetIxCeCompleteDetailsByDocnumberValidateBeforeCall(docnumber, null, null);
        Type localVarReturnType = new TypeToken<List<IxCeDocumentCompleteDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all the information about a document sent to IX-CE Service (asynchronously)
     * 
     * @param docnumber Docnumber (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesGetIxCeCompleteDetailsByDocnumberAsync(Integer docnumber, final ApiCallback<List<IxCeDocumentCompleteDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesGetIxCeCompleteDetailsByDocnumberValidateBeforeCall(docnumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IxCeDocumentCompleteDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ixServicesGetIxFeCompleteDetailsByDocnumber
     * @param docnumber Docnumber (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesGetIxFeCompleteDetailsByDocnumberCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/IxServices/Document/{docnumber}/IxFeInfo"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesGetIxFeCompleteDetailsByDocnumberValidateBeforeCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling ixServicesGetIxFeCompleteDetailsByDocnumber(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesGetIxFeCompleteDetailsByDocnumberCall(docnumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all the information about a document sent to IX-FE Service
     * 
     * @param docnumber Docnumber (required)
     * @return List&lt;IxFeDocumentCompleteDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IxFeDocumentCompleteDTO> ixServicesGetIxFeCompleteDetailsByDocnumber(Integer docnumber) throws ApiException {
        ApiResponse<List<IxFeDocumentCompleteDTO>> resp = ixServicesGetIxFeCompleteDetailsByDocnumberWithHttpInfo(docnumber);
        return resp.getData();
    }

    /**
     * This call returns all the information about a document sent to IX-FE Service
     * 
     * @param docnumber Docnumber (required)
     * @return ApiResponse&lt;List&lt;IxFeDocumentCompleteDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IxFeDocumentCompleteDTO>> ixServicesGetIxFeCompleteDetailsByDocnumberWithHttpInfo(Integer docnumber) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesGetIxFeCompleteDetailsByDocnumberValidateBeforeCall(docnumber, null, null);
        Type localVarReturnType = new TypeToken<List<IxFeDocumentCompleteDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all the information about a document sent to IX-FE Service (asynchronously)
     * 
     * @param docnumber Docnumber (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesGetIxFeCompleteDetailsByDocnumberAsync(Integer docnumber, final ApiCallback<List<IxFeDocumentCompleteDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesGetIxFeCompleteDetailsByDocnumberValidateBeforeCall(docnumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IxFeDocumentCompleteDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ixServicesSendOutcomeByDocnumber
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesSendOutcomeByDocnumberCall(SendOutcomeRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/IxServices/SendOutcome";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesSendOutcomeByDocnumberValidateBeforeCall(SendOutcomeRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling ixServicesSendOutcomeByDocnumber(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesSendOutcomeByDocnumberCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call send an outcome value for a docnumber (for invoice from IX-CE service)
     * 
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ixServicesSendOutcomeByDocnumber(SendOutcomeRequestDTO request) throws ApiException {
        ixServicesSendOutcomeByDocnumberWithHttpInfo(request);
    }

    /**
     * This call send an outcome value for a docnumber (for invoice from IX-CE service)
     * 
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ixServicesSendOutcomeByDocnumberWithHttpInfo(SendOutcomeRequestDTO request) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesSendOutcomeByDocnumberValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call send an outcome value for a docnumber (for invoice from IX-CE service) (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesSendOutcomeByDocnumberAsync(SendOutcomeRequestDTO request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesSendOutcomeByDocnumberValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ixServicesSendToIx
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesSendToIxCall(IxFeSendRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/IxServices/SendToIxFe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesSendToIxValidateBeforeCall(IxFeSendRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling ixServicesSendToIx(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesSendToIxCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call send docnumbers to IX-FE services
     * 
     * @param request  (required)
     * @return IxFeSendResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IxFeSendResponseDTO ixServicesSendToIx(IxFeSendRequestDTO request) throws ApiException {
        ApiResponse<IxFeSendResponseDTO> resp = ixServicesSendToIxWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * This call send docnumbers to IX-FE services
     * 
     * @param request  (required)
     * @return ApiResponse&lt;IxFeSendResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IxFeSendResponseDTO> ixServicesSendToIxWithHttpInfo(IxFeSendRequestDTO request) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesSendToIxValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<IxFeSendResponseDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call send docnumbers to IX-FE services (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesSendToIxAsync(IxFeSendRequestDTO request, final ApiCallback<IxFeSendResponseDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesSendToIxValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IxFeSendResponseDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ixServicesSendToIxCe
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesSendToIxCeCall(SendToIxCeRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/IxServices/SendToIxCe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesSendToIxCeValidateBeforeCall(SendToIxCeRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling ixServicesSendToIxCe(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesSendToIxCeCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call send docnumbers to IX-CE services
     * 
     * @param request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ixServicesSendToIxCe(SendToIxCeRequestDTO request) throws ApiException {
        ixServicesSendToIxCeWithHttpInfo(request);
    }

    /**
     * This call send docnumbers to IX-CE services
     * 
     * @param request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ixServicesSendToIxCeWithHttpInfo(SendToIxCeRequestDTO request) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesSendToIxCeValidateBeforeCall(request, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call send docnumbers to IX-CE services (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesSendToIxCeAsync(SendToIxCeRequestDTO request, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesSendToIxCeValidateBeforeCall(request, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ixServicesSendToIxFeSignRequired
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ixServicesSendToIxFeSignRequiredCall(SendToIxFeSignRequiredRequestDto request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/IxServices/SendToIxFeSignRequired";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ixServicesSendToIxFeSignRequiredValidateBeforeCall(SendToIxFeSignRequiredRequestDto request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling ixServicesSendToIxFeSignRequired(Async)");
        }
        

        com.squareup.okhttp.Call call = ixServicesSendToIxFeSignRequiredCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Checks is the docnumber list must be signed before being sent to IX-FE
     * 
     * @param request  (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean ixServicesSendToIxFeSignRequired(SendToIxFeSignRequiredRequestDto request) throws ApiException {
        ApiResponse<Boolean> resp = ixServicesSendToIxFeSignRequiredWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Checks is the docnumber list must be signed before being sent to IX-FE
     * 
     * @param request  (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> ixServicesSendToIxFeSignRequiredWithHttpInfo(SendToIxFeSignRequiredRequestDto request) throws ApiException {
        com.squareup.okhttp.Call call = ixServicesSendToIxFeSignRequiredValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Checks is the docnumber list must be signed before being sent to IX-FE (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ixServicesSendToIxFeSignRequiredAsync(SendToIxFeSignRequiredRequestDto request, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ixServicesSendToIxFeSignRequiredValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
