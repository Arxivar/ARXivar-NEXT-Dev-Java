/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AddressBookDTO;
import io.swagger.client.model.AddressBookSearchCriteriaDTO;
import io.swagger.client.model.AddressBookSearchResultDTO;
import io.swagger.client.model.ContactDTO;
import io.swagger.client.model.PermissionsDTO;
import io.swagger.client.model.RubricaFieldDTO;
import io.swagger.client.model.UserProfileDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressBookApi {
    private ApiClient apiClient;

    public AddressBookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressBookApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addressBookAddressBookCanWriteByAddressBookId
     * @param addressbookId Identifier of the address book (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookAddressBookCanWriteByAddressBookIdCall(Integer addressbookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/canwrite/{addressbookId}"
            .replaceAll("\\{" + "addressbookId" + "\\}", apiClient.escapeString(addressbookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookAddressBookCanWriteByAddressBookIdValidateBeforeCall(Integer addressbookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addressbookId' is set
        if (addressbookId == null) {
            throw new ApiException("Missing the required parameter 'addressbookId' when calling addressBookAddressBookCanWriteByAddressBookId(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookAddressBookCanWriteByAddressBookIdCall(addressbookId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns true if the connected user can edit an address book
     * 
     * @param addressbookId Identifier of the address book (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean addressBookAddressBookCanWriteByAddressBookId(Integer addressbookId) throws ApiException {
        ApiResponse<Boolean> resp = addressBookAddressBookCanWriteByAddressBookIdWithHttpInfo(addressbookId);
        return resp.getData();
    }

    /**
     * This call returns true if the connected user can edit an address book
     * 
     * @param addressbookId Identifier of the address book (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> addressBookAddressBookCanWriteByAddressBookIdWithHttpInfo(Integer addressbookId) throws ApiException {
        com.squareup.okhttp.Call call = addressBookAddressBookCanWriteByAddressBookIdValidateBeforeCall(addressbookId, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns true if the connected user can edit an address book (asynchronously)
     * 
     * @param addressbookId Identifier of the address book (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookAddressBookCanWriteByAddressBookIdAsync(Integer addressbookId, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookAddressBookCanWriteByAddressBookIdValidateBeforeCall(addressbookId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookAddressBookCanWriteByCategoryId
     * @param addressbookCategoryId Identifier of address book category (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookAddressBookCanWriteByCategoryIdCall(Integer addressbookCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/canwritebycategory/{addressbookCategoryId}"
            .replaceAll("\\{" + "addressbookCategoryId" + "\\}", apiClient.escapeString(addressbookCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookAddressBookCanWriteByCategoryIdValidateBeforeCall(Integer addressbookCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addressbookCategoryId' is set
        if (addressbookCategoryId == null) {
            throw new ApiException("Missing the required parameter 'addressbookCategoryId' when calling addressBookAddressBookCanWriteByCategoryId(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookAddressBookCanWriteByCategoryIdCall(addressbookCategoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns true if the connected user can edit address books of a specified category
     * 
     * @param addressbookCategoryId Identifier of address book category (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean addressBookAddressBookCanWriteByCategoryId(Integer addressbookCategoryId) throws ApiException {
        ApiResponse<Boolean> resp = addressBookAddressBookCanWriteByCategoryIdWithHttpInfo(addressbookCategoryId);
        return resp.getData();
    }

    /**
     * This call returns true if the connected user can edit address books of a specified category
     * 
     * @param addressbookCategoryId Identifier of address book category (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> addressBookAddressBookCanWriteByCategoryIdWithHttpInfo(Integer addressbookCategoryId) throws ApiException {
        com.squareup.okhttp.Call call = addressBookAddressBookCanWriteByCategoryIdValidateBeforeCall(addressbookCategoryId, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns true if the connected user can edit address books of a specified category (asynchronously)
     * 
     * @param addressbookCategoryId Identifier of address book category (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookAddressBookCanWriteByCategoryIdAsync(Integer addressbookCategoryId, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookAddressBookCanWriteByCategoryIdValidateBeforeCall(addressbookCategoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookDeleteAddressBook
     * @param addressBookId AddressBook Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookDeleteAddressBookCall(Integer addressBookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/addressbook/{addressBookId}"
            .replaceAll("\\{" + "addressBookId" + "\\}", apiClient.escapeString(addressBookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookDeleteAddressBookValidateBeforeCall(Integer addressBookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addressBookId' is set
        if (addressBookId == null) {
            throw new ApiException("Missing the required parameter 'addressBookId' when calling addressBookDeleteAddressBook(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookDeleteAddressBookCall(addressBookId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes an addressbook by its Id
     * 
     * @param addressBookId AddressBook Id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addressBookDeleteAddressBook(Integer addressBookId) throws ApiException {
        addressBookDeleteAddressBookWithHttpInfo(addressBookId);
    }

    /**
     * This call deletes an addressbook by its Id
     * 
     * @param addressBookId AddressBook Id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addressBookDeleteAddressBookWithHttpInfo(Integer addressBookId) throws ApiException {
        com.squareup.okhttp.Call call = addressBookDeleteAddressBookValidateBeforeCall(addressBookId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes an addressbook by its Id (asynchronously)
     * 
     * @param addressBookId AddressBook Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookDeleteAddressBookAsync(Integer addressBookId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookDeleteAddressBookValidateBeforeCall(addressBookId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addressBookDeleteContact
     * @param contactId Identifier of contact to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookDeleteContactCall(Integer contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/contact/{contactId}"
            .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookDeleteContactValidateBeforeCall(Integer contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling addressBookDeleteContact(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookDeleteContactCall(contactId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a contact
     * 
     * @param contactId Identifier of contact to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addressBookDeleteContact(Integer contactId) throws ApiException {
        addressBookDeleteContactWithHttpInfo(contactId);
    }

    /**
     * This call deletes a contact
     * 
     * @param contactId Identifier of contact to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addressBookDeleteContactWithHttpInfo(Integer contactId) throws ApiException {
        com.squareup.okhttp.Call call = addressBookDeleteContactValidateBeforeCall(contactId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes a contact (asynchronously)
     * 
     * @param contactId Identifier of contact to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookDeleteContactAsync(Integer contactId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookDeleteContactValidateBeforeCall(contactId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addressBookGetAddressBookComboFieldValues
     * @param fieldName The field name of the combo (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookGetAddressBookComboFieldValuesCall(String fieldName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/addressbook/combovalues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fieldName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fieldName", fieldName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookGetAddressBookComboFieldValuesValidateBeforeCall(String fieldName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fieldName' is set
        if (fieldName == null) {
            throw new ApiException("Missing the required parameter 'fieldName' when calling addressBookGetAddressBookComboFieldValues(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookGetAddressBookComboFieldValuesCall(fieldName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the values for combo box address book additional field
     * 
     * @param fieldName The field name of the combo (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> addressBookGetAddressBookComboFieldValues(String fieldName) throws ApiException {
        ApiResponse<List<String>> resp = addressBookGetAddressBookComboFieldValuesWithHttpInfo(fieldName);
        return resp.getData();
    }

    /**
     * This call returns the values for combo box address book additional field
     * 
     * @param fieldName The field name of the combo (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> addressBookGetAddressBookComboFieldValuesWithHttpInfo(String fieldName) throws ApiException {
        com.squareup.okhttp.Call call = addressBookGetAddressBookComboFieldValuesValidateBeforeCall(fieldName, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the values for combo box address book additional field (asynchronously)
     * 
     * @param fieldName The field name of the combo (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookGetAddressBookComboFieldValuesAsync(String fieldName, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookGetAddressBookComboFieldValuesValidateBeforeCall(fieldName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookGetByAddressBookId
     * @param addressBookId Identifier of the adress book (required)
     * @param type Possible values:  0: To  1: From  2: Cc  3: Senders  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookGetByAddressBookIdCall(Integer addressBookId, Integer type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/AddressBook/{addressBookId}/UserProfile/{type}"
            .replaceAll("\\{" + "addressBookId" + "\\}", apiClient.escapeString(addressBookId.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookGetByAddressBookIdValidateBeforeCall(Integer addressBookId, Integer type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addressBookId' is set
        if (addressBookId == null) {
            throw new ApiException("Missing the required parameter 'addressBookId' when calling addressBookGetByAddressBookId(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addressBookGetByAddressBookId(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookGetByAddressBookIdCall(addressBookId, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns new profile data (for archiving purpose) by address book identifier
     * 
     * @param addressBookId Identifier of the adress book (required)
     * @param type Possible values:  0: To  1: From  2: Cc  3: Senders  (required)
     * @return UserProfileDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfileDTO addressBookGetByAddressBookId(Integer addressBookId, Integer type) throws ApiException {
        ApiResponse<UserProfileDTO> resp = addressBookGetByAddressBookIdWithHttpInfo(addressBookId, type);
        return resp.getData();
    }

    /**
     * This call returns new profile data (for archiving purpose) by address book identifier
     * 
     * @param addressBookId Identifier of the adress book (required)
     * @param type Possible values:  0: To  1: From  2: Cc  3: Senders  (required)
     * @return ApiResponse&lt;UserProfileDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfileDTO> addressBookGetByAddressBookIdWithHttpInfo(Integer addressBookId, Integer type) throws ApiException {
        com.squareup.okhttp.Call call = addressBookGetByAddressBookIdValidateBeforeCall(addressBookId, type, null, null);
        Type localVarReturnType = new TypeToken<UserProfileDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns new profile data (for archiving purpose) by address book identifier (asynchronously)
     * 
     * @param addressBookId Identifier of the adress book (required)
     * @param type Possible values:  0: To  1: From  2: Cc  3: Senders  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookGetByAddressBookIdAsync(Integer addressBookId, Integer type, final ApiCallback<UserProfileDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookGetByAddressBookIdValidateBeforeCall(addressBookId, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfileDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookGetByContactId
     * @param contactId Identifier of the contact (required)
     * @param type Possible values:  0: To  1: From  2: Cc  3: Senders  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookGetByContactIdCall(Integer contactId, Integer type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/Contact/{contactId}/UserProfile/{type}"
            .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookGetByContactIdValidateBeforeCall(Integer contactId, Integer type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling addressBookGetByContactId(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addressBookGetByContactId(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookGetByContactIdCall(contactId, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns new profile data (for archiving purpose) by contact identifier
     * 
     * @param contactId Identifier of the contact (required)
     * @param type Possible values:  0: To  1: From  2: Cc  3: Senders  (required)
     * @return UserProfileDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfileDTO addressBookGetByContactId(Integer contactId, Integer type) throws ApiException {
        ApiResponse<UserProfileDTO> resp = addressBookGetByContactIdWithHttpInfo(contactId, type);
        return resp.getData();
    }

    /**
     * This call returns new profile data (for archiving purpose) by contact identifier
     * 
     * @param contactId Identifier of the contact (required)
     * @param type Possible values:  0: To  1: From  2: Cc  3: Senders  (required)
     * @return ApiResponse&lt;UserProfileDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfileDTO> addressBookGetByContactIdWithHttpInfo(Integer contactId, Integer type) throws ApiException {
        com.squareup.okhttp.Call call = addressBookGetByContactIdValidateBeforeCall(contactId, type, null, null);
        Type localVarReturnType = new TypeToken<UserProfileDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns new profile data (for archiving purpose) by contact identifier (asynchronously)
     * 
     * @param contactId Identifier of the contact (required)
     * @param type Possible values:  0: To  1: From  2: Cc  3: Senders  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookGetByContactIdAsync(Integer contactId, Integer type, final ApiCallback<UserProfileDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookGetByContactIdValidateBeforeCall(contactId, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfileDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookGetById
     * @param addressBookId Identifier of the adress book (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookGetByIdCall(Integer addressBookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/addressbook/{addressBookId}"
            .replaceAll("\\{" + "addressBookId" + "\\}", apiClient.escapeString(addressBookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookGetByIdValidateBeforeCall(Integer addressBookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addressBookId' is set
        if (addressBookId == null) {
            throw new ApiException("Missing the required parameter 'addressBookId' when calling addressBookGetById(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookGetByIdCall(addressBookId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns an adressbook by the identifier
     * 
     * @param addressBookId Identifier of the adress book (required)
     * @return AddressBookDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddressBookDTO addressBookGetById(Integer addressBookId) throws ApiException {
        ApiResponse<AddressBookDTO> resp = addressBookGetByIdWithHttpInfo(addressBookId);
        return resp.getData();
    }

    /**
     * This call returns an adressbook by the identifier
     * 
     * @param addressBookId Identifier of the adress book (required)
     * @return ApiResponse&lt;AddressBookDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddressBookDTO> addressBookGetByIdWithHttpInfo(Integer addressBookId) throws ApiException {
        com.squareup.okhttp.Call call = addressBookGetByIdValidateBeforeCall(addressBookId, null, null);
        Type localVarReturnType = new TypeToken<AddressBookDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns an adressbook by the identifier (asynchronously)
     * 
     * @param addressBookId Identifier of the adress book (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookGetByIdAsync(Integer addressBookId, final ApiCallback<AddressBookDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookGetByIdValidateBeforeCall(addressBookId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddressBookDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookGetByUserId
     * @param userId Identifier of the user (required)
     * @param type Possible values:  0: To  1: From  2: Cc  3: Senders  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookGetByUserIdCall(Integer userId, Integer type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/User/{userId}/UserProfile/{type}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookGetByUserIdValidateBeforeCall(Integer userId, Integer type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addressBookGetByUserId(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addressBookGetByUserId(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookGetByUserIdCall(userId, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns new profile data (for archiving purpose) by user identifier
     * 
     * @param userId Identifier of the user (required)
     * @param type Possible values:  0: To  1: From  2: Cc  3: Senders  (required)
     * @return UserProfileDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfileDTO addressBookGetByUserId(Integer userId, Integer type) throws ApiException {
        ApiResponse<UserProfileDTO> resp = addressBookGetByUserIdWithHttpInfo(userId, type);
        return resp.getData();
    }

    /**
     * This call returns new profile data (for archiving purpose) by user identifier
     * 
     * @param userId Identifier of the user (required)
     * @param type Possible values:  0: To  1: From  2: Cc  3: Senders  (required)
     * @return ApiResponse&lt;UserProfileDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfileDTO> addressBookGetByUserIdWithHttpInfo(Integer userId, Integer type) throws ApiException {
        com.squareup.okhttp.Call call = addressBookGetByUserIdValidateBeforeCall(userId, type, null, null);
        Type localVarReturnType = new TypeToken<UserProfileDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns new profile data (for archiving purpose) by user identifier (asynchronously)
     * 
     * @param userId Identifier of the user (required)
     * @param type Possible values:  0: To  1: From  2: Cc  3: Senders  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookGetByUserIdAsync(Integer userId, Integer type, final ApiCallback<UserProfileDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookGetByUserIdValidateBeforeCall(userId, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfileDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookGetForInsert
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookGetForInsertCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/newinstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookGetForInsertValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = addressBookGetForInsertCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns new AddreBookDTO object for insert purpose
     * 
     * @return AddressBookDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddressBookDTO addressBookGetForInsert() throws ApiException {
        ApiResponse<AddressBookDTO> resp = addressBookGetForInsertWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns new AddreBookDTO object for insert purpose
     * 
     * @return ApiResponse&lt;AddressBookDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddressBookDTO> addressBookGetForInsertWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = addressBookGetForInsertValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AddressBookDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns new AddreBookDTO object for insert purpose (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookGetForInsertAsync(final ApiCallback<AddressBookDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookGetForInsertValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddressBookDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookGetForInsert_0
     * @param addressbookCategoryId Identifier of the address book category (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookGetForInsert_0Call(Integer addressbookCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/newinstance/{addressbookCategoryId}"
            .replaceAll("\\{" + "addressbookCategoryId" + "\\}", apiClient.escapeString(addressbookCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookGetForInsert_0ValidateBeforeCall(Integer addressbookCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addressbookCategoryId' is set
        if (addressbookCategoryId == null) {
            throw new ApiException("Missing the required parameter 'addressbookCategoryId' when calling addressBookGetForInsert_0(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookGetForInsert_0Call(addressbookCategoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns new AddreBookDTO for insert purpose by category
     * 
     * @param addressbookCategoryId Identifier of the address book category (required)
     * @return AddressBookDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddressBookDTO addressBookGetForInsert_0(Integer addressbookCategoryId) throws ApiException {
        ApiResponse<AddressBookDTO> resp = addressBookGetForInsert_0WithHttpInfo(addressbookCategoryId);
        return resp.getData();
    }

    /**
     * This call returns new AddreBookDTO for insert purpose by category
     * 
     * @param addressbookCategoryId Identifier of the address book category (required)
     * @return ApiResponse&lt;AddressBookDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddressBookDTO> addressBookGetForInsert_0WithHttpInfo(Integer addressbookCategoryId) throws ApiException {
        com.squareup.okhttp.Call call = addressBookGetForInsert_0ValidateBeforeCall(addressbookCategoryId, null, null);
        Type localVarReturnType = new TypeToken<AddressBookDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns new AddreBookDTO for insert purpose by category (asynchronously)
     * 
     * @param addressbookCategoryId Identifier of the address book category (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookGetForInsert_0Async(Integer addressbookCategoryId, final ApiCallback<AddressBookDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookGetForInsert_0ValidateBeforeCall(addressbookCategoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddressBookDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookGetPermissionByAddrebookId
     * @param addressBookId Id of the addressBook (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookGetPermissionByAddrebookIdCall(Integer addressBookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/{addressBookId}/Permission"
            .replaceAll("\\{" + "addressBookId" + "\\}", apiClient.escapeString(addressBookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookGetPermissionByAddrebookIdValidateBeforeCall(Integer addressBookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addressBookId' is set
        if (addressBookId == null) {
            throw new ApiException("Missing the required parameter 'addressBookId' when calling addressBookGetPermissionByAddrebookId(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookGetPermissionByAddrebookIdCall(addressBookId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all permissions for an AddreBook
     * 
     * @param addressBookId Id of the addressBook (required)
     * @return PermissionsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PermissionsDTO addressBookGetPermissionByAddrebookId(Integer addressBookId) throws ApiException {
        ApiResponse<PermissionsDTO> resp = addressBookGetPermissionByAddrebookIdWithHttpInfo(addressBookId);
        return resp.getData();
    }

    /**
     * This call returns all permissions for an AddreBook
     * 
     * @param addressBookId Id of the addressBook (required)
     * @return ApiResponse&lt;PermissionsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PermissionsDTO> addressBookGetPermissionByAddrebookIdWithHttpInfo(Integer addressBookId) throws ApiException {
        com.squareup.okhttp.Call call = addressBookGetPermissionByAddrebookIdValidateBeforeCall(addressBookId, null, null);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all permissions for an AddreBook (asynchronously)
     * 
     * @param addressBookId Id of the addressBook (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookGetPermissionByAddrebookIdAsync(Integer addressBookId, final ApiCallback<PermissionsDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookGetPermissionByAddrebookIdValidateBeforeCall(addressBookId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PermissionsDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookGetSearchField
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookGetSearchFieldCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/SearchField";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookGetSearchFieldValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = addressBookGetSearchFieldCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all the possible fields for search in address book
     * 
     * @return List&lt;RubricaFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RubricaFieldDTO> addressBookGetSearchField() throws ApiException {
        ApiResponse<List<RubricaFieldDTO>> resp = addressBookGetSearchFieldWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns all the possible fields for search in address book
     * 
     * @return ApiResponse&lt;List&lt;RubricaFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RubricaFieldDTO>> addressBookGetSearchFieldWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = addressBookGetSearchFieldValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<RubricaFieldDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all the possible fields for search in address book (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookGetSearchFieldAsync(final ApiCallback<List<RubricaFieldDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookGetSearchFieldValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RubricaFieldDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookGetSelectField
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookGetSelectFieldCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/AddressBook/SelectField";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookGetSelectFieldValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = addressBookGetSelectFieldCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all the possible select fields for search in address book
     * 
     * @return List&lt;RubricaFieldDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RubricaFieldDTO> addressBookGetSelectField() throws ApiException {
        ApiResponse<List<RubricaFieldDTO>> resp = addressBookGetSelectFieldWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call returns all the possible select fields for search in address book
     * 
     * @return ApiResponse&lt;List&lt;RubricaFieldDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RubricaFieldDTO>> addressBookGetSelectFieldWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = addressBookGetSelectFieldValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<RubricaFieldDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all the possible select fields for search in address book (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookGetSelectFieldAsync(final ApiCallback<List<RubricaFieldDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookGetSelectFieldValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RubricaFieldDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookInsertAddressBook
     * @param addressBookDto Address book item to profile (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookInsertAddressBookCall(AddressBookDTO addressBookDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addressBookDto;

        // create path and map variables
        String localVarPath = "/api/AddressBook/addressbook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookInsertAddressBookValidateBeforeCall(AddressBookDTO addressBookDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addressBookDto' is set
        if (addressBookDto == null) {
            throw new ApiException("Missing the required parameter 'addressBookDto' when calling addressBookInsertAddressBook(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookInsertAddressBookCall(addressBookDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call inserts new addres book item
     * 
     * @param addressBookDto Address book item to profile (required)
     * @return AddressBookDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddressBookDTO addressBookInsertAddressBook(AddressBookDTO addressBookDto) throws ApiException {
        ApiResponse<AddressBookDTO> resp = addressBookInsertAddressBookWithHttpInfo(addressBookDto);
        return resp.getData();
    }

    /**
     * This call inserts new addres book item
     * 
     * @param addressBookDto Address book item to profile (required)
     * @return ApiResponse&lt;AddressBookDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddressBookDTO> addressBookInsertAddressBookWithHttpInfo(AddressBookDTO addressBookDto) throws ApiException {
        com.squareup.okhttp.Call call = addressBookInsertAddressBookValidateBeforeCall(addressBookDto, null, null);
        Type localVarReturnType = new TypeToken<AddressBookDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call inserts new addres book item (asynchronously)
     * 
     * @param addressBookDto Address book item to profile (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookInsertAddressBookAsync(AddressBookDTO addressBookDto, final ApiCallback<AddressBookDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookInsertAddressBookValidateBeforeCall(addressBookDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddressBookDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookInsertAddressBook_0
     * @param addressBookDtos Address book items to profile (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookInsertAddressBook_0Call(List<AddressBookDTO> addressBookDtos, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addressBookDtos;

        // create path and map variables
        String localVarPath = "/api/AddressBook/addressbooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookInsertAddressBook_0ValidateBeforeCall(List<AddressBookDTO> addressBookDtos, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addressBookDtos' is set
        if (addressBookDtos == null) {
            throw new ApiException("Missing the required parameter 'addressBookDtos' when calling addressBookInsertAddressBook_0(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookInsertAddressBook_0Call(addressBookDtos, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call inserts new address book items
     * 
     * @param addressBookDtos Address book items to profile (required)
     * @return List&lt;AddressBookDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AddressBookDTO> addressBookInsertAddressBook_0(List<AddressBookDTO> addressBookDtos) throws ApiException {
        ApiResponse<List<AddressBookDTO>> resp = addressBookInsertAddressBook_0WithHttpInfo(addressBookDtos);
        return resp.getData();
    }

    /**
     * This call inserts new address book items
     * 
     * @param addressBookDtos Address book items to profile (required)
     * @return ApiResponse&lt;List&lt;AddressBookDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AddressBookDTO>> addressBookInsertAddressBook_0WithHttpInfo(List<AddressBookDTO> addressBookDtos) throws ApiException {
        com.squareup.okhttp.Call call = addressBookInsertAddressBook_0ValidateBeforeCall(addressBookDtos, null, null);
        Type localVarReturnType = new TypeToken<List<AddressBookDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call inserts new address book items (asynchronously)
     * 
     * @param addressBookDtos Address book items to profile (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookInsertAddressBook_0Async(List<AddressBookDTO> addressBookDtos, final ApiCallback<List<AddressBookDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookInsertAddressBook_0ValidateBeforeCall(addressBookDtos, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AddressBookDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookInsertContact
     * @param contactDto Contact item to insert (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookInsertContactCall(ContactDTO contactDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = contactDto;

        // create path and map variables
        String localVarPath = "/api/AddressBook/contact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookInsertContactValidateBeforeCall(ContactDTO contactDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contactDto' is set
        if (contactDto == null) {
            throw new ApiException("Missing the required parameter 'contactDto' when calling addressBookInsertContact(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookInsertContactCall(contactDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call inserts new contact of a address book item
     * 
     * @param contactDto Contact item to insert (required)
     * @return ContactDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContactDTO addressBookInsertContact(ContactDTO contactDto) throws ApiException {
        ApiResponse<ContactDTO> resp = addressBookInsertContactWithHttpInfo(contactDto);
        return resp.getData();
    }

    /**
     * This call inserts new contact of a address book item
     * 
     * @param contactDto Contact item to insert (required)
     * @return ApiResponse&lt;ContactDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContactDTO> addressBookInsertContactWithHttpInfo(ContactDTO contactDto) throws ApiException {
        com.squareup.okhttp.Call call = addressBookInsertContactValidateBeforeCall(contactDto, null, null);
        Type localVarReturnType = new TypeToken<ContactDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call inserts new contact of a address book item (asynchronously)
     * 
     * @param contactDto Contact item to insert (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookInsertContactAsync(ContactDTO contactDto, final ApiCallback<ContactDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookInsertContactValidateBeforeCall(contactDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContactDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookPostSearch
     * @param searchDto The fields of the search (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookPostSearchCall(AddressBookSearchCriteriaDTO searchDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = searchDto;

        // create path and map variables
        String localVarPath = "/api/AddressBook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookPostSearchValidateBeforeCall(AddressBookSearchCriteriaDTO searchDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'searchDto' is set
        if (searchDto == null) {
            throw new ApiException("Missing the required parameter 'searchDto' when calling addressBookPostSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookPostSearchCall(searchDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call searches address book items
     * 
     * @param searchDto The fields of the search (required)
     * @return AddressBookSearchResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddressBookSearchResultDTO addressBookPostSearch(AddressBookSearchCriteriaDTO searchDto) throws ApiException {
        ApiResponse<AddressBookSearchResultDTO> resp = addressBookPostSearchWithHttpInfo(searchDto);
        return resp.getData();
    }

    /**
     * This call searches address book items
     * 
     * @param searchDto The fields of the search (required)
     * @return ApiResponse&lt;AddressBookSearchResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddressBookSearchResultDTO> addressBookPostSearchWithHttpInfo(AddressBookSearchCriteriaDTO searchDto) throws ApiException {
        com.squareup.okhttp.Call call = addressBookPostSearchValidateBeforeCall(searchDto, null, null);
        Type localVarReturnType = new TypeToken<AddressBookSearchResultDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call searches address book items (asynchronously)
     * 
     * @param searchDto The fields of the search (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookPostSearchAsync(AddressBookSearchCriteriaDTO searchDto, final ApiCallback<AddressBookSearchResultDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookPostSearchValidateBeforeCall(searchDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddressBookSearchResultDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookPutSelectField
     * @param selectFields Array of select fields (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookPutSelectFieldCall(List<RubricaFieldDTO> selectFields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = selectFields;

        // create path and map variables
        String localVarPath = "/api/AddressBook/SelectField";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookPutSelectFieldValidateBeforeCall(List<RubricaFieldDTO> selectFields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'selectFields' is set
        if (selectFields == null) {
            throw new ApiException("Missing the required parameter 'selectFields' when calling addressBookPutSelectField(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookPutSelectFieldCall(selectFields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call saves the select fields with the user settings
     * 
     * @param selectFields Array of select fields (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addressBookPutSelectField(List<RubricaFieldDTO> selectFields) throws ApiException {
        addressBookPutSelectFieldWithHttpInfo(selectFields);
    }

    /**
     * This call saves the select fields with the user settings
     * 
     * @param selectFields Array of select fields (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addressBookPutSelectFieldWithHttpInfo(List<RubricaFieldDTO> selectFields) throws ApiException {
        com.squareup.okhttp.Call call = addressBookPutSelectFieldValidateBeforeCall(selectFields, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call saves the select fields with the user settings (asynchronously)
     * 
     * @param selectFields Array of select fields (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookPutSelectFieldAsync(List<RubricaFieldDTO> selectFields, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookPutSelectFieldValidateBeforeCall(selectFields, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addressBookSetPermissionByAddrebookId
     * @param addressBookId Id of the addressBook (required)
     * @param permissions  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookSetPermissionByAddrebookIdCall(Integer addressBookId, PermissionsDTO permissions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = permissions;

        // create path and map variables
        String localVarPath = "/api/AddressBook/{addressBookId}/Permission"
            .replaceAll("\\{" + "addressBookId" + "\\}", apiClient.escapeString(addressBookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookSetPermissionByAddrebookIdValidateBeforeCall(Integer addressBookId, PermissionsDTO permissions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addressBookId' is set
        if (addressBookId == null) {
            throw new ApiException("Missing the required parameter 'addressBookId' when calling addressBookSetPermissionByAddrebookId(Async)");
        }
        
        // verify the required parameter 'permissions' is set
        if (permissions == null) {
            throw new ApiException("Missing the required parameter 'permissions' when calling addressBookSetPermissionByAddrebookId(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookSetPermissionByAddrebookIdCall(addressBookId, permissions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call saves all permissions for an AddreBook
     * 
     * @param addressBookId Id of the addressBook (required)
     * @param permissions  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addressBookSetPermissionByAddrebookId(Integer addressBookId, PermissionsDTO permissions) throws ApiException {
        addressBookSetPermissionByAddrebookIdWithHttpInfo(addressBookId, permissions);
    }

    /**
     * This call saves all permissions for an AddreBook
     * 
     * @param addressBookId Id of the addressBook (required)
     * @param permissions  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addressBookSetPermissionByAddrebookIdWithHttpInfo(Integer addressBookId, PermissionsDTO permissions) throws ApiException {
        com.squareup.okhttp.Call call = addressBookSetPermissionByAddrebookIdValidateBeforeCall(addressBookId, permissions, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call saves all permissions for an AddreBook (asynchronously)
     * 
     * @param addressBookId Id of the addressBook (required)
     * @param permissions  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookSetPermissionByAddrebookIdAsync(Integer addressBookId, PermissionsDTO permissions, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookSetPermissionByAddrebookIdValidateBeforeCall(addressBookId, permissions, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addressBookUpdateAddressBook
     * @param addressbookId Identifier of Address book to update (required)
     * @param addressBookDto Address book data to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookUpdateAddressBookCall(Integer addressbookId, AddressBookDTO addressBookDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addressBookDto;

        // create path and map variables
        String localVarPath = "/api/AddressBook/addressbook/{addressbookId}"
            .replaceAll("\\{" + "addressbookId" + "\\}", apiClient.escapeString(addressbookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookUpdateAddressBookValidateBeforeCall(Integer addressbookId, AddressBookDTO addressBookDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addressbookId' is set
        if (addressbookId == null) {
            throw new ApiException("Missing the required parameter 'addressbookId' when calling addressBookUpdateAddressBook(Async)");
        }
        
        // verify the required parameter 'addressBookDto' is set
        if (addressBookDto == null) {
            throw new ApiException("Missing the required parameter 'addressBookDto' when calling addressBookUpdateAddressBook(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookUpdateAddressBookCall(addressbookId, addressBookDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates a addresbook item
     * 
     * @param addressbookId Identifier of Address book to update (required)
     * @param addressBookDto Address book data to update (required)
     * @return AddressBookDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AddressBookDTO addressBookUpdateAddressBook(Integer addressbookId, AddressBookDTO addressBookDto) throws ApiException {
        ApiResponse<AddressBookDTO> resp = addressBookUpdateAddressBookWithHttpInfo(addressbookId, addressBookDto);
        return resp.getData();
    }

    /**
     * This call updates a addresbook item
     * 
     * @param addressbookId Identifier of Address book to update (required)
     * @param addressBookDto Address book data to update (required)
     * @return ApiResponse&lt;AddressBookDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AddressBookDTO> addressBookUpdateAddressBookWithHttpInfo(Integer addressbookId, AddressBookDTO addressBookDto) throws ApiException {
        com.squareup.okhttp.Call call = addressBookUpdateAddressBookValidateBeforeCall(addressbookId, addressBookDto, null, null);
        Type localVarReturnType = new TypeToken<AddressBookDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call updates a addresbook item (asynchronously)
     * 
     * @param addressbookId Identifier of Address book to update (required)
     * @param addressBookDto Address book data to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookUpdateAddressBookAsync(Integer addressbookId, AddressBookDTO addressBookDto, final ApiCallback<AddressBookDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookUpdateAddressBookValidateBeforeCall(addressbookId, addressBookDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AddressBookDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addressBookUpdateContact
     * @param contact Identifier of contact to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addressBookUpdateContactCall(ContactDTO contact, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = contact;

        // create path and map variables
        String localVarPath = "/api/AddressBook/contact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addressBookUpdateContactValidateBeforeCall(ContactDTO contact, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contact' is set
        if (contact == null) {
            throw new ApiException("Missing the required parameter 'contact' when calling addressBookUpdateContact(Async)");
        }
        

        com.squareup.okhttp.Call call = addressBookUpdateContactCall(contact, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates a contact
     * 
     * @param contact Identifier of contact to update (required)
     * @return ContactDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContactDTO addressBookUpdateContact(ContactDTO contact) throws ApiException {
        ApiResponse<ContactDTO> resp = addressBookUpdateContactWithHttpInfo(contact);
        return resp.getData();
    }

    /**
     * This call updates a contact
     * 
     * @param contact Identifier of contact to update (required)
     * @return ApiResponse&lt;ContactDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContactDTO> addressBookUpdateContactWithHttpInfo(ContactDTO contact) throws ApiException {
        com.squareup.okhttp.Call call = addressBookUpdateContactValidateBeforeCall(contact, null, null);
        Type localVarReturnType = new TypeToken<ContactDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call updates a contact (asynchronously)
     * 
     * @param contact Identifier of contact to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addressBookUpdateContactAsync(ContactDTO contact, final ApiCallback<ContactDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addressBookUpdateContactValidateBeforeCall(contact, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContactDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
