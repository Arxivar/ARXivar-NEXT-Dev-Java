/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CloseEligibleResult;
import io.swagger.client.model.KeyValueElementDto;
import io.swagger.client.model.MaskProfileSchemaDTO;
import io.swagger.client.model.ModelProfileSchemaDTO;
import io.swagger.client.model.ProfileDTO;
import io.swagger.client.model.ProfileResultDTO;
import io.swagger.client.model.RowSearchResult;
import io.swagger.client.model.SelectDTO;
import io.swagger.client.model.TaskExitCodeDTO;
import io.swagger.client.model.TaskWorkCloseRequest;
import io.swagger.client.model.TaskWorkDTO;
import io.swagger.client.model.TaskWorkReassignRequest;
import io.swagger.client.model.TaskWorkRequestDTO;
import io.swagger.client.model.UserCompleteDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskWorkApi {
    private ApiClient apiClient;

    public TaskWorkApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskWorkApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for taskWorkActivateTaskwork
     * @param taskWorkId Taskwork identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkActivateTaskworkCall(Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskWork/{taskWorkId}/Activate"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkActivateTaskworkValidateBeforeCall(Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkActivateTaskwork(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkActivateTaskworkCall(taskWorkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a taskwork if active
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @return TaskWorkDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskWorkDTO taskWorkActivateTaskwork(Integer taskWorkId) throws ApiException {
        ApiResponse<TaskWorkDTO> resp = taskWorkActivateTaskworkWithHttpInfo(taskWorkId);
        return resp.getData();
    }

    /**
     * This call returns a taskwork if active
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @return ApiResponse&lt;TaskWorkDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskWorkDTO> taskWorkActivateTaskworkWithHttpInfo(Integer taskWorkId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkActivateTaskworkValidateBeforeCall(taskWorkId, null, null);
        Type localVarReturnType = new TypeToken<TaskWorkDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a taskwork if active (asynchronously)
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkActivateTaskworkAsync(Integer taskWorkId, final ApiCallback<TaskWorkDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkActivateTaskworkValidateBeforeCall(taskWorkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskWorkDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkAutoAssign
     * @param taskworkId Taskwork identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkAutoAssignCall(Integer taskworkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskWork/autoassign/{taskworkId}"
            .replaceAll("\\{" + "taskworkId" + "\\}", apiClient.escapeString(taskworkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkAutoAssignValidateBeforeCall(Integer taskworkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskworkId' is set
        if (taskworkId == null) {
            throw new ApiException("Missing the required parameter 'taskworkId' when calling taskWorkAutoAssign(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkAutoAssignCall(taskworkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call autoassigns the taskwork
     * 
     * @param taskworkId Taskwork identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkAutoAssign(Integer taskworkId) throws ApiException {
        taskWorkAutoAssignWithHttpInfo(taskworkId);
    }

    /**
     * This call autoassigns the taskwork
     * 
     * @param taskworkId Taskwork identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkAutoAssignWithHttpInfo(Integer taskworkId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkAutoAssignValidateBeforeCall(taskworkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call autoassigns the taskwork (asynchronously)
     * 
     * @param taskworkId Taskwork identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkAutoAssignAsync(Integer taskworkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkAutoAssignValidateBeforeCall(taskworkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskWorkCanFinalizeTaskByIds
     * @param taskworkids List of taskwork identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkCanFinalizeTaskByIdsCall(List<Integer> taskworkids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskworkids;

        // create path and map variables
        String localVarPath = "/api/TaskWork/canfinalize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkCanFinalizeTaskByIdsValidateBeforeCall(List<Integer> taskworkids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskworkids' is set
        if (taskworkids == null) {
            throw new ApiException("Missing the required parameter 'taskworkids' when calling taskWorkCanFinalizeTaskByIds(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkCanFinalizeTaskByIdsCall(taskworkids, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns if is possible to close task work list
     * 
     * @param taskworkids List of taskwork identifier (required)
     * @return List&lt;CloseEligibleResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CloseEligibleResult> taskWorkCanFinalizeTaskByIds(List<Integer> taskworkids) throws ApiException {
        ApiResponse<List<CloseEligibleResult>> resp = taskWorkCanFinalizeTaskByIdsWithHttpInfo(taskworkids);
        return resp.getData();
    }

    /**
     * This call returns if is possible to close task work list
     * 
     * @param taskworkids List of taskwork identifier (required)
     * @return ApiResponse&lt;List&lt;CloseEligibleResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CloseEligibleResult>> taskWorkCanFinalizeTaskByIdsWithHttpInfo(List<Integer> taskworkids) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkCanFinalizeTaskByIdsValidateBeforeCall(taskworkids, null, null);
        Type localVarReturnType = new TypeToken<List<CloseEligibleResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns if is possible to close task work list (asynchronously)
     * 
     * @param taskworkids List of taskwork identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkCanFinalizeTaskByIdsAsync(List<Integer> taskworkids, final ApiCallback<List<CloseEligibleResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkCanFinalizeTaskByIdsValidateBeforeCall(taskworkids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CloseEligibleResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkCanFinalizeTaskByIdsAndExitCodeAndPassword
     * @param closeRequest Taskwork information (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordCall(TaskWorkCloseRequest closeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = closeRequest;

        // create path and map variables
        String localVarPath = "/api/TaskWork/canfinalizebyexitcodeandpassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordValidateBeforeCall(TaskWorkCloseRequest closeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'closeRequest' is set
        if (closeRequest == null) {
            throw new ApiException("Missing the required parameter 'closeRequest' when calling taskWorkCanFinalizeTaskByIdsAndExitCodeAndPassword(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordCall(closeRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns if is possible to close task work list by exit code and password
     * 
     * @param closeRequest Taskwork information (required)
     * @return List&lt;CloseEligibleResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CloseEligibleResult> taskWorkCanFinalizeTaskByIdsAndExitCodeAndPassword(TaskWorkCloseRequest closeRequest) throws ApiException {
        ApiResponse<List<CloseEligibleResult>> resp = taskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo(closeRequest);
        return resp.getData();
    }

    /**
     * This call returns if is possible to close task work list by exit code and password
     * 
     * @param closeRequest Taskwork information (required)
     * @return ApiResponse&lt;List&lt;CloseEligibleResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CloseEligibleResult>> taskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo(TaskWorkCloseRequest closeRequest) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordValidateBeforeCall(closeRequest, null, null);
        Type localVarReturnType = new TypeToken<List<CloseEligibleResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns if is possible to close task work list by exit code and password (asynchronously)
     * 
     * @param closeRequest Taskwork information (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordAsync(TaskWorkCloseRequest closeRequest, final ApiCallback<List<CloseEligibleResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkCanFinalizeTaskByIdsAndExitCodeAndPasswordValidateBeforeCall(closeRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CloseEligibleResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkDeleteTaskWorkById
     * @param taskWorkId Taskwork identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkDeleteTaskWorkByIdCall(Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskWork/{taskWorkId}"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkDeleteTaskWorkByIdValidateBeforeCall(Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkDeleteTaskWorkById(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkDeleteTaskWorkByIdCall(taskWorkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes the task
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkDeleteTaskWorkById(Integer taskWorkId) throws ApiException {
        taskWorkDeleteTaskWorkByIdWithHttpInfo(taskWorkId);
    }

    /**
     * This call deletes the task
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkDeleteTaskWorkByIdWithHttpInfo(Integer taskWorkId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkDeleteTaskWorkByIdValidateBeforeCall(taskWorkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes the task (asynchronously)
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkDeleteTaskWorkByIdAsync(Integer taskWorkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkDeleteTaskWorkByIdValidateBeforeCall(taskWorkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskWorkFinalizeTaskByIdsAndExitCodeAndPassword
     * @param closeRequest Taskwork information (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkFinalizeTaskByIdsAndExitCodeAndPasswordCall(TaskWorkCloseRequest closeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = closeRequest;

        // create path and map variables
        String localVarPath = "/api/TaskWork/finalize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkFinalizeTaskByIdsAndExitCodeAndPasswordValidateBeforeCall(TaskWorkCloseRequest closeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'closeRequest' is set
        if (closeRequest == null) {
            throw new ApiException("Missing the required parameter 'closeRequest' when calling taskWorkFinalizeTaskByIdsAndExitCodeAndPassword(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkFinalizeTaskByIdsAndExitCodeAndPasswordCall(closeRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call closes a task work list
     * 
     * @param closeRequest Taskwork information (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkFinalizeTaskByIdsAndExitCodeAndPassword(TaskWorkCloseRequest closeRequest) throws ApiException {
        taskWorkFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo(closeRequest);
    }

    /**
     * This call closes a task work list
     * 
     * @param closeRequest Taskwork information (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkFinalizeTaskByIdsAndExitCodeAndPasswordWithHttpInfo(TaskWorkCloseRequest closeRequest) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkFinalizeTaskByIdsAndExitCodeAndPasswordValidateBeforeCall(closeRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call closes a task work list (asynchronously)
     * 
     * @param closeRequest Taskwork information (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkFinalizeTaskByIdsAndExitCodeAndPasswordAsync(TaskWorkCloseRequest closeRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkFinalizeTaskByIdsAndExitCodeAndPasswordValidateBeforeCall(closeRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskWorkGetActiveTaskWork
     * @param select Selection Fields (required)
     * @param docnumber Document Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetActiveTaskWorkCall(SelectDTO select, Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = select;

        // create path and map variables
        String localVarPath = "/api/TaskWork/actives/{docnumber}"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkGetActiveTaskWorkValidateBeforeCall(SelectDTO select, Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'select' is set
        if (select == null) {
            throw new ApiException("Missing the required parameter 'select' when calling taskWorkGetActiveTaskWork(Async)");
        }
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling taskWorkGetActiveTaskWork(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkGetActiveTaskWorkCall(select, docnumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call executes a task search and return taskwork active for the user on a specific document
     * 
     * @param select Selection Fields (required)
     * @param docnumber Document Identifier (required)
     * @return List&lt;RowSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RowSearchResult> taskWorkGetActiveTaskWork(SelectDTO select, Integer docnumber) throws ApiException {
        ApiResponse<List<RowSearchResult>> resp = taskWorkGetActiveTaskWorkWithHttpInfo(select, docnumber);
        return resp.getData();
    }

    /**
     * This call executes a task search and return taskwork active for the user on a specific document
     * 
     * @param select Selection Fields (required)
     * @param docnumber Document Identifier (required)
     * @return ApiResponse&lt;List&lt;RowSearchResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RowSearchResult>> taskWorkGetActiveTaskWorkWithHttpInfo(SelectDTO select, Integer docnumber) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkGetActiveTaskWorkValidateBeforeCall(select, docnumber, null, null);
        Type localVarReturnType = new TypeToken<List<RowSearchResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call executes a task search and return taskwork active for the user on a specific document (asynchronously)
     * 
     * @param select Selection Fields (required)
     * @param docnumber Document Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetActiveTaskWorkAsync(SelectDTO select, Integer docnumber, final ApiCallback<List<RowSearchResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkGetActiveTaskWorkValidateBeforeCall(select, docnumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RowSearchResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkGetDefaultSelect
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetDefaultSelectCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskWork/defaultselect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkGetDefaultSelectValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = taskWorkGetDefaultSelectCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call provides default select for tasklist search
     * 
     * @return SelectDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SelectDTO taskWorkGetDefaultSelect() throws ApiException {
        ApiResponse<SelectDTO> resp = taskWorkGetDefaultSelectWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call provides default select for tasklist search
     * 
     * @return ApiResponse&lt;SelectDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SelectDTO> taskWorkGetDefaultSelectWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = taskWorkGetDefaultSelectValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SelectDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call provides default select for tasklist search (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetDefaultSelectAsync(final ApiCallback<SelectDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkGetDefaultSelectValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SelectDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkGetDocumentsByProcessId
     * @param processId Process identifier (required)
     * @param select Field select configuration (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetDocumentsByProcessIdCall(Integer processId, SelectDTO select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = select;

        // create path and map variables
        String localVarPath = "/api/TaskWork/documents/{processId}"
            .replaceAll("\\{" + "processId" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkGetDocumentsByProcessIdValidateBeforeCall(Integer processId, SelectDTO select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling taskWorkGetDocumentsByProcessId(Async)");
        }
        
        // verify the required parameter 'select' is set
        if (select == null) {
            throw new ApiException("Missing the required parameter 'select' when calling taskWorkGetDocumentsByProcessId(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkGetDocumentsByProcessIdCall(processId, select, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the task documents
     * 
     * @param processId Process identifier (required)
     * @param select Field select configuration (required)
     * @return List&lt;RowSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RowSearchResult> taskWorkGetDocumentsByProcessId(Integer processId, SelectDTO select) throws ApiException {
        ApiResponse<List<RowSearchResult>> resp = taskWorkGetDocumentsByProcessIdWithHttpInfo(processId, select);
        return resp.getData();
    }

    /**
     * This call returns the task documents
     * 
     * @param processId Process identifier (required)
     * @param select Field select configuration (required)
     * @return ApiResponse&lt;List&lt;RowSearchResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RowSearchResult>> taskWorkGetDocumentsByProcessIdWithHttpInfo(Integer processId, SelectDTO select) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkGetDocumentsByProcessIdValidateBeforeCall(processId, select, null, null);
        Type localVarReturnType = new TypeToken<List<RowSearchResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the task documents (asynchronously)
     * 
     * @param processId Process identifier (required)
     * @param select Field select configuration (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetDocumentsByProcessIdAsync(Integer processId, SelectDTO select, final ApiCallback<List<RowSearchResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkGetDocumentsByProcessIdValidateBeforeCall(processId, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RowSearchResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkGetDocumentsFilenameByProcessId
     * @param processId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetDocumentsFilenameByProcessIdCall(Integer processId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskWork/documents/filenames/{processId}"
            .replaceAll("\\{" + "processId" + "\\}", apiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkGetDocumentsFilenameByProcessIdValidateBeforeCall(Integer processId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling taskWorkGetDocumentsFilenameByProcessId(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkGetDocumentsFilenameByProcessIdCall(processId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param processId  (required)
     * @return List&lt;KeyValueElementDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<KeyValueElementDto> taskWorkGetDocumentsFilenameByProcessId(Integer processId) throws ApiException {
        ApiResponse<List<KeyValueElementDto>> resp = taskWorkGetDocumentsFilenameByProcessIdWithHttpInfo(processId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param processId  (required)
     * @return ApiResponse&lt;List&lt;KeyValueElementDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<KeyValueElementDto>> taskWorkGetDocumentsFilenameByProcessIdWithHttpInfo(Integer processId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkGetDocumentsFilenameByProcessIdValidateBeforeCall(processId, null, null);
        Type localVarReturnType = new TypeToken<List<KeyValueElementDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param processId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetDocumentsFilenameByProcessIdAsync(Integer processId, final ApiCallback<List<KeyValueElementDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkGetDocumentsFilenameByProcessIdValidateBeforeCall(processId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<KeyValueElementDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkGetExitCodesByTaskWorkIds
     * @param taskWorkIds List of taskwork identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetExitCodesByTaskWorkIdsCall(List<Integer> taskWorkIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskWorkIds;

        // create path and map variables
        String localVarPath = "/api/TaskWork/exitcodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkGetExitCodesByTaskWorkIdsValidateBeforeCall(List<Integer> taskWorkIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkIds' is set
        if (taskWorkIds == null) {
            throw new ApiException("Missing the required parameter 'taskWorkIds' when calling taskWorkGetExitCodesByTaskWorkIds(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkGetExitCodesByTaskWorkIdsCall(taskWorkIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all possible exit code for taskWorks list
     * 
     * @param taskWorkIds List of taskwork identifier (required)
     * @return List&lt;TaskExitCodeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TaskExitCodeDTO> taskWorkGetExitCodesByTaskWorkIds(List<Integer> taskWorkIds) throws ApiException {
        ApiResponse<List<TaskExitCodeDTO>> resp = taskWorkGetExitCodesByTaskWorkIdsWithHttpInfo(taskWorkIds);
        return resp.getData();
    }

    /**
     * This call returns all possible exit code for taskWorks list
     * 
     * @param taskWorkIds List of taskwork identifier (required)
     * @return ApiResponse&lt;List&lt;TaskExitCodeDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TaskExitCodeDTO>> taskWorkGetExitCodesByTaskWorkIdsWithHttpInfo(List<Integer> taskWorkIds) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkGetExitCodesByTaskWorkIdsValidateBeforeCall(taskWorkIds, null, null);
        Type localVarReturnType = new TypeToken<List<TaskExitCodeDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all possible exit code for taskWorks list (asynchronously)
     * 
     * @param taskWorkIds List of taskwork identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetExitCodesByTaskWorkIdsAsync(List<Integer> taskWorkIds, final ApiCallback<List<TaskExitCodeDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkGetExitCodesByTaskWorkIdsValidateBeforeCall(taskWorkIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TaskExitCodeDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkGetProfileSchemaForTaskWorkMaskDocumentOperation
     * @param taskWorkId Taskwork identifier (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationCall(Integer taskWorkId, String taskWorkDocumentOperationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/maskprofileSchema"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "taskWorkDocumentOperationId" + "\\}", apiClient.escapeString(taskWorkDocumentOperationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationValidateBeforeCall(Integer taskWorkId, String taskWorkDocumentOperationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkGetProfileSchemaForTaskWorkMaskDocumentOperation(Async)");
        }
        
        // verify the required parameter 'taskWorkDocumentOperationId' is set
        if (taskWorkDocumentOperationId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkDocumentOperationId' when calling taskWorkGetProfileSchemaForTaskWorkMaskDocumentOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationCall(taskWorkId, taskWorkDocumentOperationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a document schema for a mask insert document taskWork operation
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @return MaskProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskProfileSchemaDTO taskWorkGetProfileSchemaForTaskWorkMaskDocumentOperation(Integer taskWorkId, String taskWorkDocumentOperationId) throws ApiException {
        ApiResponse<MaskProfileSchemaDTO> resp = taskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
        return resp.getData();
    }

    /**
     * This call returns a document schema for a mask insert document taskWork operation
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @return ApiResponse&lt;MaskProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskProfileSchemaDTO> taskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationWithHttpInfo(Integer taskWorkId, String taskWorkDocumentOperationId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, null, null);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a document schema for a mask insert document taskWork operation (asynchronously)
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationAsync(Integer taskWorkId, String taskWorkDocumentOperationId, final ApiCallback<MaskProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkGetProfileSchemaForTaskWorkMaskDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkGetProfileSchemaForTaskWorkModelDocumentOperation
     * @param taskWorkId Taskwork identifier (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetProfileSchemaForTaskWorkModelDocumentOperationCall(Integer taskWorkId, String taskWorkDocumentOperationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/modelprofileSchema"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "taskWorkDocumentOperationId" + "\\}", apiClient.escapeString(taskWorkDocumentOperationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkGetProfileSchemaForTaskWorkModelDocumentOperationValidateBeforeCall(Integer taskWorkId, String taskWorkDocumentOperationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkGetProfileSchemaForTaskWorkModelDocumentOperation(Async)");
        }
        
        // verify the required parameter 'taskWorkDocumentOperationId' is set
        if (taskWorkDocumentOperationId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkDocumentOperationId' when calling taskWorkGetProfileSchemaForTaskWorkModelDocumentOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkGetProfileSchemaForTaskWorkModelDocumentOperationCall(taskWorkId, taskWorkDocumentOperationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a profile schema for a model insert document taskWork operation
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @return ModelProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelProfileSchemaDTO taskWorkGetProfileSchemaForTaskWorkModelDocumentOperation(Integer taskWorkId, String taskWorkDocumentOperationId) throws ApiException {
        ApiResponse<ModelProfileSchemaDTO> resp = taskWorkGetProfileSchemaForTaskWorkModelDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
        return resp.getData();
    }

    /**
     * This call returns a profile schema for a model insert document taskWork operation
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @return ApiResponse&lt;ModelProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelProfileSchemaDTO> taskWorkGetProfileSchemaForTaskWorkModelDocumentOperationWithHttpInfo(Integer taskWorkId, String taskWorkDocumentOperationId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkGetProfileSchemaForTaskWorkModelDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, null, null);
        Type localVarReturnType = new TypeToken<ModelProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a profile schema for a model insert document taskWork operation (asynchronously)
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetProfileSchemaForTaskWorkModelDocumentOperationAsync(Integer taskWorkId, String taskWorkDocumentOperationId, final ApiCallback<ModelProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkGetProfileSchemaForTaskWorkModelDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkGetProfileSchemaForTaskWorkStandardDocumentOperation
     * @param taskWorkId Taskwork identifier (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationCall(Integer taskWorkId, String taskWorkDocumentOperationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/standardprofileSchema"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "taskWorkDocumentOperationId" + "\\}", apiClient.escapeString(taskWorkDocumentOperationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationValidateBeforeCall(Integer taskWorkId, String taskWorkDocumentOperationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkGetProfileSchemaForTaskWorkStandardDocumentOperation(Async)");
        }
        
        // verify the required parameter 'taskWorkDocumentOperationId' is set
        if (taskWorkDocumentOperationId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkDocumentOperationId' when calling taskWorkGetProfileSchemaForTaskWorkStandardDocumentOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationCall(taskWorkId, taskWorkDocumentOperationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a profile schema for a standard insert document taskWork operation
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @return MaskProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskProfileSchemaDTO taskWorkGetProfileSchemaForTaskWorkStandardDocumentOperation(Integer taskWorkId, String taskWorkDocumentOperationId) throws ApiException {
        ApiResponse<MaskProfileSchemaDTO> resp = taskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId);
        return resp.getData();
    }

    /**
     * This call returns a profile schema for a standard insert document taskWork operation
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @return ApiResponse&lt;MaskProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskProfileSchemaDTO> taskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationWithHttpInfo(Integer taskWorkId, String taskWorkDocumentOperationId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, null, null);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a profile schema for a standard insert document taskWork operation (asynchronously)
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationAsync(Integer taskWorkId, String taskWorkDocumentOperationId, final ApiCallback<MaskProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkGetProfileSchemaForTaskWorkStandardDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkGetTaskWorkById
     * @param taskWorkId Taskwork identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetTaskWorkByIdCall(Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskWork/{taskWorkId}"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkGetTaskWorkByIdValidateBeforeCall(Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkGetTaskWorkById(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkGetTaskWorkByIdCall(taskWorkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the task
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @return TaskWorkDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskWorkDTO taskWorkGetTaskWorkById(Integer taskWorkId) throws ApiException {
        ApiResponse<TaskWorkDTO> resp = taskWorkGetTaskWorkByIdWithHttpInfo(taskWorkId);
        return resp.getData();
    }

    /**
     * This call returns the task
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @return ApiResponse&lt;TaskWorkDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskWorkDTO> taskWorkGetTaskWorkByIdWithHttpInfo(Integer taskWorkId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkGetTaskWorkByIdValidateBeforeCall(taskWorkId, null, null);
        Type localVarReturnType = new TypeToken<TaskWorkDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the task (asynchronously)
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetTaskWorkByIdAsync(Integer taskWorkId, final ApiCallback<TaskWorkDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkGetTaskWorkByIdValidateBeforeCall(taskWorkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskWorkDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkGetTaskWorkForAutoAssign
     * @param docnumber Document identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetTaskWorkForAutoAssignCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskWork/autoassignlist/{docnumber}"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkGetTaskWorkForAutoAssignValidateBeforeCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling taskWorkGetTaskWorkForAutoAssign(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkGetTaskWorkForAutoAssignCall(docnumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all autoassigned taskwork associated with a document
     * 
     * @param docnumber Document identifier (required)
     * @return List&lt;TaskWorkDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TaskWorkDTO> taskWorkGetTaskWorkForAutoAssign(Integer docnumber) throws ApiException {
        ApiResponse<List<TaskWorkDTO>> resp = taskWorkGetTaskWorkForAutoAssignWithHttpInfo(docnumber);
        return resp.getData();
    }

    /**
     * This call returns all autoassigned taskwork associated with a document
     * 
     * @param docnumber Document identifier (required)
     * @return ApiResponse&lt;List&lt;TaskWorkDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TaskWorkDTO>> taskWorkGetTaskWorkForAutoAssignWithHttpInfo(Integer docnumber) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkGetTaskWorkForAutoAssignValidateBeforeCall(docnumber, null, null);
        Type localVarReturnType = new TypeToken<List<TaskWorkDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all autoassigned taskwork associated with a document (asynchronously)
     * 
     * @param docnumber Document identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetTaskWorkForAutoAssignAsync(Integer docnumber, final ApiCallback<List<TaskWorkDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkGetTaskWorkForAutoAssignValidateBeforeCall(docnumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TaskWorkDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkGetTasks
     * @param request The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetTasksCall(TaskWorkRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/TaskWork";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkGetTasksValidateBeforeCall(TaskWorkRequestDTO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling taskWorkGetTasks(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkGetTasksCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions)
     * 
     * @param request The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user (required)
     * @return List&lt;RowSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RowSearchResult> taskWorkGetTasks(TaskWorkRequestDTO request) throws ApiException {
        ApiResponse<List<RowSearchResult>> resp = taskWorkGetTasksWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions)
     * 
     * @param request The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user (required)
     * @return ApiResponse&lt;List&lt;RowSearchResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RowSearchResult>> taskWorkGetTasksWithHttpInfo(TaskWorkRequestDTO request) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkGetTasksValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<List<RowSearchResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call executes a task search and return taskwork active for the user and the given workflows ids (with all revisions) (asynchronously)
     * 
     * @param request The request object that defines select parte and workflows ids, if workflows ids is null or empty returns all taskWork for the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkGetTasksAsync(TaskWorkRequestDTO request, final ApiCallback<List<RowSearchResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkGetTasksValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RowSearchResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkReassignTaskById
     * @param taskworkid Taskwork identifier (required)
     * @param reassignRequest Information for re assign operation request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkReassignTaskByIdCall(Integer taskworkid, TaskWorkReassignRequest reassignRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reassignRequest;

        // create path and map variables
        String localVarPath = "/api/TaskWork/reassign/{taskworkid}"
            .replaceAll("\\{" + "taskworkid" + "\\}", apiClient.escapeString(taskworkid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkReassignTaskByIdValidateBeforeCall(Integer taskworkid, TaskWorkReassignRequest reassignRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskworkid' is set
        if (taskworkid == null) {
            throw new ApiException("Missing the required parameter 'taskworkid' when calling taskWorkReassignTaskById(Async)");
        }
        
        // verify the required parameter 'reassignRequest' is set
        if (reassignRequest == null) {
            throw new ApiException("Missing the required parameter 'reassignRequest' when calling taskWorkReassignTaskById(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkReassignTaskByIdCall(taskworkid, reassignRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call reassigns a task to selected users
     * 
     * @param taskworkid Taskwork identifier (required)
     * @param reassignRequest Information for re assign operation request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkReassignTaskById(Integer taskworkid, TaskWorkReassignRequest reassignRequest) throws ApiException {
        taskWorkReassignTaskByIdWithHttpInfo(taskworkid, reassignRequest);
    }

    /**
     * This call reassigns a task to selected users
     * 
     * @param taskworkid Taskwork identifier (required)
     * @param reassignRequest Information for re assign operation request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkReassignTaskByIdWithHttpInfo(Integer taskworkid, TaskWorkReassignRequest reassignRequest) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkReassignTaskByIdValidateBeforeCall(taskworkid, reassignRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call reassigns a task to selected users (asynchronously)
     * 
     * @param taskworkid Taskwork identifier (required)
     * @param reassignRequest Information for re assign operation request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkReassignTaskByIdAsync(Integer taskworkid, TaskWorkReassignRequest reassignRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkReassignTaskByIdValidateBeforeCall(taskworkid, reassignRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskWorkReassignUsersTaskById
     * @param taskworkid Taskwork identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkReassignUsersTaskByIdCall(Integer taskworkid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskWork/reassignusers/{taskworkid}"
            .replaceAll("\\{" + "taskworkid" + "\\}", apiClient.escapeString(taskworkid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkReassignUsersTaskByIdValidateBeforeCall(Integer taskworkid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskworkid' is set
        if (taskworkid == null) {
            throw new ApiException("Missing the required parameter 'taskworkid' when calling taskWorkReassignUsersTaskById(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkReassignUsersTaskByIdCall(taskworkid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call reassigns a task to selected users
     * 
     * @param taskworkid Taskwork identifier (required)
     * @return List&lt;UserCompleteDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserCompleteDTO> taskWorkReassignUsersTaskById(Integer taskworkid) throws ApiException {
        ApiResponse<List<UserCompleteDTO>> resp = taskWorkReassignUsersTaskByIdWithHttpInfo(taskworkid);
        return resp.getData();
    }

    /**
     * This call reassigns a task to selected users
     * 
     * @param taskworkid Taskwork identifier (required)
     * @return ApiResponse&lt;List&lt;UserCompleteDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserCompleteDTO>> taskWorkReassignUsersTaskByIdWithHttpInfo(Integer taskworkid) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkReassignUsersTaskByIdValidateBeforeCall(taskworkid, null, null);
        Type localVarReturnType = new TypeToken<List<UserCompleteDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call reassigns a task to selected users (asynchronously)
     * 
     * @param taskworkid Taskwork identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkReassignUsersTaskByIdAsync(Integer taskworkid, final ApiCallback<List<UserCompleteDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkReassignUsersTaskByIdValidateBeforeCall(taskworkid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserCompleteDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkSetProfileForTaskWorkBySelectionDocumentOperation
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param docnumbers  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetProfileForTaskWorkBySelectionDocumentOperationCall(Integer taskWorkId, String taskWorkDocumentOperationId, List<Integer> docnumbers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = docnumbers;

        // create path and map variables
        String localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/byselection"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "taskWorkDocumentOperationId" + "\\}", apiClient.escapeString(taskWorkDocumentOperationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkSetProfileForTaskWorkBySelectionDocumentOperationValidateBeforeCall(Integer taskWorkId, String taskWorkDocumentOperationId, List<Integer> docnumbers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkSetProfileForTaskWorkBySelectionDocumentOperation(Async)");
        }
        
        // verify the required parameter 'taskWorkDocumentOperationId' is set
        if (taskWorkDocumentOperationId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkDocumentOperationId' when calling taskWorkSetProfileForTaskWorkBySelectionDocumentOperation(Async)");
        }
        
        // verify the required parameter 'docnumbers' is set
        if (docnumbers == null) {
            throw new ApiException("Missing the required parameter 'docnumbers' when calling taskWorkSetProfileForTaskWorkBySelectionDocumentOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkSetProfileForTaskWorkBySelectionDocumentOperationCall(taskWorkId, taskWorkDocumentOperationId, docnumbers, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call adds a profile to process for a selection document taskwork operation
     * 
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param docnumbers  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkSetProfileForTaskWorkBySelectionDocumentOperation(Integer taskWorkId, String taskWorkDocumentOperationId, List<Integer> docnumbers) throws ApiException {
        taskWorkSetProfileForTaskWorkBySelectionDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, docnumbers);
    }

    /**
     * This call adds a profile to process for a selection document taskwork operation
     * 
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param docnumbers  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkSetProfileForTaskWorkBySelectionDocumentOperationWithHttpInfo(Integer taskWorkId, String taskWorkDocumentOperationId, List<Integer> docnumbers) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkSetProfileForTaskWorkBySelectionDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, docnumbers, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call adds a profile to process for a selection document taskwork operation (asynchronously)
     * 
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param docnumbers  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetProfileForTaskWorkBySelectionDocumentOperationAsync(Integer taskWorkId, String taskWorkDocumentOperationId, List<Integer> docnumbers, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkSetProfileForTaskWorkBySelectionDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, docnumbers, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for taskWorkSetProfileForTaskWorkMaskDocumentOperation
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param profile  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetProfileForTaskWorkMaskDocumentOperationCall(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bymask"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "taskWorkDocumentOperationId" + "\\}", apiClient.escapeString(taskWorkDocumentOperationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkSetProfileForTaskWorkMaskDocumentOperationValidateBeforeCall(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkSetProfileForTaskWorkMaskDocumentOperation(Async)");
        }
        
        // verify the required parameter 'taskWorkDocumentOperationId' is set
        if (taskWorkDocumentOperationId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkDocumentOperationId' when calling taskWorkSetProfileForTaskWorkMaskDocumentOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkSetProfileForTaskWorkMaskDocumentOperationCall(taskWorkId, taskWorkDocumentOperationId, profile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call profiles a new document for a mask insert document taskwork operation
     * 
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param profile  (optional)
     * @return ProfileResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProfileResultDTO taskWorkSetProfileForTaskWorkMaskDocumentOperation(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile) throws ApiException {
        ApiResponse<ProfileResultDTO> resp = taskWorkSetProfileForTaskWorkMaskDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
        return resp.getData();
    }

    /**
     * This call profiles a new document for a mask insert document taskwork operation
     * 
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param profile  (optional)
     * @return ApiResponse&lt;ProfileResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProfileResultDTO> taskWorkSetProfileForTaskWorkMaskDocumentOperationWithHttpInfo(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkSetProfileForTaskWorkMaskDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, profile, null, null);
        Type localVarReturnType = new TypeToken<ProfileResultDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call profiles a new document for a mask insert document taskwork operation (asynchronously)
     * 
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param profile  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetProfileForTaskWorkMaskDocumentOperationAsync(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile, final ApiCallback<ProfileResultDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkSetProfileForTaskWorkMaskDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, profile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProfileResultDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkSetProfileForTaskWorkModelDocumentOperation
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param profile  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetProfileForTaskWorkModelDocumentOperationCall(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bymodel"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "taskWorkDocumentOperationId" + "\\}", apiClient.escapeString(taskWorkDocumentOperationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkSetProfileForTaskWorkModelDocumentOperationValidateBeforeCall(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkSetProfileForTaskWorkModelDocumentOperation(Async)");
        }
        
        // verify the required parameter 'taskWorkDocumentOperationId' is set
        if (taskWorkDocumentOperationId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkDocumentOperationId' when calling taskWorkSetProfileForTaskWorkModelDocumentOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkSetProfileForTaskWorkModelDocumentOperationCall(taskWorkId, taskWorkDocumentOperationId, profile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call profiles a new document for a model insert document taskwork operation
     * 
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param profile  (optional)
     * @return ProfileResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProfileResultDTO taskWorkSetProfileForTaskWorkModelDocumentOperation(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile) throws ApiException {
        ApiResponse<ProfileResultDTO> resp = taskWorkSetProfileForTaskWorkModelDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
        return resp.getData();
    }

    /**
     * This call profiles a new document for a model insert document taskwork operation
     * 
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param profile  (optional)
     * @return ApiResponse&lt;ProfileResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProfileResultDTO> taskWorkSetProfileForTaskWorkModelDocumentOperationWithHttpInfo(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkSetProfileForTaskWorkModelDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, profile, null, null);
        Type localVarReturnType = new TypeToken<ProfileResultDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call profiles a new document for a model insert document taskwork operation (asynchronously)
     * 
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param profile  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetProfileForTaskWorkModelDocumentOperationAsync(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile, final ApiCallback<ProfileResultDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkSetProfileForTaskWorkModelDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, profile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProfileResultDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkSetProfileForTaskWorkStandardDocumentOperation
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param profile  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetProfileForTaskWorkStandardDocumentOperationCall(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/api/TaskWork/{taskWorkId}/documentsoperations/{taskWorkDocumentOperationId}/bystandard"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "taskWorkDocumentOperationId" + "\\}", apiClient.escapeString(taskWorkDocumentOperationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkSetProfileForTaskWorkStandardDocumentOperationValidateBeforeCall(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkSetProfileForTaskWorkStandardDocumentOperation(Async)");
        }
        
        // verify the required parameter 'taskWorkDocumentOperationId' is set
        if (taskWorkDocumentOperationId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkDocumentOperationId' when calling taskWorkSetProfileForTaskWorkStandardDocumentOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkSetProfileForTaskWorkStandardDocumentOperationCall(taskWorkId, taskWorkDocumentOperationId, profile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call profiles a new document for a standard insert document taskwork operation
     * 
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param profile  (optional)
     * @return ProfileResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProfileResultDTO taskWorkSetProfileForTaskWorkStandardDocumentOperation(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile) throws ApiException {
        ApiResponse<ProfileResultDTO> resp = taskWorkSetProfileForTaskWorkStandardDocumentOperationWithHttpInfo(taskWorkId, taskWorkDocumentOperationId, profile);
        return resp.getData();
    }

    /**
     * This call profiles a new document for a standard insert document taskwork operation
     * 
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param profile  (optional)
     * @return ApiResponse&lt;ProfileResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProfileResultDTO> taskWorkSetProfileForTaskWorkStandardDocumentOperationWithHttpInfo(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkSetProfileForTaskWorkStandardDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, profile, null, null);
        Type localVarReturnType = new TypeToken<ProfileResultDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call profiles a new document for a standard insert document taskwork operation (asynchronously)
     * 
     * @param taskWorkId Taskwork identifie (required)
     * @param taskWorkDocumentOperationId Id of the operation (required)
     * @param profile  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetProfileForTaskWorkStandardDocumentOperationAsync(Integer taskWorkId, String taskWorkDocumentOperationId, ProfileDTO profile, final ApiCallback<ProfileResultDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkSetProfileForTaskWorkStandardDocumentOperationValidateBeforeCall(taskWorkId, taskWorkDocumentOperationId, profile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProfileResultDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkSetTaskPriority
     * @param taskIds List of task identifier (required)
     * @param priority Priority (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetTaskPriorityCall(List<Integer> taskIds, Integer priority, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskIds;

        // create path and map variables
        String localVarPath = "/api/TaskWork/priority/{priority}"
            .replaceAll("\\{" + "priority" + "\\}", apiClient.escapeString(priority.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkSetTaskPriorityValidateBeforeCall(List<Integer> taskIds, Integer priority, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskIds' is set
        if (taskIds == null) {
            throw new ApiException("Missing the required parameter 'taskIds' when calling taskWorkSetTaskPriority(Async)");
        }
        
        // verify the required parameter 'priority' is set
        if (priority == null) {
            throw new ApiException("Missing the required parameter 'priority' when calling taskWorkSetTaskPriority(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkSetTaskPriorityCall(taskIds, priority, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call sets the tasks priority
     * 
     * @param taskIds List of task identifier (required)
     * @param priority Priority (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer taskWorkSetTaskPriority(List<Integer> taskIds, Integer priority) throws ApiException {
        ApiResponse<Integer> resp = taskWorkSetTaskPriorityWithHttpInfo(taskIds, priority);
        return resp.getData();
    }

    /**
     * This call sets the tasks priority
     * 
     * @param taskIds List of task identifier (required)
     * @param priority Priority (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> taskWorkSetTaskPriorityWithHttpInfo(List<Integer> taskIds, Integer priority) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkSetTaskPriorityValidateBeforeCall(taskIds, priority, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call sets the tasks priority (asynchronously)
     * 
     * @param taskIds List of task identifier (required)
     * @param priority Priority (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetTaskPriorityAsync(List<Integer> taskIds, Integer priority, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkSetTaskPriorityValidateBeforeCall(taskIds, priority, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkSetTaskRead
     * @param taskid Task Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetTaskReadCall(List<Integer> taskid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskid;

        // create path and map variables
        String localVarPath = "/api/TaskWork/read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkSetTaskReadValidateBeforeCall(List<Integer> taskid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskid' is set
        if (taskid == null) {
            throw new ApiException("Missing the required parameter 'taskid' when calling taskWorkSetTaskRead(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkSetTaskReadCall(taskid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call sets the task as read
     * 
     * @param taskid Task Identifier (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer taskWorkSetTaskRead(List<Integer> taskid) throws ApiException {
        ApiResponse<Integer> resp = taskWorkSetTaskReadWithHttpInfo(taskid);
        return resp.getData();
    }

    /**
     * This call sets the task as read
     * 
     * @param taskid Task Identifier (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> taskWorkSetTaskReadWithHttpInfo(List<Integer> taskid) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkSetTaskReadValidateBeforeCall(taskid, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call sets the task as read (asynchronously)
     * 
     * @param taskid Task Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetTaskReadAsync(List<Integer> taskid, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkSetTaskReadValidateBeforeCall(taskid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkSetTaskUnRead
     * @param taskIds List of task identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetTaskUnReadCall(List<Integer> taskIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taskIds;

        // create path and map variables
        String localVarPath = "/api/TaskWork/unread";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkSetTaskUnReadValidateBeforeCall(List<Integer> taskIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskIds' is set
        if (taskIds == null) {
            throw new ApiException("Missing the required parameter 'taskIds' when calling taskWorkSetTaskUnRead(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkSetTaskUnReadCall(taskIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call sets the tasks as unread
     * 
     * @param taskIds List of task identifier (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer taskWorkSetTaskUnRead(List<Integer> taskIds) throws ApiException {
        ApiResponse<Integer> resp = taskWorkSetTaskUnReadWithHttpInfo(taskIds);
        return resp.getData();
    }

    /**
     * This call sets the tasks as unread
     * 
     * @param taskIds List of task identifier (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> taskWorkSetTaskUnReadWithHttpInfo(List<Integer> taskIds) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkSetTaskUnReadValidateBeforeCall(taskIds, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call sets the tasks as unread (asynchronously)
     * 
     * @param taskIds List of task identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkSetTaskUnReadAsync(List<Integer> taskIds, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkSetTaskUnReadValidateBeforeCall(taskIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for taskWorkTaskWorkTakeCharge
     * @param taskWorkId Taskwork identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskWorkTaskWorkTakeChargeCall(Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/TaskWork/{taskWorkId}/TakeCharge"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call taskWorkTaskWorkTakeChargeValidateBeforeCall(Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling taskWorkTaskWorkTakeCharge(Async)");
        }
        

        com.squareup.okhttp.Call call = taskWorkTaskWorkTakeChargeCall(taskWorkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call takes charge of a taskwork
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void taskWorkTaskWorkTakeCharge(Integer taskWorkId) throws ApiException {
        taskWorkTaskWorkTakeChargeWithHttpInfo(taskWorkId);
    }

    /**
     * This call takes charge of a taskwork
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> taskWorkTaskWorkTakeChargeWithHttpInfo(Integer taskWorkId) throws ApiException {
        com.squareup.okhttp.Call call = taskWorkTaskWorkTakeChargeValidateBeforeCall(taskWorkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call takes charge of a taskwork (asynchronously)
     * 
     * @param taskWorkId Taskwork identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call taskWorkTaskWorkTakeChargeAsync(Integer taskWorkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskWorkTaskWorkTakeChargeValidateBeforeCall(taskWorkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
