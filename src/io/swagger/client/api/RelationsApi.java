/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.RelationCriteriaDTO;
import io.swagger.client.model.RelationExploredDTO;
import io.swagger.client.model.RelationInsertDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RelationsApi {
    private ApiClient apiClient;

    public RelationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RelationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for relationsDeleteByDocNumberFromDocNumberTo
     * @param fromDocnumber Document identifier of the \&quot;from\&quot; profile (required)
     * @param toDocnumber Document identifier of the \&quot;to\&quot; profile (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call relationsDeleteByDocNumberFromDocNumberToCall(Integer fromDocnumber, Integer toDocnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Relations/{fromDocnumber}/{toDocnumber}"
            .replaceAll("\\{" + "fromDocnumber" + "\\}", apiClient.escapeString(fromDocnumber.toString()))
            .replaceAll("\\{" + "toDocnumber" + "\\}", apiClient.escapeString(toDocnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call relationsDeleteByDocNumberFromDocNumberToValidateBeforeCall(Integer fromDocnumber, Integer toDocnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fromDocnumber' is set
        if (fromDocnumber == null) {
            throw new ApiException("Missing the required parameter 'fromDocnumber' when calling relationsDeleteByDocNumberFromDocNumberTo(Async)");
        }
        
        // verify the required parameter 'toDocnumber' is set
        if (toDocnumber == null) {
            throw new ApiException("Missing the required parameter 'toDocnumber' when calling relationsDeleteByDocNumberFromDocNumberTo(Async)");
        }
        

        com.squareup.okhttp.Call call = relationsDeleteByDocNumberFromDocNumberToCall(fromDocnumber, toDocnumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a criteria by from and to profiles
     * 
     * @param fromDocnumber Document identifier of the \&quot;from\&quot; profile (required)
     * @param toDocnumber Document identifier of the \&quot;to\&quot; profile (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void relationsDeleteByDocNumberFromDocNumberTo(Integer fromDocnumber, Integer toDocnumber) throws ApiException {
        relationsDeleteByDocNumberFromDocNumberToWithHttpInfo(fromDocnumber, toDocnumber);
    }

    /**
     * This call deletes a criteria by from and to profiles
     * 
     * @param fromDocnumber Document identifier of the \&quot;from\&quot; profile (required)
     * @param toDocnumber Document identifier of the \&quot;to\&quot; profile (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> relationsDeleteByDocNumberFromDocNumberToWithHttpInfo(Integer fromDocnumber, Integer toDocnumber) throws ApiException {
        com.squareup.okhttp.Call call = relationsDeleteByDocNumberFromDocNumberToValidateBeforeCall(fromDocnumber, toDocnumber, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes a criteria by from and to profiles (asynchronously)
     * 
     * @param fromDocnumber Document identifier of the \&quot;from\&quot; profile (required)
     * @param toDocnumber Document identifier of the \&quot;to\&quot; profile (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call relationsDeleteByDocNumberFromDocNumberToAsync(Integer fromDocnumber, Integer toDocnumber, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = relationsDeleteByDocNumberFromDocNumberToValidateBeforeCall(fromDocnumber, toDocnumber, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for relationsGetById
     * @param criteria Relation search criteria (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call relationsGetByIdCall(RelationCriteriaDTO criteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = criteria;

        // create path and map variables
        String localVarPath = "/api/Relations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call relationsGetByIdValidateBeforeCall(RelationCriteriaDTO criteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'criteria' is set
        if (criteria == null) {
            throw new ApiException("Missing the required parameter 'criteria' when calling relationsGetById(Async)");
        }
        

        com.squareup.okhttp.Call call = relationsGetByIdCall(criteria, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a relation by docnumber relation by exploring method
     * 
     * @param criteria Relation search criteria (required)
     * @return RelationExploredDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RelationExploredDTO relationsGetById(RelationCriteriaDTO criteria) throws ApiException {
        ApiResponse<RelationExploredDTO> resp = relationsGetByIdWithHttpInfo(criteria);
        return resp.getData();
    }

    /**
     * This call returns a relation by docnumber relation by exploring method
     * 
     * @param criteria Relation search criteria (required)
     * @return ApiResponse&lt;RelationExploredDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RelationExploredDTO> relationsGetByIdWithHttpInfo(RelationCriteriaDTO criteria) throws ApiException {
        com.squareup.okhttp.Call call = relationsGetByIdValidateBeforeCall(criteria, null, null);
        Type localVarReturnType = new TypeToken<RelationExploredDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a relation by docnumber relation by exploring method (asynchronously)
     * 
     * @param criteria Relation search criteria (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call relationsGetByIdAsync(RelationCriteriaDTO criteria, final ApiCallback<RelationExploredDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = relationsGetByIdValidateBeforeCall(criteria, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RelationExploredDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for relationsInsertNewRelation
     * @param relationInsertDto Relation to insert (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call relationsInsertNewRelationCall(RelationInsertDTO relationInsertDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = relationInsertDto;

        // create path and map variables
        String localVarPath = "/api/Relations/Insert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call relationsInsertNewRelationValidateBeforeCall(RelationInsertDTO relationInsertDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'relationInsertDto' is set
        if (relationInsertDto == null) {
            throw new ApiException("Missing the required parameter 'relationInsertDto' when calling relationsInsertNewRelation(Async)");
        }
        

        com.squareup.okhttp.Call call = relationsInsertNewRelationCall(relationInsertDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call adds a new Relation
     * 
     * @param relationInsertDto Relation to insert (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void relationsInsertNewRelation(RelationInsertDTO relationInsertDto) throws ApiException {
        relationsInsertNewRelationWithHttpInfo(relationInsertDto);
    }

    /**
     * This call adds a new Relation
     * 
     * @param relationInsertDto Relation to insert (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> relationsInsertNewRelationWithHttpInfo(RelationInsertDTO relationInsertDto) throws ApiException {
        com.squareup.okhttp.Call call = relationsInsertNewRelationValidateBeforeCall(relationInsertDto, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call adds a new Relation (asynchronously)
     * 
     * @param relationInsertDto Relation to insert (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call relationsInsertNewRelationAsync(RelationInsertDTO relationInsertDto, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = relationsInsertNewRelationValidateBeforeCall(relationInsertDto, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for relationsRecalculateRelation
     * @param docnumber Document identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call relationsRecalculateRelationCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Relations/{docnumber}"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call relationsRecalculateRelationValidateBeforeCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling relationsRecalculateRelation(Async)");
        }
        

        com.squareup.okhttp.Call call = relationsRecalculateRelationCall(docnumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call recalculate the relations of a document
     * 
     * @param docnumber Document identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void relationsRecalculateRelation(Integer docnumber) throws ApiException {
        relationsRecalculateRelationWithHttpInfo(docnumber);
    }

    /**
     * This call recalculate the relations of a document
     * 
     * @param docnumber Document identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> relationsRecalculateRelationWithHttpInfo(Integer docnumber) throws ApiException {
        com.squareup.okhttp.Call call = relationsRecalculateRelationValidateBeforeCall(docnumber, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call recalculate the relations of a document (asynchronously)
     * 
     * @param docnumber Document identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call relationsRecalculateRelationAsync(Integer docnumber, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = relationsRecalculateRelationValidateBeforeCall(docnumber, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
