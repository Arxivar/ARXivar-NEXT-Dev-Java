/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.RowSearchResult;
import io.swagger.client.model.SelectDTO;
import io.swagger.client.model.StateExceptionDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CheckInOutApi {
    private ApiClient apiClient;

    public CheckInOutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CheckInOutApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for checkInOutCheckIn
     * @param docnumber Identifier of the document you want to checkin (required)
     * @param fileId Identifier of file you want to upload (required)
     * @param option State option (required)
     * @param undoCheckOut If import fails execute undo checkout (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkInOutCheckInCall(Integer docnumber, String fileId, Integer option, Boolean undoCheckOut, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/CheckInOut/checkIn/{docnumber}/{fileId}/{option}/{undoCheckOut}"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()))
            .replaceAll("\\{" + "option" + "\\}", apiClient.escapeString(option.toString()))
            .replaceAll("\\{" + "undoCheckOut" + "\\}", apiClient.escapeString(undoCheckOut.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkInOutCheckInValidateBeforeCall(Integer docnumber, String fileId, Integer option, Boolean undoCheckOut, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling checkInOutCheckIn(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling checkInOutCheckIn(Async)");
        }
        
        // verify the required parameter 'option' is set
        if (option == null) {
            throw new ApiException("Missing the required parameter 'option' when calling checkInOutCheckIn(Async)");
        }
        
        // verify the required parameter 'undoCheckOut' is set
        if (undoCheckOut == null) {
            throw new ApiException("Missing the required parameter 'undoCheckOut' when calling checkInOutCheckIn(Async)");
        }
        

        com.squareup.okhttp.Call call = checkInOutCheckInCall(docnumber, fileId, option, undoCheckOut, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call set file and remove document from checkout list
     * 
     * @param docnumber Identifier of the document you want to checkin (required)
     * @param fileId Identifier of file you want to upload (required)
     * @param option State option (required)
     * @param undoCheckOut If import fails execute undo checkout (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void checkInOutCheckIn(Integer docnumber, String fileId, Integer option, Boolean undoCheckOut) throws ApiException {
        checkInOutCheckInWithHttpInfo(docnumber, fileId, option, undoCheckOut);
    }

    /**
     * This call set file and remove document from checkout list
     * 
     * @param docnumber Identifier of the document you want to checkin (required)
     * @param fileId Identifier of file you want to upload (required)
     * @param option State option (required)
     * @param undoCheckOut If import fails execute undo checkout (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> checkInOutCheckInWithHttpInfo(Integer docnumber, String fileId, Integer option, Boolean undoCheckOut) throws ApiException {
        com.squareup.okhttp.Call call = checkInOutCheckInValidateBeforeCall(docnumber, fileId, option, undoCheckOut, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call set file and remove document from checkout list (asynchronously)
     * 
     * @param docnumber Identifier of the document you want to checkin (required)
     * @param fileId Identifier of file you want to upload (required)
     * @param option State option (required)
     * @param undoCheckOut If import fails execute undo checkout (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkInOutCheckInAsync(Integer docnumber, String fileId, Integer option, Boolean undoCheckOut, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkInOutCheckInValidateBeforeCall(docnumber, fileId, option, undoCheckOut, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for checkInOutCheckInForTask
     * @param processDocId Identifier of the document you want to checkin (required)
     * @param taskWorkId Identifier of the document you want to checkin (required)
     * @param fileId Identifier of file you want to upload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkInOutCheckInForTaskCall(Integer processDocId, Integer taskWorkId, String fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/CheckInOut/checkInForTask/{processDocId}/{taskWorkId}/{fileId}"
            .replaceAll("\\{" + "processDocId" + "\\}", apiClient.escapeString(processDocId.toString()))
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "fileId" + "\\}", apiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkInOutCheckInForTaskValidateBeforeCall(Integer processDocId, Integer taskWorkId, String fileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDocId' is set
        if (processDocId == null) {
            throw new ApiException("Missing the required parameter 'processDocId' when calling checkInOutCheckInForTask(Async)");
        }
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling checkInOutCheckInForTask(Async)");
        }
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling checkInOutCheckInForTask(Async)");
        }
        

        com.squareup.okhttp.Call call = checkInOutCheckInForTaskCall(processDocId, taskWorkId, fileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call set file and remove document from checkout list when document is used in taskwork
     * 
     * @param processDocId Identifier of the document you want to checkin (required)
     * @param taskWorkId Identifier of the document you want to checkin (required)
     * @param fileId Identifier of file you want to upload (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void checkInOutCheckInForTask(Integer processDocId, Integer taskWorkId, String fileId) throws ApiException {
        checkInOutCheckInForTaskWithHttpInfo(processDocId, taskWorkId, fileId);
    }

    /**
     * This call set file and remove document from checkout list when document is used in taskwork
     * 
     * @param processDocId Identifier of the document you want to checkin (required)
     * @param taskWorkId Identifier of the document you want to checkin (required)
     * @param fileId Identifier of file you want to upload (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> checkInOutCheckInForTaskWithHttpInfo(Integer processDocId, Integer taskWorkId, String fileId) throws ApiException {
        com.squareup.okhttp.Call call = checkInOutCheckInForTaskValidateBeforeCall(processDocId, taskWorkId, fileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call set file and remove document from checkout list when document is used in taskwork (asynchronously)
     * 
     * @param processDocId Identifier of the document you want to checkin (required)
     * @param taskWorkId Identifier of the document you want to checkin (required)
     * @param fileId Identifier of file you want to upload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkInOutCheckInForTaskAsync(Integer processDocId, Integer taskWorkId, String fileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkInOutCheckInForTaskValidateBeforeCall(processDocId, taskWorkId, fileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for checkInOutCheckOut
     * @param docNumber The identifier of document to checkout (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkInOutCheckOutCall(Integer docNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/CheckInOut/checkOut/{docNumber}"
            .replaceAll("\\{" + "docNumber" + "\\}", apiClient.escapeString(docNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkInOutCheckOutValidateBeforeCall(Integer docNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docNumber' is set
        if (docNumber == null) {
            throw new ApiException("Missing the required parameter 'docNumber' when calling checkInOutCheckOut(Async)");
        }
        

        com.squareup.okhttp.Call call = checkInOutCheckOutCall(docNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call allows checkout document
     * 
     * @param docNumber The identifier of document to checkout (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void checkInOutCheckOut(Integer docNumber) throws ApiException {
        checkInOutCheckOutWithHttpInfo(docNumber);
    }

    /**
     * This call allows checkout document
     * 
     * @param docNumber The identifier of document to checkout (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> checkInOutCheckOutWithHttpInfo(Integer docNumber) throws ApiException {
        com.squareup.okhttp.Call call = checkInOutCheckOutValidateBeforeCall(docNumber, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call allows checkout document (asynchronously)
     * 
     * @param docNumber The identifier of document to checkout (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkInOutCheckOutAsync(Integer docNumber, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkInOutCheckOutValidateBeforeCall(docNumber, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for checkInOutCheckOutForTask
     * @param processDocId The process document identifier of profile to checkout (required)
     * @param taskWorkId The taskWork identifier for the profile to checkout (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkInOutCheckOutForTaskCall(Integer processDocId, Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/CheckInOut/checkOutTask/{processDocId}/{taskWorkId}"
            .replaceAll("\\{" + "processDocId" + "\\}", apiClient.escapeString(processDocId.toString()))
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkInOutCheckOutForTaskValidateBeforeCall(Integer processDocId, Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDocId' is set
        if (processDocId == null) {
            throw new ApiException("Missing the required parameter 'processDocId' when calling checkInOutCheckOutForTask(Async)");
        }
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling checkInOutCheckOutForTask(Async)");
        }
        

        com.squareup.okhttp.Call call = checkInOutCheckOutForTaskCall(processDocId, taskWorkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call allows checkout document for task
     * 
     * @param processDocId The process document identifier of profile to checkout (required)
     * @param taskWorkId The taskWork identifier for the profile to checkout (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void checkInOutCheckOutForTask(Integer processDocId, Integer taskWorkId) throws ApiException {
        checkInOutCheckOutForTaskWithHttpInfo(processDocId, taskWorkId);
    }

    /**
     * This call allows checkout document for task
     * 
     * @param processDocId The process document identifier of profile to checkout (required)
     * @param taskWorkId The taskWork identifier for the profile to checkout (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> checkInOutCheckOutForTaskWithHttpInfo(Integer processDocId, Integer taskWorkId) throws ApiException {
        com.squareup.okhttp.Call call = checkInOutCheckOutForTaskValidateBeforeCall(processDocId, taskWorkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call allows checkout document for task (asynchronously)
     * 
     * @param processDocId The process document identifier of profile to checkout (required)
     * @param taskWorkId The taskWork identifier for the profile to checkout (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkInOutCheckOutForTaskAsync(Integer processDocId, Integer taskWorkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkInOutCheckOutForTaskValidateBeforeCall(processDocId, taskWorkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for checkInOutGetCheckOutProfilesList
     * @param selectDto Seleted data for search (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkInOutGetCheckOutProfilesListCall(SelectDTO selectDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = selectDto;

        // create path and map variables
        String localVarPath = "/api/CheckInOut";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkInOutGetCheckOutProfilesListValidateBeforeCall(SelectDTO selectDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'selectDto' is set
        if (selectDto == null) {
            throw new ApiException("Missing the required parameter 'selectDto' when calling checkInOutGetCheckOutProfilesList(Async)");
        }
        

        com.squareup.okhttp.Call call = checkInOutGetCheckOutProfilesListCall(selectDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call allows the retrieval of the default profile for archiving based on user connected
     * 
     * @param selectDto Seleted data for search (required)
     * @return List&lt;RowSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RowSearchResult> checkInOutGetCheckOutProfilesList(SelectDTO selectDto) throws ApiException {
        ApiResponse<List<RowSearchResult>> resp = checkInOutGetCheckOutProfilesListWithHttpInfo(selectDto);
        return resp.getData();
    }

    /**
     * This call allows the retrieval of the default profile for archiving based on user connected
     * 
     * @param selectDto Seleted data for search (required)
     * @return ApiResponse&lt;List&lt;RowSearchResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RowSearchResult>> checkInOutGetCheckOutProfilesListWithHttpInfo(SelectDTO selectDto) throws ApiException {
        com.squareup.okhttp.Call call = checkInOutGetCheckOutProfilesListValidateBeforeCall(selectDto, null, null);
        Type localVarReturnType = new TypeToken<List<RowSearchResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call allows the retrieval of the default profile for archiving based on user connected (asynchronously)
     * 
     * @param selectDto Seleted data for search (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkInOutGetCheckOutProfilesListAsync(SelectDTO selectDto, final ApiCallback<List<RowSearchResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkInOutGetCheckOutProfilesListValidateBeforeCall(selectDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RowSearchResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkInOutIsAlreadyInCheckOutByUserConnected
     * @param docnumber Document identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkInOutIsAlreadyInCheckOutByUserConnectedCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/CheckInOut/isInCheckOut/{docnumber}"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkInOutIsAlreadyInCheckOutByUserConnectedValidateBeforeCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling checkInOutIsAlreadyInCheckOutByUserConnected(Async)");
        }
        

        com.squareup.okhttp.Call call = checkInOutIsAlreadyInCheckOutByUserConnectedCall(docnumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call allows to know if the document is in checkout
     * 
     * @param docnumber Document identifier (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean checkInOutIsAlreadyInCheckOutByUserConnected(Integer docnumber) throws ApiException {
        ApiResponse<Boolean> resp = checkInOutIsAlreadyInCheckOutByUserConnectedWithHttpInfo(docnumber);
        return resp.getData();
    }

    /**
     * This call allows to know if the document is in checkout
     * 
     * @param docnumber Document identifier (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> checkInOutIsAlreadyInCheckOutByUserConnectedWithHttpInfo(Integer docnumber) throws ApiException {
        com.squareup.okhttp.Call call = checkInOutIsAlreadyInCheckOutByUserConnectedValidateBeforeCall(docnumber, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call allows to know if the document is in checkout (asynchronously)
     * 
     * @param docnumber Document identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkInOutIsAlreadyInCheckOutByUserConnectedAsync(Integer docnumber, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkInOutIsAlreadyInCheckOutByUserConnectedValidateBeforeCall(docnumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkInOutUndoCheckOut
     * @param docNumbers Array of document identifiers (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkInOutUndoCheckOutCall(List<Integer> docNumbers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = docNumbers;

        // create path and map variables
        String localVarPath = "/api/CheckInOut/undoCheckOut";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkInOutUndoCheckOutValidateBeforeCall(List<Integer> docNumbers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docNumbers' is set
        if (docNumbers == null) {
            throw new ApiException("Missing the required parameter 'docNumbers' when calling checkInOutUndoCheckOut(Async)");
        }
        

        com.squareup.okhttp.Call call = checkInOutUndoCheckOutCall(docNumbers, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call allows undo checkout document
     * 
     * @param docNumbers Array of document identifiers (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void checkInOutUndoCheckOut(List<Integer> docNumbers) throws ApiException {
        checkInOutUndoCheckOutWithHttpInfo(docNumbers);
    }

    /**
     * This call allows undo checkout document
     * 
     * @param docNumbers Array of document identifiers (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> checkInOutUndoCheckOutWithHttpInfo(List<Integer> docNumbers) throws ApiException {
        com.squareup.okhttp.Call call = checkInOutUndoCheckOutValidateBeforeCall(docNumbers, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call allows undo checkout document (asynchronously)
     * 
     * @param docNumbers Array of document identifiers (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkInOutUndoCheckOutAsync(List<Integer> docNumbers, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkInOutUndoCheckOutValidateBeforeCall(docNumbers, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for checkInOutUndoCheckOutForTask
     * @param processDocId The process document identifier of profile to checkout (required)
     * @param taskWorkId The taskWork identifier for the profile to checkout (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkInOutUndoCheckOutForTaskCall(Integer processDocId, Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/CheckInOut/undoCheckOutForTask/{processDocId}/{taskWorkId}"
            .replaceAll("\\{" + "processDocId" + "\\}", apiClient.escapeString(processDocId.toString()))
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkInOutUndoCheckOutForTaskValidateBeforeCall(Integer processDocId, Integer taskWorkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'processDocId' is set
        if (processDocId == null) {
            throw new ApiException("Missing the required parameter 'processDocId' when calling checkInOutUndoCheckOutForTask(Async)");
        }
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling checkInOutUndoCheckOutForTask(Async)");
        }
        

        com.squareup.okhttp.Call call = checkInOutUndoCheckOutForTaskCall(processDocId, taskWorkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call allows undo checkout document for task
     * 
     * @param processDocId The process document identifier of profile to checkout (required)
     * @param taskWorkId The taskWork identifier for the profile to checkout (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void checkInOutUndoCheckOutForTask(Integer processDocId, Integer taskWorkId) throws ApiException {
        checkInOutUndoCheckOutForTaskWithHttpInfo(processDocId, taskWorkId);
    }

    /**
     * This call allows undo checkout document for task
     * 
     * @param processDocId The process document identifier of profile to checkout (required)
     * @param taskWorkId The taskWork identifier for the profile to checkout (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> checkInOutUndoCheckOutForTaskWithHttpInfo(Integer processDocId, Integer taskWorkId) throws ApiException {
        com.squareup.okhttp.Call call = checkInOutUndoCheckOutForTaskValidateBeforeCall(processDocId, taskWorkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call allows undo checkout document for task (asynchronously)
     * 
     * @param processDocId The process document identifier of profile to checkout (required)
     * @param taskWorkId The taskWork identifier for the profile to checkout (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkInOutUndoCheckOutForTaskAsync(Integer processDocId, Integer taskWorkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkInOutUndoCheckOutForTaskValidateBeforeCall(processDocId, taskWorkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
