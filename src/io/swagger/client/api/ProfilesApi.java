/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.EditProfileSchemaDTO;
import io.swagger.client.model.FieldBaseDTO;
import io.swagger.client.model.FieldFilterDTO;
import io.swagger.client.model.FieldFormulaCalculateArchiveCriteriaDto;
import io.swagger.client.model.FieldValuesArchiveCriteriaDto;
import io.swagger.client.model.FieldValuesDTO;
import io.swagger.client.model.GetByDocumentTypeRequestDTO;
import io.swagger.client.model.MaskProfileSchemaDTO;
import io.swagger.client.model.ProfileDTO;
import io.swagger.client.model.ProfilePostExceptionDTO;
import io.swagger.client.model.ProfileResultDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProfilesApi {
    private ApiClient apiClient;

    public ProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProfilesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for profilesArchiveMonitoredFolderFileFromBufferAutomatic
     * @param bufferId File from monitored folder in buffer (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesArchiveMonitoredFolderFileFromBufferAutomaticCall(String bufferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/formonitoredfolder/{bufferId}"
            .replaceAll("\\{" + "bufferId" + "\\}", apiClient.escapeString(bufferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesArchiveMonitoredFolderFileFromBufferAutomaticValidateBeforeCall(String bufferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bufferId' is set
        if (bufferId == null) {
            throw new ApiException("Missing the required parameter 'bufferId' when calling profilesArchiveMonitoredFolderFileFromBufferAutomatic(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesArchiveMonitoredFolderFileFromBufferAutomaticCall(bufferId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call insert new profile from automatic monitored folder file
     * 
     * @param bufferId File from monitored folder in buffer (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void profilesArchiveMonitoredFolderFileFromBufferAutomatic(String bufferId) throws ApiException {
        profilesArchiveMonitoredFolderFileFromBufferAutomaticWithHttpInfo(bufferId);
    }

    /**
     * This call insert new profile from automatic monitored folder file
     * 
     * @param bufferId File from monitored folder in buffer (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> profilesArchiveMonitoredFolderFileFromBufferAutomaticWithHttpInfo(String bufferId) throws ApiException {
        com.squareup.okhttp.Call call = profilesArchiveMonitoredFolderFileFromBufferAutomaticValidateBeforeCall(bufferId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call insert new profile from automatic monitored folder file (asynchronously)
     * 
     * @param bufferId File from monitored folder in buffer (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesArchiveMonitoredFolderFileFromBufferAutomaticAsync(String bufferId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesArchiveMonitoredFolderFileFromBufferAutomaticValidateBeforeCall(bufferId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for profilesDeleteProfile
     * @param docNumber Document Identfier to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesDeleteProfileCall(Integer docNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/{docNumber}"
            .replaceAll("\\{" + "docNumber" + "\\}", apiClient.escapeString(docNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesDeleteProfileValidateBeforeCall(Integer docNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docNumber' is set
        if (docNumber == null) {
            throw new ApiException("Missing the required parameter 'docNumber' when calling profilesDeleteProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesDeleteProfileCall(docNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a document
     * 
     * @param docNumber Document Identfier to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void profilesDeleteProfile(Integer docNumber) throws ApiException {
        profilesDeleteProfileWithHttpInfo(docNumber);
    }

    /**
     * This call deletes a document
     * 
     * @param docNumber Document Identfier to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> profilesDeleteProfileWithHttpInfo(Integer docNumber) throws ApiException {
        com.squareup.okhttp.Call call = profilesDeleteProfileValidateBeforeCall(docNumber, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes a document (asynchronously)
     * 
     * @param docNumber Document Identfier to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesDeleteProfileAsync(Integer docNumber, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesDeleteProfileValidateBeforeCall(docNumber, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for profilesGet
     * @param docNumber Document Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGetCall(Integer docNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/detail/{docNumber}"
            .replaceAll("\\{" + "docNumber" + "\\}", apiClient.escapeString(docNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetValidateBeforeCall(Integer docNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docNumber' is set
        if (docNumber == null) {
            throw new ApiException("Missing the required parameter 'docNumber' when calling profilesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesGetCall(docNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the mask schema of a document
     * 
     * @param docNumber Document Identifier (required)
     * @return MaskProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskProfileSchemaDTO profilesGet(Integer docNumber) throws ApiException {
        ApiResponse<MaskProfileSchemaDTO> resp = profilesGetWithHttpInfo(docNumber);
        return resp.getData();
    }

    /**
     * This call returns the mask schema of a document
     * 
     * @param docNumber Document Identifier (required)
     * @return ApiResponse&lt;MaskProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskProfileSchemaDTO> profilesGetWithHttpInfo(Integer docNumber) throws ApiException {
        com.squareup.okhttp.Call call = profilesGetValidateBeforeCall(docNumber, null, null);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the mask schema of a document (asynchronously)
     * 
     * @param docNumber Document Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGetAsync(Integer docNumber, final ApiCallback<MaskProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetValidateBeforeCall(docNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGetAdditionalByClasse
     * @param tipoUno Document Type Identifier of first level (required)
     * @param tipoDue DocumentType Identifier of second level (required)
     * @param tipoTre DocumentType Identifier of third level (required)
     * @param aoo Business unit code (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGetAdditionalByClasseCall(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}"
            .replaceAll("\\{" + "tipoUno" + "\\}", apiClient.escapeString(tipoUno.toString()))
            .replaceAll("\\{" + "tipoDue" + "\\}", apiClient.escapeString(tipoDue.toString()))
            .replaceAll("\\{" + "tipoTre" + "\\}", apiClient.escapeString(tipoTre.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (aoo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("aoo", aoo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetAdditionalByClasseValidateBeforeCall(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tipoUno' is set
        if (tipoUno == null) {
            throw new ApiException("Missing the required parameter 'tipoUno' when calling profilesGetAdditionalByClasse(Async)");
        }
        
        // verify the required parameter 'tipoDue' is set
        if (tipoDue == null) {
            throw new ApiException("Missing the required parameter 'tipoDue' when calling profilesGetAdditionalByClasse(Async)");
        }
        
        // verify the required parameter 'tipoTre' is set
        if (tipoTre == null) {
            throw new ApiException("Missing the required parameter 'tipoTre' when calling profilesGetAdditionalByClasse(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesGetAdditionalByClasseCall(tipoUno, tipoDue, tipoTre, aoo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
     * 
     * @param tipoUno Document Type Identifier of first level (required)
     * @param tipoDue DocumentType Identifier of second level (required)
     * @param tipoTre DocumentType Identifier of third level (required)
     * @param aoo Business unit code (optional)
     * @return List&lt;FieldBaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FieldBaseDTO> profilesGetAdditionalByClasse(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo) throws ApiException {
        ApiResponse<List<FieldBaseDTO>> resp = profilesGetAdditionalByClasseWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
        return resp.getData();
    }

    /**
     * This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
     * 
     * @param tipoUno Document Type Identifier of first level (required)
     * @param tipoDue DocumentType Identifier of second level (required)
     * @param tipoTre DocumentType Identifier of third level (required)
     * @param aoo Business unit code (optional)
     * @return ApiResponse&lt;List&lt;FieldBaseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FieldBaseDTO>> profilesGetAdditionalByClasseWithHttpInfo(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo) throws ApiException {
        com.squareup.okhttp.Call call = profilesGetAdditionalByClasseValidateBeforeCall(tipoUno, tipoDue, tipoTre, aoo, null, null);
        Type localVarReturnType = new TypeToken<List<FieldBaseDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the list of the additional field for archiving by the given business unit and document class (including groups) (asynchronously)
     * 
     * @param tipoUno Document Type Identifier of first level (required)
     * @param tipoDue DocumentType Identifier of second level (required)
     * @param tipoTre DocumentType Identifier of third level (required)
     * @param aoo Business unit code (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGetAdditionalByClasseAsync(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo, final ApiCallback<List<FieldBaseDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetAdditionalByClasseValidateBeforeCall(tipoUno, tipoDue, tipoTre, aoo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldBaseDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGetAdditionalByClasseOld
     * @param tipoUno Document Type Identifier of first level (required)
     * @param tipoDue DocumentType Identifier of second level (required)
     * @param tipoTre DocumentType Identifier of third level (required)
     * @param aoo Business unit code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call profilesGetAdditionalByClasseOldCall(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}/{aoo}"
            .replaceAll("\\{" + "tipoUno" + "\\}", apiClient.escapeString(tipoUno.toString()))
            .replaceAll("\\{" + "tipoDue" + "\\}", apiClient.escapeString(tipoDue.toString()))
            .replaceAll("\\{" + "tipoTre" + "\\}", apiClient.escapeString(tipoTre.toString()))
            .replaceAll("\\{" + "aoo" + "\\}", apiClient.escapeString(aoo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetAdditionalByClasseOldValidateBeforeCall(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tipoUno' is set
        if (tipoUno == null) {
            throw new ApiException("Missing the required parameter 'tipoUno' when calling profilesGetAdditionalByClasseOld(Async)");
        }
        
        // verify the required parameter 'tipoDue' is set
        if (tipoDue == null) {
            throw new ApiException("Missing the required parameter 'tipoDue' when calling profilesGetAdditionalByClasseOld(Async)");
        }
        
        // verify the required parameter 'tipoTre' is set
        if (tipoTre == null) {
            throw new ApiException("Missing the required parameter 'tipoTre' when calling profilesGetAdditionalByClasseOld(Async)");
        }
        
        // verify the required parameter 'aoo' is set
        if (aoo == null) {
            throw new ApiException("Missing the required parameter 'aoo' when calling profilesGetAdditionalByClasseOld(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesGetAdditionalByClasseOldCall(tipoUno, tipoDue, tipoTre, aoo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
     * This method is deprecated. Use /api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
     * @param tipoUno Document Type Identifier of first level (required)
     * @param tipoDue DocumentType Identifier of second level (required)
     * @param tipoTre DocumentType Identifier of third level (required)
     * @param aoo Business unit code (required)
     * @return List&lt;FieldBaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public List<FieldBaseDTO> profilesGetAdditionalByClasseOld(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo) throws ApiException {
        ApiResponse<List<FieldBaseDTO>> resp = profilesGetAdditionalByClasseOldWithHttpInfo(tipoUno, tipoDue, tipoTre, aoo);
        return resp.getData();
    }

    /**
     * This call returns the list of the additional field for archiving by the given business unit and document class (including groups)
     * This method is deprecated. Use /api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
     * @param tipoUno Document Type Identifier of first level (required)
     * @param tipoDue DocumentType Identifier of second level (required)
     * @param tipoTre DocumentType Identifier of third level (required)
     * @param aoo Business unit code (required)
     * @return ApiResponse&lt;List&lt;FieldBaseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<FieldBaseDTO>> profilesGetAdditionalByClasseOldWithHttpInfo(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo) throws ApiException {
        com.squareup.okhttp.Call call = profilesGetAdditionalByClasseOldValidateBeforeCall(tipoUno, tipoDue, tipoTre, aoo, null, null);
        Type localVarReturnType = new TypeToken<List<FieldBaseDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the list of the additional field for archiving by the given business unit and document class (including groups) (asynchronously)
     * This method is deprecated. Use /api/Profiles/Additional/{tipoUno}/{tipoDue}/{tipoTre}?aoo&#x3D;{aoo}
     * @param tipoUno Document Type Identifier of first level (required)
     * @param tipoDue DocumentType Identifier of second level (required)
     * @param tipoTre DocumentType Identifier of third level (required)
     * @param aoo Business unit code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call profilesGetAdditionalByClasseOldAsync(Integer tipoUno, Integer tipoDue, Integer tipoTre, String aoo, final ApiCallback<List<FieldBaseDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetAdditionalByClasseOldValidateBeforeCall(tipoUno, tipoDue, tipoTre, aoo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldBaseDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGetByDocumentType
     * @param documenttypecode Document type code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGetByDocumentTypeCall(GetByDocumentTypeRequestDTO documenttypecode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = documenttypecode;

        // create path and map variables
        String localVarPath = "/api/Profiles/bydocumenttype";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetByDocumentTypeValidateBeforeCall(GetByDocumentTypeRequestDTO documenttypecode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documenttypecode' is set
        if (documenttypecode == null) {
            throw new ApiException("Missing the required parameter 'documenttypecode' when calling profilesGetByDocumentType(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesGetByDocumentTypeCall(documenttypecode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call allows the retrieval of the default profile for archiving by given document type
     * 
     * @param documenttypecode Document type code (required)
     * @return MaskProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskProfileSchemaDTO profilesGetByDocumentType(GetByDocumentTypeRequestDTO documenttypecode) throws ApiException {
        ApiResponse<MaskProfileSchemaDTO> resp = profilesGetByDocumentTypeWithHttpInfo(documenttypecode);
        return resp.getData();
    }

    /**
     * This call allows the retrieval of the default profile for archiving by given document type
     * 
     * @param documenttypecode Document type code (required)
     * @return ApiResponse&lt;MaskProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskProfileSchemaDTO> profilesGetByDocumentTypeWithHttpInfo(GetByDocumentTypeRequestDTO documenttypecode) throws ApiException {
        com.squareup.okhttp.Call call = profilesGetByDocumentTypeValidateBeforeCall(documenttypecode, null, null);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call allows the retrieval of the default profile for archiving by given document type (asynchronously)
     * 
     * @param documenttypecode Document type code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGetByDocumentTypeAsync(GetByDocumentTypeRequestDTO documenttypecode, final ApiCallback<MaskProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetByDocumentTypeValidateBeforeCall(documenttypecode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGetByIdErp
     * @param iderp Document external Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGetByIdErpCall(String iderp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/detail/byIdErp/{iderp}"
            .replaceAll("\\{" + "iderp" + "\\}", apiClient.escapeString(iderp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetByIdErpValidateBeforeCall(String iderp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'iderp' is set
        if (iderp == null) {
            throw new ApiException("Missing the required parameter 'iderp' when calling profilesGetByIdErp(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesGetByIdErpCall(iderp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the mask schema of documents by idErp
     * 
     * @param iderp Document external Identifier (required)
     * @return List&lt;MaskProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MaskProfileSchemaDTO> profilesGetByIdErp(String iderp) throws ApiException {
        ApiResponse<List<MaskProfileSchemaDTO>> resp = profilesGetByIdErpWithHttpInfo(iderp);
        return resp.getData();
    }

    /**
     * This call returns the mask schema of documents by idErp
     * 
     * @param iderp Document external Identifier (required)
     * @return ApiResponse&lt;List&lt;MaskProfileSchemaDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MaskProfileSchemaDTO>> profilesGetByIdErpWithHttpInfo(String iderp) throws ApiException {
        com.squareup.okhttp.Call call = profilesGetByIdErpValidateBeforeCall(iderp, null, null);
        Type localVarReturnType = new TypeToken<List<MaskProfileSchemaDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the mask schema of documents by idErp (asynchronously)
     * 
     * @param iderp Document external Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGetByIdErpAsync(String iderp, final ApiCallback<List<MaskProfileSchemaDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetByIdErpValidateBeforeCall(iderp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MaskProfileSchemaDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGetFiltersForArchive
     * @param fieldcriteria  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGetFiltersForArchiveCall(FieldValuesArchiveCriteriaDto fieldcriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fieldcriteria;

        // create path and map variables
        String localVarPath = "/api/Profiles/Filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetFiltersForArchiveValidateBeforeCall(FieldValuesArchiveCriteriaDto fieldcriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = profilesGetFiltersForArchiveCall(fieldcriteria, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the list of filter avaible for a specific additional field
     * 
     * @param fieldcriteria  (optional)
     * @return FieldFilterDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldFilterDTO profilesGetFiltersForArchive(FieldValuesArchiveCriteriaDto fieldcriteria) throws ApiException {
        ApiResponse<FieldFilterDTO> resp = profilesGetFiltersForArchiveWithHttpInfo(fieldcriteria);
        return resp.getData();
    }

    /**
     * This call returns the list of filter avaible for a specific additional field
     * 
     * @param fieldcriteria  (optional)
     * @return ApiResponse&lt;FieldFilterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldFilterDTO> profilesGetFiltersForArchiveWithHttpInfo(FieldValuesArchiveCriteriaDto fieldcriteria) throws ApiException {
        com.squareup.okhttp.Call call = profilesGetFiltersForArchiveValidateBeforeCall(fieldcriteria, null, null);
        Type localVarReturnType = new TypeToken<FieldFilterDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the list of filter avaible for a specific additional field (asynchronously)
     * 
     * @param fieldcriteria  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGetFiltersForArchiveAsync(FieldValuesArchiveCriteriaDto fieldcriteria, final ApiCallback<FieldFilterDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetFiltersForArchiveValidateBeforeCall(fieldcriteria, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldFilterDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGetForBarcode
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGetForBarcodeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/forbarcode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetForBarcodeValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = profilesGetForBarcodeCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call allows the retrieval of the default profile for archiving barcode
     * 
     * @return MaskProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskProfileSchemaDTO profilesGetForBarcode() throws ApiException {
        ApiResponse<MaskProfileSchemaDTO> resp = profilesGetForBarcodeWithHttpInfo();
        return resp.getData();
    }

    /**
     * This call allows the retrieval of the default profile for archiving barcode
     * 
     * @return ApiResponse&lt;MaskProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskProfileSchemaDTO> profilesGetForBarcodeWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = profilesGetForBarcodeValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call allows the retrieval of the default profile for archiving barcode (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGetForBarcodeAsync(final ApiCallback<MaskProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetForBarcodeValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGetForClone
     * @param docNumber Document Identifier (required)
     * @param includefile Specify if the clone operation must include file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGetForCloneCall(Integer docNumber, Boolean includefile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/clone/{docNumber}/{includefile}"
            .replaceAll("\\{" + "docNumber" + "\\}", apiClient.escapeString(docNumber.toString()))
            .replaceAll("\\{" + "includefile" + "\\}", apiClient.escapeString(includefile.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetForCloneValidateBeforeCall(Integer docNumber, Boolean includefile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docNumber' is set
        if (docNumber == null) {
            throw new ApiException("Missing the required parameter 'docNumber' when calling profilesGetForClone(Async)");
        }
        
        // verify the required parameter 'includefile' is set
        if (includefile == null) {
            throw new ApiException("Missing the required parameter 'includefile' when calling profilesGetForClone(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesGetForCloneCall(docNumber, includefile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call clones a document
     * 
     * @param docNumber Document Identifier (required)
     * @param includefile Specify if the clone operation must include file (required)
     * @return MaskProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskProfileSchemaDTO profilesGetForClone(Integer docNumber, Boolean includefile) throws ApiException {
        ApiResponse<MaskProfileSchemaDTO> resp = profilesGetForCloneWithHttpInfo(docNumber, includefile);
        return resp.getData();
    }

    /**
     * This call clones a document
     * 
     * @param docNumber Document Identifier (required)
     * @param includefile Specify if the clone operation must include file (required)
     * @return ApiResponse&lt;MaskProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskProfileSchemaDTO> profilesGetForCloneWithHttpInfo(Integer docNumber, Boolean includefile) throws ApiException {
        com.squareup.okhttp.Call call = profilesGetForCloneValidateBeforeCall(docNumber, includefile, null, null);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call clones a document (asynchronously)
     * 
     * @param docNumber Document Identifier (required)
     * @param includefile Specify if the clone operation must include file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGetForCloneAsync(Integer docNumber, Boolean includefile, final ApiCallback<MaskProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetForCloneValidateBeforeCall(docNumber, includefile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGetForTask
     * @param docNumber Document Identifier (required)
     * @param taskId TaskWork Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGetForTaskCall(Integer docNumber, Integer taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/detail/{docNumber}/task/{taskId}"
            .replaceAll("\\{" + "docNumber" + "\\}", apiClient.escapeString(docNumber.toString()))
            .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetForTaskValidateBeforeCall(Integer docNumber, Integer taskId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docNumber' is set
        if (docNumber == null) {
            throw new ApiException("Missing the required parameter 'docNumber' when calling profilesGetForTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling profilesGetForTask(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesGetForTaskCall(docNumber, taskId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the mask schema of a document in a taskwork
     * 
     * @param docNumber Document Identifier (required)
     * @param taskId TaskWork Identifier (required)
     * @return EditProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EditProfileSchemaDTO profilesGetForTask(Integer docNumber, Integer taskId) throws ApiException {
        ApiResponse<EditProfileSchemaDTO> resp = profilesGetForTaskWithHttpInfo(docNumber, taskId);
        return resp.getData();
    }

    /**
     * This call returns the mask schema of a document in a taskwork
     * 
     * @param docNumber Document Identifier (required)
     * @param taskId TaskWork Identifier (required)
     * @return ApiResponse&lt;EditProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EditProfileSchemaDTO> profilesGetForTaskWithHttpInfo(Integer docNumber, Integer taskId) throws ApiException {
        com.squareup.okhttp.Call call = profilesGetForTaskValidateBeforeCall(docNumber, taskId, null, null);
        Type localVarReturnType = new TypeToken<EditProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the mask schema of a document in a taskwork (asynchronously)
     * 
     * @param docNumber Document Identifier (required)
     * @param taskId TaskWork Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGetForTaskAsync(Integer docNumber, Integer taskId, final ApiCallback<EditProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetForTaskValidateBeforeCall(docNumber, taskId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EditProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGetFormulaForArchive
     * @param fieldcriteria  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGetFormulaForArchiveCall(FieldFormulaCalculateArchiveCriteriaDto fieldcriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fieldcriteria;

        // create path and map variables
        String localVarPath = "/api/Profiles/Formula";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetFormulaForArchiveValidateBeforeCall(FieldFormulaCalculateArchiveCriteriaDto fieldcriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = profilesGetFormulaForArchiveCall(fieldcriteria, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the result of a formula given the array of fields of profile and their value
     * 
     * @param fieldcriteria  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String profilesGetFormulaForArchive(FieldFormulaCalculateArchiveCriteriaDto fieldcriteria) throws ApiException {
        ApiResponse<String> resp = profilesGetFormulaForArchiveWithHttpInfo(fieldcriteria);
        return resp.getData();
    }

    /**
     * This call returns the result of a formula given the array of fields of profile and their value
     * 
     * @param fieldcriteria  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> profilesGetFormulaForArchiveWithHttpInfo(FieldFormulaCalculateArchiveCriteriaDto fieldcriteria) throws ApiException {
        com.squareup.okhttp.Call call = profilesGetFormulaForArchiveValidateBeforeCall(fieldcriteria, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the result of a formula given the array of fields of profile and their value (asynchronously)
     * 
     * @param fieldcriteria  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGetFormulaForArchiveAsync(FieldFormulaCalculateArchiveCriteriaDto fieldcriteria, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetFormulaForArchiveValidateBeforeCall(fieldcriteria, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGetSchema
     * @param docNumber Document Identifier (required)
     * @param switched  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGetSchemaCall(Integer docNumber, Boolean switched, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/{docNumber}/schema/{switched}"
            .replaceAll("\\{" + "docNumber" + "\\}", apiClient.escapeString(docNumber.toString()))
            .replaceAll("\\{" + "switched" + "\\}", apiClient.escapeString(switched.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetSchemaValidateBeforeCall(Integer docNumber, Boolean switched, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docNumber' is set
        if (docNumber == null) {
            throw new ApiException("Missing the required parameter 'docNumber' when calling profilesGetSchema(Async)");
        }
        
        // verify the required parameter 'switched' is set
        if (switched == null) {
            throw new ApiException("Missing the required parameter 'switched' when calling profilesGetSchema(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesGetSchemaCall(docNumber, switched, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the edit schema of a document
     * 
     * @param docNumber Document Identifier (required)
     * @param switched  (required)
     * @return EditProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EditProfileSchemaDTO profilesGetSchema(Integer docNumber, Boolean switched) throws ApiException {
        ApiResponse<EditProfileSchemaDTO> resp = profilesGetSchemaWithHttpInfo(docNumber, switched);
        return resp.getData();
    }

    /**
     * This call returns the edit schema of a document
     * 
     * @param docNumber Document Identifier (required)
     * @param switched  (required)
     * @return ApiResponse&lt;EditProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EditProfileSchemaDTO> profilesGetSchemaWithHttpInfo(Integer docNumber, Boolean switched) throws ApiException {
        com.squareup.okhttp.Call call = profilesGetSchemaValidateBeforeCall(docNumber, switched, null, null);
        Type localVarReturnType = new TypeToken<EditProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the edit schema of a document (asynchronously)
     * 
     * @param docNumber Document Identifier (required)
     * @param switched  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGetSchemaAsync(Integer docNumber, Boolean switched, final ApiCallback<EditProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetSchemaValidateBeforeCall(docNumber, switched, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EditProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGetSchema_0
     * @param bufferId buffer Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGetSchema_0Call(String bufferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/formonitoredfolder/{bufferId}"
            .replaceAll("\\{" + "bufferId" + "\\}", apiClient.escapeString(bufferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetSchema_0ValidateBeforeCall(String bufferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bufferId' is set
        if (bufferId == null) {
            throw new ApiException("Missing the required parameter 'bufferId' when calling profilesGetSchema_0(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesGetSchema_0Call(bufferId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the edit schema of a document from a file for a monitored folder
     * 
     * @param bufferId buffer Identifier (required)
     * @return MaskProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskProfileSchemaDTO profilesGetSchema_0(String bufferId) throws ApiException {
        ApiResponse<MaskProfileSchemaDTO> resp = profilesGetSchema_0WithHttpInfo(bufferId);
        return resp.getData();
    }

    /**
     * This call returns the edit schema of a document from a file for a monitored folder
     * 
     * @param bufferId buffer Identifier (required)
     * @return ApiResponse&lt;MaskProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskProfileSchemaDTO> profilesGetSchema_0WithHttpInfo(String bufferId) throws ApiException {
        com.squareup.okhttp.Call call = profilesGetSchema_0ValidateBeforeCall(bufferId, null, null);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the edit schema of a document from a file for a monitored folder (asynchronously)
     * 
     * @param bufferId buffer Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGetSchema_0Async(String bufferId, final ApiCallback<MaskProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetSchema_0ValidateBeforeCall(bufferId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGetValuesForArchive
     * @param fieldcriteria  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGetValuesForArchiveCall(FieldValuesArchiveCriteriaDto fieldcriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fieldcriteria;

        // create path and map variables
        String localVarPath = "/api/Profiles/Values";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGetValuesForArchiveValidateBeforeCall(FieldValuesArchiveCriteriaDto fieldcriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = profilesGetValuesForArchiveCall(fieldcriteria, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
     * 
     * @param fieldcriteria  (optional)
     * @return FieldValuesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldValuesDTO profilesGetValuesForArchive(FieldValuesArchiveCriteriaDto fieldcriteria) throws ApiException {
        ApiResponse<FieldValuesDTO> resp = profilesGetValuesForArchiveWithHttpInfo(fieldcriteria);
        return resp.getData();
    }

    /**
     * This call returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile
     * 
     * @param fieldcriteria  (optional)
     * @return ApiResponse&lt;FieldValuesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldValuesDTO> profilesGetValuesForArchiveWithHttpInfo(FieldValuesArchiveCriteriaDto fieldcriteria) throws ApiException {
        com.squareup.okhttp.Call call = profilesGetValuesForArchiveValidateBeforeCall(fieldcriteria, null, null);
        Type localVarReturnType = new TypeToken<FieldValuesDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the possible values ​​for an external data source given the additional field code and the value of all other fields in profile (asynchronously)
     * 
     * @param fieldcriteria  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGetValuesForArchiveAsync(FieldValuesArchiveCriteriaDto fieldcriteria, final ApiCallback<FieldValuesDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGetValuesForArchiveValidateBeforeCall(fieldcriteria, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldValuesDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesGet_0
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesGet_0Call(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesGet_0ValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = profilesGet_0Call(progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call allows the retrieval of the default profile for archiving
     * 
     * @return MaskProfileSchemaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskProfileSchemaDTO profilesGet_0() throws ApiException {
        ApiResponse<MaskProfileSchemaDTO> resp = profilesGet_0WithHttpInfo();
        return resp.getData();
    }

    /**
     * This call allows the retrieval of the default profile for archiving
     * 
     * @return ApiResponse&lt;MaskProfileSchemaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskProfileSchemaDTO> profilesGet_0WithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = profilesGet_0ValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call allows the retrieval of the default profile for archiving (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesGet_0Async(final ApiCallback<MaskProfileSchemaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesGet_0ValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MaskProfileSchemaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesLockProfile
     * @param docNumber Document Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesLockProfileCall(Integer docNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/lock/{docNumber}"
            .replaceAll("\\{" + "docNumber" + "\\}", apiClient.escapeString(docNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesLockProfileValidateBeforeCall(Integer docNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docNumber' is set
        if (docNumber == null) {
            throw new ApiException("Missing the required parameter 'docNumber' when calling profilesLockProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesLockProfileCall(docNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call checks if a profile is lock
     * 
     * @param docNumber Document Identifier (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean profilesLockProfile(Integer docNumber) throws ApiException {
        ApiResponse<Boolean> resp = profilesLockProfileWithHttpInfo(docNumber);
        return resp.getData();
    }

    /**
     * This call checks if a profile is lock
     * 
     * @param docNumber Document Identifier (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> profilesLockProfileWithHttpInfo(Integer docNumber) throws ApiException {
        com.squareup.okhttp.Call call = profilesLockProfileValidateBeforeCall(docNumber, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call checks if a profile is lock (asynchronously)
     * 
     * @param docNumber Document Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesLockProfileAsync(Integer docNumber, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesLockProfileValidateBeforeCall(docNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesPost
     * @param profile  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesPostCall(ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/api/Profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesPostValidateBeforeCall(ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = profilesPostCall(profile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call inserts a new profile
     * 
     * @param profile  (optional)
     * @return ProfileResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProfileResultDTO profilesPost(ProfileDTO profile) throws ApiException {
        ApiResponse<ProfileResultDTO> resp = profilesPostWithHttpInfo(profile);
        return resp.getData();
    }

    /**
     * This call inserts a new profile
     * 
     * @param profile  (optional)
     * @return ApiResponse&lt;ProfileResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProfileResultDTO> profilesPostWithHttpInfo(ProfileDTO profile) throws ApiException {
        com.squareup.okhttp.Call call = profilesPostValidateBeforeCall(profile, null, null);
        Type localVarReturnType = new TypeToken<ProfileResultDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call inserts a new profile (asynchronously)
     * 
     * @param profile  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesPostAsync(ProfileDTO profile, final ApiCallback<ProfileResultDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesPostValidateBeforeCall(profile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProfileResultDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesPostForBarcode
     * @param profile  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesPostForBarcodeCall(ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/api/Profiles/forbarcode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesPostForBarcodeValidateBeforeCall(ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = profilesPostForBarcodeCall(profile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call allows the insertion of new profile for barcode purpose
     * 
     * @param profile  (optional)
     * @return ProfileResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProfileResultDTO profilesPostForBarcode(ProfileDTO profile) throws ApiException {
        ApiResponse<ProfileResultDTO> resp = profilesPostForBarcodeWithHttpInfo(profile);
        return resp.getData();
    }

    /**
     * This call allows the insertion of new profile for barcode purpose
     * 
     * @param profile  (optional)
     * @return ApiResponse&lt;ProfileResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProfileResultDTO> profilesPostForBarcodeWithHttpInfo(ProfileDTO profile) throws ApiException {
        com.squareup.okhttp.Call call = profilesPostForBarcodeValidateBeforeCall(profile, null, null);
        Type localVarReturnType = new TypeToken<ProfileResultDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call allows the insertion of new profile for barcode purpose (asynchronously)
     * 
     * @param profile  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesPostForBarcodeAsync(ProfileDTO profile, final ApiCallback<ProfileResultDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesPostForBarcodeValidateBeforeCall(profile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProfileResultDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profilesPut
     * @param docnumber Document Identifier to update (required)
     * @param profile  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesPutCall(Integer docnumber, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/api/Profiles/{docnumber}"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesPutValidateBeforeCall(Integer docnumber, ProfileDTO profile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling profilesPut(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesPutCall(docnumber, profile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call updates an existent profile
     * 
     * @param docnumber Document Identifier to update (required)
     * @param profile  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void profilesPut(Integer docnumber, ProfileDTO profile) throws ApiException {
        profilesPutWithHttpInfo(docnumber, profile);
    }

    /**
     * This call updates an existent profile
     * 
     * @param docnumber Document Identifier to update (required)
     * @param profile  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> profilesPutWithHttpInfo(Integer docnumber, ProfileDTO profile) throws ApiException {
        com.squareup.okhttp.Call call = profilesPutValidateBeforeCall(docnumber, profile, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call updates an existent profile (asynchronously)
     * 
     * @param docnumber Document Identifier to update (required)
     * @param profile  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesPutAsync(Integer docnumber, ProfileDTO profile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesPutValidateBeforeCall(docnumber, profile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for profilesUnLockProfile
     * @param docNumber Document Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesUnLockProfileCall(Integer docNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Profiles/unlock/{docNumber}"
            .replaceAll("\\{" + "docNumber" + "\\}", apiClient.escapeString(docNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesUnLockProfileValidateBeforeCall(Integer docNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docNumber' is set
        if (docNumber == null) {
            throw new ApiException("Missing the required parameter 'docNumber' when calling profilesUnLockProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesUnLockProfileCall(docNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call checks if a profile is not lock
     * 
     * @param docNumber Document Identifier (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean profilesUnLockProfile(Integer docNumber) throws ApiException {
        ApiResponse<Boolean> resp = profilesUnLockProfileWithHttpInfo(docNumber);
        return resp.getData();
    }

    /**
     * This call checks if a profile is not lock
     * 
     * @param docNumber Document Identifier (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> profilesUnLockProfileWithHttpInfo(Integer docNumber) throws ApiException {
        com.squareup.okhttp.Call call = profilesUnLockProfileValidateBeforeCall(docNumber, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call checks if a profile is not lock (asynchronously)
     * 
     * @param docNumber Document Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesUnLockProfileAsync(Integer docNumber, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesUnLockProfileValidateBeforeCall(docNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
