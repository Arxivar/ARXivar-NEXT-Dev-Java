/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.RevisionDTO;
import io.swagger.client.model.StateExceptionDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RevisionsApi {
    private ApiClient apiClient;

    public RevisionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RevisionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for revisionsDelete
     * @param revisionId Revision Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revisionsDeleteCall(Integer revisionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Revisions/{revisionId}"
            .replaceAll("\\{" + "revisionId" + "\\}", apiClient.escapeString(revisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call revisionsDeleteValidateBeforeCall(Integer revisionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling revisionsDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = revisionsDeleteCall(revisionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call deletes a revision
     * 
     * @param revisionId Revision Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void revisionsDelete(Integer revisionId) throws ApiException {
        revisionsDeleteWithHttpInfo(revisionId);
    }

    /**
     * This call deletes a revision
     * 
     * @param revisionId Revision Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> revisionsDeleteWithHttpInfo(Integer revisionId) throws ApiException {
        com.squareup.okhttp.Call call = revisionsDeleteValidateBeforeCall(revisionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call deletes a revision (asynchronously)
     * 
     * @param revisionId Revision Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revisionsDeleteAsync(Integer revisionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revisionsDeleteValidateBeforeCall(revisionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for revisionsGetByDocnumber
     * @param docnumber Document Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revisionsGetByDocnumberCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Revisions/byDocnumber/{docnumber}"
            .replaceAll("\\{" + "docnumber" + "\\}", apiClient.escapeString(docnumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call revisionsGetByDocnumberValidateBeforeCall(Integer docnumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docnumber' is set
        if (docnumber == null) {
            throw new ApiException("Missing the required parameter 'docnumber' when calling revisionsGetByDocnumber(Async)");
        }
        

        com.squareup.okhttp.Call call = revisionsGetByDocnumberCall(docnumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all revisions of a document
     * 
     * @param docnumber Document Identifier (required)
     * @return List&lt;RevisionDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RevisionDTO> revisionsGetByDocnumber(Integer docnumber) throws ApiException {
        ApiResponse<List<RevisionDTO>> resp = revisionsGetByDocnumberWithHttpInfo(docnumber);
        return resp.getData();
    }

    /**
     * This call returns all revisions of a document
     * 
     * @param docnumber Document Identifier (required)
     * @return ApiResponse&lt;List&lt;RevisionDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RevisionDTO>> revisionsGetByDocnumberWithHttpInfo(Integer docnumber) throws ApiException {
        com.squareup.okhttp.Call call = revisionsGetByDocnumberValidateBeforeCall(docnumber, null, null);
        Type localVarReturnType = new TypeToken<List<RevisionDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all revisions of a document (asynchronously)
     * 
     * @param docnumber Document Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revisionsGetByDocnumberAsync(Integer docnumber, final ApiCallback<List<RevisionDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revisionsGetByDocnumberValidateBeforeCall(docnumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RevisionDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for revisionsRevisionByRevision
     * @param docNumber Document Identifier (required)
     * @param revision Revision number to start (required)
     * @param option Advanced options (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revisionsRevisionByRevisionCall(Integer docNumber, Integer revision, Integer option, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Revisions/{docNumber}/{revision}/{option}"
            .replaceAll("\\{" + "docNumber" + "\\}", apiClient.escapeString(docNumber.toString()))
            .replaceAll("\\{" + "revision" + "\\}", apiClient.escapeString(revision.toString()))
            .replaceAll("\\{" + "option" + "\\}", apiClient.escapeString(option.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call revisionsRevisionByRevisionValidateBeforeCall(Integer docNumber, Integer revision, Integer option, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'docNumber' is set
        if (docNumber == null) {
            throw new ApiException("Missing the required parameter 'docNumber' when calling revisionsRevisionByRevision(Async)");
        }
        
        // verify the required parameter 'revision' is set
        if (revision == null) {
            throw new ApiException("Missing the required parameter 'revision' when calling revisionsRevisionByRevision(Async)");
        }
        
        // verify the required parameter 'option' is set
        if (option == null) {
            throw new ApiException("Missing the required parameter 'option' when calling revisionsRevisionByRevision(Async)");
        }
        

        com.squareup.okhttp.Call call = revisionsRevisionByRevisionCall(docNumber, revision, option, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call adds a revision from an existent revision of a document
     * 
     * @param docNumber Document Identifier (required)
     * @param revision Revision number to start (required)
     * @param option Advanced options (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void revisionsRevisionByRevision(Integer docNumber, Integer revision, Integer option) throws ApiException {
        revisionsRevisionByRevisionWithHttpInfo(docNumber, revision, option);
    }

    /**
     * This call adds a revision from an existent revision of a document
     * 
     * @param docNumber Document Identifier (required)
     * @param revision Revision number to start (required)
     * @param option Advanced options (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> revisionsRevisionByRevisionWithHttpInfo(Integer docNumber, Integer revision, Integer option) throws ApiException {
        com.squareup.okhttp.Call call = revisionsRevisionByRevisionValidateBeforeCall(docNumber, revision, option, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call adds a revision from an existent revision of a document (asynchronously)
     * 
     * @param docNumber Document Identifier (required)
     * @param revision Revision number to start (required)
     * @param option Advanced options (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revisionsRevisionByRevisionAsync(Integer docNumber, Integer revision, Integer option, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revisionsRevisionByRevisionValidateBeforeCall(docNumber, revision, option, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for revisionsRevisionByRevision_0
     * @param taskWorkId Taskwork Identifier (required)
     * @param processDocId Process Document Identifier (required)
     * @param revision Revision number to start (required)
     * @param option Advanced options (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call revisionsRevisionByRevision_0Call(Integer taskWorkId, Integer processDocId, Integer revision, Integer option, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Revisions/task/{taskWorkId}/{processDocId}/{revision}/{option}"
            .replaceAll("\\{" + "taskWorkId" + "\\}", apiClient.escapeString(taskWorkId.toString()))
            .replaceAll("\\{" + "processDocId" + "\\}", apiClient.escapeString(processDocId.toString()))
            .replaceAll("\\{" + "revision" + "\\}", apiClient.escapeString(revision.toString()))
            .replaceAll("\\{" + "option" + "\\}", apiClient.escapeString(option.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call revisionsRevisionByRevision_0ValidateBeforeCall(Integer taskWorkId, Integer processDocId, Integer revision, Integer option, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskWorkId' is set
        if (taskWorkId == null) {
            throw new ApiException("Missing the required parameter 'taskWorkId' when calling revisionsRevisionByRevision_0(Async)");
        }
        
        // verify the required parameter 'processDocId' is set
        if (processDocId == null) {
            throw new ApiException("Missing the required parameter 'processDocId' when calling revisionsRevisionByRevision_0(Async)");
        }
        
        // verify the required parameter 'revision' is set
        if (revision == null) {
            throw new ApiException("Missing the required parameter 'revision' when calling revisionsRevisionByRevision_0(Async)");
        }
        
        // verify the required parameter 'option' is set
        if (option == null) {
            throw new ApiException("Missing the required parameter 'option' when calling revisionsRevisionByRevision_0(Async)");
        }
        

        com.squareup.okhttp.Call call = revisionsRevisionByRevision_0Call(taskWorkId, processDocId, revision, option, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call adds a revision from an existent revision of a profile in a task
     * 
     * @param taskWorkId Taskwork Identifier (required)
     * @param processDocId Process Document Identifier (required)
     * @param revision Revision number to start (required)
     * @param option Advanced options (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void revisionsRevisionByRevision_0(Integer taskWorkId, Integer processDocId, Integer revision, Integer option) throws ApiException {
        revisionsRevisionByRevision_0WithHttpInfo(taskWorkId, processDocId, revision, option);
    }

    /**
     * This call adds a revision from an existent revision of a profile in a task
     * 
     * @param taskWorkId Taskwork Identifier (required)
     * @param processDocId Process Document Identifier (required)
     * @param revision Revision number to start (required)
     * @param option Advanced options (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> revisionsRevisionByRevision_0WithHttpInfo(Integer taskWorkId, Integer processDocId, Integer revision, Integer option) throws ApiException {
        com.squareup.okhttp.Call call = revisionsRevisionByRevision_0ValidateBeforeCall(taskWorkId, processDocId, revision, option, null, null);
        return apiClient.execute(call);
    }

    /**
     * This call adds a revision from an existent revision of a profile in a task (asynchronously)
     * 
     * @param taskWorkId Taskwork Identifier (required)
     * @param processDocId Process Document Identifier (required)
     * @param revision Revision number to start (required)
     * @param option Advanced options (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call revisionsRevisionByRevision_0Async(Integer taskWorkId, Integer processDocId, Integer revision, Integer option, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = revisionsRevisionByRevision_0ValidateBeforeCall(taskWorkId, processDocId, revision, option, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
