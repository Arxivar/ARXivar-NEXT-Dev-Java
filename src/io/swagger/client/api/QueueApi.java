/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.GetQueueInfoDto;
import io.swagger.client.model.GetQueueJobInfoDto;
import io.swagger.client.model.JobResultDto;
import io.swagger.client.model.QueueAggregationInfoDto;
import io.swagger.client.model.QueueAggregationStatusInfoDto;
import io.swagger.client.model.QueueJobInfoDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueueApi {
    private ApiClient apiClient;

    public QueueApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueueApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for queueAdminDeleteQueue
     * @param queueId Queue Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueAdminDeleteQueueCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/AdminQueue/{queueId}"
            .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueAdminDeleteQueueValidateBeforeCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueAdminDeleteQueue(Async)");
        }
        

        com.squareup.okhttp.Call call = queueAdminDeleteQueueCall(queueId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call checks if to delete a queue (administrator required)
     * 
     * @param queueId Queue Identifier (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean queueAdminDeleteQueue(String queueId) throws ApiException {
        ApiResponse<Boolean> resp = queueAdminDeleteQueueWithHttpInfo(queueId);
        return resp.getData();
    }

    /**
     * This call checks if to delete a queue (administrator required)
     * 
     * @param queueId Queue Identifier (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> queueAdminDeleteQueueWithHttpInfo(String queueId) throws ApiException {
        com.squareup.okhttp.Call call = queueAdminDeleteQueueValidateBeforeCall(queueId, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call checks if to delete a queue (administrator required) (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueAdminDeleteQueueAsync(String queueId, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueAdminDeleteQueueValidateBeforeCall(queueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueAdminGetQueueAggregationList
     * @param getQueueInfo Queue information (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueAdminGetQueueAggregationListCall(GetQueueInfoDto getQueueInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getQueueInfo;

        // create path and map variables
        String localVarPath = "/api/Queue/AdminGetQueueAggregatedList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueAdminGetQueueAggregationListValidateBeforeCall(GetQueueInfoDto getQueueInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getQueueInfo' is set
        if (getQueueInfo == null) {
            throw new ApiException("Missing the required parameter 'getQueueInfo' when calling queueAdminGetQueueAggregationList(Async)");
        }
        

        com.squareup.okhttp.Call call = queueAdminGetQueueAggregationListCall(getQueueInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the queue aggregated information list  (administrator required)
     * 
     * @param getQueueInfo Queue information (required)
     * @return List&lt;QueueAggregationInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<QueueAggregationInfoDto> queueAdminGetQueueAggregationList(GetQueueInfoDto getQueueInfo) throws ApiException {
        ApiResponse<List<QueueAggregationInfoDto>> resp = queueAdminGetQueueAggregationListWithHttpInfo(getQueueInfo);
        return resp.getData();
    }

    /**
     * This call returns the queue aggregated information list  (administrator required)
     * 
     * @param getQueueInfo Queue information (required)
     * @return ApiResponse&lt;List&lt;QueueAggregationInfoDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<QueueAggregationInfoDto>> queueAdminGetQueueAggregationListWithHttpInfo(GetQueueInfoDto getQueueInfo) throws ApiException {
        com.squareup.okhttp.Call call = queueAdminGetQueueAggregationListValidateBeforeCall(getQueueInfo, null, null);
        Type localVarReturnType = new TypeToken<List<QueueAggregationInfoDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the queue aggregated information list  (administrator required) (asynchronously)
     * 
     * @param getQueueInfo Queue information (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueAdminGetQueueAggregationListAsync(GetQueueInfoDto getQueueInfo, final ApiCallback<List<QueueAggregationInfoDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueAdminGetQueueAggregationListValidateBeforeCall(getQueueInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<QueueAggregationInfoDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueAdminGetQueueAggregationList_0
     * @param queueId Queue Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueAdminGetQueueAggregationList_0Call(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/AdminQueueAggregated/{queueId}"
            .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueAdminGetQueueAggregationList_0ValidateBeforeCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueAdminGetQueueAggregationList_0(Async)");
        }
        

        com.squareup.okhttp.Call call = queueAdminGetQueueAggregationList_0Call(queueId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the specific queue aggregated information (administrator required)
     * 
     * @param queueId Queue Identifier (required)
     * @return QueueAggregationInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueAggregationInfoDto queueAdminGetQueueAggregationList_0(String queueId) throws ApiException {
        ApiResponse<QueueAggregationInfoDto> resp = queueAdminGetQueueAggregationList_0WithHttpInfo(queueId);
        return resp.getData();
    }

    /**
     * This call returns the specific queue aggregated information (administrator required)
     * 
     * @param queueId Queue Identifier (required)
     * @return ApiResponse&lt;QueueAggregationInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueAggregationInfoDto> queueAdminGetQueueAggregationList_0WithHttpInfo(String queueId) throws ApiException {
        com.squareup.okhttp.Call call = queueAdminGetQueueAggregationList_0ValidateBeforeCall(queueId, null, null);
        Type localVarReturnType = new TypeToken<QueueAggregationInfoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the specific queue aggregated information (administrator required) (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueAdminGetQueueAggregationList_0Async(String queueId, final ApiCallback<QueueAggregationInfoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueAdminGetQueueAggregationList_0ValidateBeforeCall(queueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueAggregationInfoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueAdminGetQueueEndJobInfo
     * @param queueId Queue Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueAdminGetQueueEndJobInfoCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/AdminEndJobInfo/{queueId}"
            .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueAdminGetQueueEndJobInfoValidateBeforeCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueAdminGetQueueEndJobInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = queueAdminGetQueueEndJobInfoCall(queueId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the end job information (administrator required)
     * 
     * @param queueId Queue Identifier (required)
     * @return QueueJobInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueJobInfoDto queueAdminGetQueueEndJobInfo(String queueId) throws ApiException {
        ApiResponse<QueueJobInfoDto> resp = queueAdminGetQueueEndJobInfoWithHttpInfo(queueId);
        return resp.getData();
    }

    /**
     * This call returns the end job information (administrator required)
     * 
     * @param queueId Queue Identifier (required)
     * @return ApiResponse&lt;QueueJobInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueJobInfoDto> queueAdminGetQueueEndJobInfoWithHttpInfo(String queueId) throws ApiException {
        com.squareup.okhttp.Call call = queueAdminGetQueueEndJobInfoValidateBeforeCall(queueId, null, null);
        Type localVarReturnType = new TypeToken<QueueJobInfoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the end job information (administrator required) (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueAdminGetQueueEndJobInfoAsync(String queueId, final ApiCallback<QueueJobInfoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueAdminGetQueueEndJobInfoValidateBeforeCall(queueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueJobInfoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueAdminGetQueueJobInfo
     * @param queueId Queue Identifier (required)
     * @param getQueueJobInfo Job Information (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueAdminGetQueueJobInfoCall(String queueId, GetQueueJobInfoDto getQueueJobInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getQueueJobInfo;

        // create path and map variables
        String localVarPath = "/api/Queue/AdminGetQueueJobInfoList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (queueId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("queueId", queueId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueAdminGetQueueJobInfoValidateBeforeCall(String queueId, GetQueueJobInfoDto getQueueJobInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueAdminGetQueueJobInfo(Async)");
        }
        
        // verify the required parameter 'getQueueJobInfo' is set
        if (getQueueJobInfo == null) {
            throw new ApiException("Missing the required parameter 'getQueueJobInfo' when calling queueAdminGetQueueJobInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = queueAdminGetQueueJobInfoCall(queueId, getQueueJobInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the job information list (administrator required)
     * 
     * @param queueId Queue Identifier (required)
     * @param getQueueJobInfo Job Information (required)
     * @return List&lt;QueueJobInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<QueueJobInfoDto> queueAdminGetQueueJobInfo(String queueId, GetQueueJobInfoDto getQueueJobInfo) throws ApiException {
        ApiResponse<List<QueueJobInfoDto>> resp = queueAdminGetQueueJobInfoWithHttpInfo(queueId, getQueueJobInfo);
        return resp.getData();
    }

    /**
     * This call returns the job information list (administrator required)
     * 
     * @param queueId Queue Identifier (required)
     * @param getQueueJobInfo Job Information (required)
     * @return ApiResponse&lt;List&lt;QueueJobInfoDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<QueueJobInfoDto>> queueAdminGetQueueJobInfoWithHttpInfo(String queueId, GetQueueJobInfoDto getQueueJobInfo) throws ApiException {
        com.squareup.okhttp.Call call = queueAdminGetQueueJobInfoValidateBeforeCall(queueId, getQueueJobInfo, null, null);
        Type localVarReturnType = new TypeToken<List<QueueJobInfoDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the job information list (administrator required) (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param getQueueJobInfo Job Information (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueAdminGetQueueJobInfoAsync(String queueId, GetQueueJobInfoDto getQueueJobInfo, final ApiCallback<List<QueueJobInfoDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueAdminGetQueueJobInfoValidateBeforeCall(queueId, getQueueJobInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<QueueJobInfoDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueAdminGetQueueList
     * @param getQueueInfo Queue information (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueAdminGetQueueListCall(GetQueueInfoDto getQueueInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getQueueInfo;

        // create path and map variables
        String localVarPath = "/api/Queue/AdminGetQueueList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueAdminGetQueueListValidateBeforeCall(GetQueueInfoDto getQueueInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getQueueInfo' is set
        if (getQueueInfo == null) {
            throw new ApiException("Missing the required parameter 'getQueueInfo' when calling queueAdminGetQueueList(Async)");
        }
        

        com.squareup.okhttp.Call call = queueAdminGetQueueListCall(getQueueInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all queue (administrator required)
     * 
     * @param getQueueInfo Queue information (required)
     * @return List&lt;QueueJobInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<QueueJobInfoDto> queueAdminGetQueueList(GetQueueInfoDto getQueueInfo) throws ApiException {
        ApiResponse<List<QueueJobInfoDto>> resp = queueAdminGetQueueListWithHttpInfo(getQueueInfo);
        return resp.getData();
    }

    /**
     * This call returns all queue (administrator required)
     * 
     * @param getQueueInfo Queue information (required)
     * @return ApiResponse&lt;List&lt;QueueJobInfoDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<QueueJobInfoDto>> queueAdminGetQueueListWithHttpInfo(GetQueueInfoDto getQueueInfo) throws ApiException {
        com.squareup.okhttp.Call call = queueAdminGetQueueListValidateBeforeCall(getQueueInfo, null, null);
        Type localVarReturnType = new TypeToken<List<QueueJobInfoDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all queue (administrator required) (asynchronously)
     * 
     * @param getQueueInfo Queue information (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueAdminGetQueueListAsync(GetQueueInfoDto getQueueInfo, final ApiCallback<List<QueueJobInfoDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueAdminGetQueueListValidateBeforeCall(getQueueInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<QueueJobInfoDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueAdminGetQueueWorkJobInfo
     * @param queueId Queue Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueAdminGetQueueWorkJobInfoCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/AdminWorkJobInfo/{queueId}"
            .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueAdminGetQueueWorkJobInfoValidateBeforeCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueAdminGetQueueWorkJobInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = queueAdminGetQueueWorkJobInfoCall(queueId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a work job information (administrator required)
     * 
     * @param queueId Queue Identifier (required)
     * @return QueueJobInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueJobInfoDto queueAdminGetQueueWorkJobInfo(String queueId) throws ApiException {
        ApiResponse<QueueJobInfoDto> resp = queueAdminGetQueueWorkJobInfoWithHttpInfo(queueId);
        return resp.getData();
    }

    /**
     * This call returns a work job information (administrator required)
     * 
     * @param queueId Queue Identifier (required)
     * @return ApiResponse&lt;QueueJobInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueJobInfoDto> queueAdminGetQueueWorkJobInfoWithHttpInfo(String queueId) throws ApiException {
        com.squareup.okhttp.Call call = queueAdminGetQueueWorkJobInfoValidateBeforeCall(queueId, null, null);
        Type localVarReturnType = new TypeToken<QueueJobInfoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a work job information (administrator required) (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueAdminGetQueueWorkJobInfoAsync(String queueId, final ApiCallback<QueueJobInfoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueAdminGetQueueWorkJobInfoValidateBeforeCall(queueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueJobInfoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueDeleteJob
     * @param jobId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueDeleteJobCall(String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/Job/{jobId}"
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueDeleteJobValidateBeforeCall(String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling queueDeleteJob(Async)");
        }
        

        com.squareup.okhttp.Call call = queueDeleteJobCall(jobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call checks if to delete a queue job
     * 
     * @param jobId  (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean queueDeleteJob(String jobId) throws ApiException {
        ApiResponse<Boolean> resp = queueDeleteJobWithHttpInfo(jobId);
        return resp.getData();
    }

    /**
     * This call checks if to delete a queue job
     * 
     * @param jobId  (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> queueDeleteJobWithHttpInfo(String jobId) throws ApiException {
        com.squareup.okhttp.Call call = queueDeleteJobValidateBeforeCall(jobId, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call checks if to delete a queue job (asynchronously)
     * 
     * @param jobId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueDeleteJobAsync(String jobId, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueDeleteJobValidateBeforeCall(jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueDeleteQueue
     * @param queueId Queue Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueDeleteQueueCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/Queue/{queueId}"
            .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueDeleteQueueValidateBeforeCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueDeleteQueue(Async)");
        }
        

        com.squareup.okhttp.Call call = queueDeleteQueueCall(queueId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call checks if to delete a queue
     * 
     * @param queueId Queue Identifier (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean queueDeleteQueue(String queueId) throws ApiException {
        ApiResponse<Boolean> resp = queueDeleteQueueWithHttpInfo(queueId);
        return resp.getData();
    }

    /**
     * This call checks if to delete a queue
     * 
     * @param queueId Queue Identifier (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> queueDeleteQueueWithHttpInfo(String queueId) throws ApiException {
        com.squareup.okhttp.Call call = queueDeleteQueueValidateBeforeCall(queueId, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call checks if to delete a queue (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueDeleteQueueAsync(String queueId, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueDeleteQueueValidateBeforeCall(queueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueEnqueuedJob
     * @param jobId Job Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueEnqueuedJobCall(String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/Enqueue/{jobId}"
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueEnqueuedJobValidateBeforeCall(String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling queueEnqueuedJob(Async)");
        }
        

        com.squareup.okhttp.Call call = queueEnqueuedJobCall(jobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call checks if to equeue a job is in state Scheduled or Failed
     * 
     * @param jobId Job Identifier (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean queueEnqueuedJob(String jobId) throws ApiException {
        ApiResponse<Boolean> resp = queueEnqueuedJobWithHttpInfo(jobId);
        return resp.getData();
    }

    /**
     * This call checks if to equeue a job is in state Scheduled or Failed
     * 
     * @param jobId Job Identifier (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> queueEnqueuedJobWithHttpInfo(String jobId) throws ApiException {
        com.squareup.okhttp.Call call = queueEnqueuedJobValidateBeforeCall(jobId, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call checks if to equeue a job is in state Scheduled or Failed (asynchronously)
     * 
     * @param jobId Job Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueEnqueuedJobAsync(String jobId, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueEnqueuedJobValidateBeforeCall(jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueGetJobInfo
     * @param jobId Job Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueGetJobInfoCall(String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/JobInfo/{jobId}"
            .replaceAll("\\{" + "jobId" + "\\}", apiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueGetJobInfoValidateBeforeCall(String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling queueGetJobInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = queueGetJobInfoCall(jobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a job info
     * 
     * @param jobId Job Identifier (required)
     * @return QueueJobInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueJobInfoDto queueGetJobInfo(String jobId) throws ApiException {
        ApiResponse<QueueJobInfoDto> resp = queueGetJobInfoWithHttpInfo(jobId);
        return resp.getData();
    }

    /**
     * This call returns a job info
     * 
     * @param jobId Job Identifier (required)
     * @return ApiResponse&lt;QueueJobInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueJobInfoDto> queueGetJobInfoWithHttpInfo(String jobId) throws ApiException {
        com.squareup.okhttp.Call call = queueGetJobInfoValidateBeforeCall(jobId, null, null);
        Type localVarReturnType = new TypeToken<QueueJobInfoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a job info (asynchronously)
     * 
     * @param jobId Job Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueGetJobInfoAsync(String jobId, final ApiCallback<QueueJobInfoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueGetJobInfoValidateBeforeCall(jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueJobInfoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueGetQueueAggregationList
     * @param getQueueInfo Queue information (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueAggregationListCall(GetQueueInfoDto getQueueInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getQueueInfo;

        // create path and map variables
        String localVarPath = "/api/Queue/GetQueueAggregatedList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueGetQueueAggregationListValidateBeforeCall(GetQueueInfoDto getQueueInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getQueueInfo' is set
        if (getQueueInfo == null) {
            throw new ApiException("Missing the required parameter 'getQueueInfo' when calling queueGetQueueAggregationList(Async)");
        }
        

        com.squareup.okhttp.Call call = queueGetQueueAggregationListCall(getQueueInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the queue aggregated information list
     * 
     * @param getQueueInfo Queue information (required)
     * @return List&lt;QueueAggregationInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<QueueAggregationInfoDto> queueGetQueueAggregationList(GetQueueInfoDto getQueueInfo) throws ApiException {
        ApiResponse<List<QueueAggregationInfoDto>> resp = queueGetQueueAggregationListWithHttpInfo(getQueueInfo);
        return resp.getData();
    }

    /**
     * This call returns the queue aggregated information list
     * 
     * @param getQueueInfo Queue information (required)
     * @return ApiResponse&lt;List&lt;QueueAggregationInfoDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<QueueAggregationInfoDto>> queueGetQueueAggregationListWithHttpInfo(GetQueueInfoDto getQueueInfo) throws ApiException {
        com.squareup.okhttp.Call call = queueGetQueueAggregationListValidateBeforeCall(getQueueInfo, null, null);
        Type localVarReturnType = new TypeToken<List<QueueAggregationInfoDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the queue aggregated information list (asynchronously)
     * 
     * @param getQueueInfo Queue information (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueAggregationListAsync(GetQueueInfoDto getQueueInfo, final ApiCallback<List<QueueAggregationInfoDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueGetQueueAggregationListValidateBeforeCall(getQueueInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<QueueAggregationInfoDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueGetQueueAggregationList_0
     * @param queueId Queue Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueAggregationList_0Call(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/QueueAggregated/{queueId}"
            .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueGetQueueAggregationList_0ValidateBeforeCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueGetQueueAggregationList_0(Async)");
        }
        

        com.squareup.okhttp.Call call = queueGetQueueAggregationList_0Call(queueId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the specific queue aggregated information
     * 
     * @param queueId Queue Identifier (required)
     * @return QueueAggregationInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueAggregationInfoDto queueGetQueueAggregationList_0(String queueId) throws ApiException {
        ApiResponse<QueueAggregationInfoDto> resp = queueGetQueueAggregationList_0WithHttpInfo(queueId);
        return resp.getData();
    }

    /**
     * This call returns the specific queue aggregated information
     * 
     * @param queueId Queue Identifier (required)
     * @return ApiResponse&lt;QueueAggregationInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueAggregationInfoDto> queueGetQueueAggregationList_0WithHttpInfo(String queueId) throws ApiException {
        com.squareup.okhttp.Call call = queueGetQueueAggregationList_0ValidateBeforeCall(queueId, null, null);
        Type localVarReturnType = new TypeToken<QueueAggregationInfoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the specific queue aggregated information (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueAggregationList_0Async(String queueId, final ApiCallback<QueueAggregationInfoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueGetQueueAggregationList_0ValidateBeforeCall(queueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueAggregationInfoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueGetQueueAggregationStatusInfo
     * @param queueId Queue Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueAggregationStatusInfoCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/QueueAggregationStatusInfo/{queueId}"
            .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueGetQueueAggregationStatusInfoValidateBeforeCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueGetQueueAggregationStatusInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = queueGetQueueAggregationStatusInfoCall(queueId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the specific queue aggregated status
     * 
     * @param queueId Queue Identifier (required)
     * @return QueueAggregationStatusInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueAggregationStatusInfoDto queueGetQueueAggregationStatusInfo(String queueId) throws ApiException {
        ApiResponse<QueueAggregationStatusInfoDto> resp = queueGetQueueAggregationStatusInfoWithHttpInfo(queueId);
        return resp.getData();
    }

    /**
     * This call returns the specific queue aggregated status
     * 
     * @param queueId Queue Identifier (required)
     * @return ApiResponse&lt;QueueAggregationStatusInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueAggregationStatusInfoDto> queueGetQueueAggregationStatusInfoWithHttpInfo(String queueId) throws ApiException {
        com.squareup.okhttp.Call call = queueGetQueueAggregationStatusInfoValidateBeforeCall(queueId, null, null);
        Type localVarReturnType = new TypeToken<QueueAggregationStatusInfoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the specific queue aggregated status (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueAggregationStatusInfoAsync(String queueId, final ApiCallback<QueueAggregationStatusInfoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueGetQueueAggregationStatusInfoValidateBeforeCall(queueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueAggregationStatusInfoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueGetQueueEndJobInfo
     * @param queueId Queue Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueEndJobInfoCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/EndJobInfo/{queueId}"
            .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueGetQueueEndJobInfoValidateBeforeCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueGetQueueEndJobInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = queueGetQueueEndJobInfoCall(queueId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the end job information
     * 
     * @param queueId Queue Identifier (required)
     * @return QueueJobInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueJobInfoDto queueGetQueueEndJobInfo(String queueId) throws ApiException {
        ApiResponse<QueueJobInfoDto> resp = queueGetQueueEndJobInfoWithHttpInfo(queueId);
        return resp.getData();
    }

    /**
     * This call returns the end job information
     * 
     * @param queueId Queue Identifier (required)
     * @return ApiResponse&lt;QueueJobInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueJobInfoDto> queueGetQueueEndJobInfoWithHttpInfo(String queueId) throws ApiException {
        com.squareup.okhttp.Call call = queueGetQueueEndJobInfoValidateBeforeCall(queueId, null, null);
        Type localVarReturnType = new TypeToken<QueueJobInfoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the end job information (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueEndJobInfoAsync(String queueId, final ApiCallback<QueueJobInfoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueGetQueueEndJobInfoValidateBeforeCall(queueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueJobInfoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueGetQueueJobInfo
     * @param queueId Queue Identifier (required)
     * @param getQueueJobInfo Job Information (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueJobInfoCall(String queueId, GetQueueJobInfoDto getQueueJobInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getQueueJobInfo;

        // create path and map variables
        String localVarPath = "/api/Queue/GetQueueJobInfoList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (queueId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("queueId", queueId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueGetQueueJobInfoValidateBeforeCall(String queueId, GetQueueJobInfoDto getQueueJobInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueGetQueueJobInfo(Async)");
        }
        
        // verify the required parameter 'getQueueJobInfo' is set
        if (getQueueJobInfo == null) {
            throw new ApiException("Missing the required parameter 'getQueueJobInfo' when calling queueGetQueueJobInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = queueGetQueueJobInfoCall(queueId, getQueueJobInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the job info information list
     * 
     * @param queueId Queue Identifier (required)
     * @param getQueueJobInfo Job Information (required)
     * @return List&lt;QueueJobInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<QueueJobInfoDto> queueGetQueueJobInfo(String queueId, GetQueueJobInfoDto getQueueJobInfo) throws ApiException {
        ApiResponse<List<QueueJobInfoDto>> resp = queueGetQueueJobInfoWithHttpInfo(queueId, getQueueJobInfo);
        return resp.getData();
    }

    /**
     * This call returns the job info information list
     * 
     * @param queueId Queue Identifier (required)
     * @param getQueueJobInfo Job Information (required)
     * @return ApiResponse&lt;List&lt;QueueJobInfoDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<QueueJobInfoDto>> queueGetQueueJobInfoWithHttpInfo(String queueId, GetQueueJobInfoDto getQueueJobInfo) throws ApiException {
        com.squareup.okhttp.Call call = queueGetQueueJobInfoValidateBeforeCall(queueId, getQueueJobInfo, null, null);
        Type localVarReturnType = new TypeToken<List<QueueJobInfoDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the job info information list (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param getQueueJobInfo Job Information (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueJobInfoAsync(String queueId, GetQueueJobInfoDto getQueueJobInfo, final ApiCallback<List<QueueJobInfoDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueGetQueueJobInfoValidateBeforeCall(queueId, getQueueJobInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<QueueJobInfoDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueGetQueueJobSucceededResultList
     * @param queueId  (required)
     * @param getQueueJobInfo  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueJobSucceededResultListCall(String queueId, GetQueueJobInfoDto getQueueJobInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getQueueJobInfo;

        // create path and map variables
        String localVarPath = "/api/Queue/GetQueueJobSucceededResultList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (queueId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("queueId", queueId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueGetQueueJobSucceededResultListValidateBeforeCall(String queueId, GetQueueJobInfoDto getQueueJobInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueGetQueueJobSucceededResultList(Async)");
        }
        
        // verify the required parameter 'getQueueJobInfo' is set
        if (getQueueJobInfo == null) {
            throw new ApiException("Missing the required parameter 'getQueueJobInfo' when calling queueGetQueueJobSucceededResultList(Async)");
        }
        

        com.squareup.okhttp.Call call = queueGetQueueJobSucceededResultListCall(queueId, getQueueJobInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the job result of specific queue
     * 
     * @param queueId  (required)
     * @param getQueueJobInfo  (required)
     * @return List&lt;JobResultDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JobResultDto> queueGetQueueJobSucceededResultList(String queueId, GetQueueJobInfoDto getQueueJobInfo) throws ApiException {
        ApiResponse<List<JobResultDto>> resp = queueGetQueueJobSucceededResultListWithHttpInfo(queueId, getQueueJobInfo);
        return resp.getData();
    }

    /**
     * Gets the job result of specific queue
     * 
     * @param queueId  (required)
     * @param getQueueJobInfo  (required)
     * @return ApiResponse&lt;List&lt;JobResultDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JobResultDto>> queueGetQueueJobSucceededResultListWithHttpInfo(String queueId, GetQueueJobInfoDto getQueueJobInfo) throws ApiException {
        com.squareup.okhttp.Call call = queueGetQueueJobSucceededResultListValidateBeforeCall(queueId, getQueueJobInfo, null, null);
        Type localVarReturnType = new TypeToken<List<JobResultDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the job result of specific queue (asynchronously)
     * 
     * @param queueId  (required)
     * @param getQueueJobInfo  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueJobSucceededResultListAsync(String queueId, GetQueueJobInfoDto getQueueJobInfo, final ApiCallback<List<JobResultDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueGetQueueJobSucceededResultListValidateBeforeCall(queueId, getQueueJobInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JobResultDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueGetQueueList
     * @param getQueueInfo Queue information (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueListCall(GetQueueInfoDto getQueueInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = getQueueInfo;

        // create path and map variables
        String localVarPath = "/api/Queue/GetQueueList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueGetQueueListValidateBeforeCall(GetQueueInfoDto getQueueInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'getQueueInfo' is set
        if (getQueueInfo == null) {
            throw new ApiException("Missing the required parameter 'getQueueInfo' when calling queueGetQueueList(Async)");
        }
        

        com.squareup.okhttp.Call call = queueGetQueueListCall(getQueueInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns all jobs of queue
     * 
     * @param getQueueInfo Queue information (required)
     * @return List&lt;QueueJobInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<QueueJobInfoDto> queueGetQueueList(GetQueueInfoDto getQueueInfo) throws ApiException {
        ApiResponse<List<QueueJobInfoDto>> resp = queueGetQueueListWithHttpInfo(getQueueInfo);
        return resp.getData();
    }

    /**
     * This call returns all jobs of queue
     * 
     * @param getQueueInfo Queue information (required)
     * @return ApiResponse&lt;List&lt;QueueJobInfoDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<QueueJobInfoDto>> queueGetQueueListWithHttpInfo(GetQueueInfoDto getQueueInfo) throws ApiException {
        com.squareup.okhttp.Call call = queueGetQueueListValidateBeforeCall(getQueueInfo, null, null);
        Type localVarReturnType = new TypeToken<List<QueueJobInfoDto>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns all jobs of queue (asynchronously)
     * 
     * @param getQueueInfo Queue information (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueListAsync(GetQueueInfoDto getQueueInfo, final ApiCallback<List<QueueJobInfoDto>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueGetQueueListValidateBeforeCall(getQueueInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<QueueJobInfoDto>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueGetQueueWorkItemCount
     * @param queueId Queue Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueWorkItemCountCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/WorkItemCount/{queueId}"
            .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueGetQueueWorkItemCountValidateBeforeCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueGetQueueWorkItemCount(Async)");
        }
        

        com.squareup.okhttp.Call call = queueGetQueueWorkItemCountCall(queueId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the counts of work item for a queue
     * 
     * @param queueId Queue Identifier (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer queueGetQueueWorkItemCount(String queueId) throws ApiException {
        ApiResponse<Integer> resp = queueGetQueueWorkItemCountWithHttpInfo(queueId);
        return resp.getData();
    }

    /**
     * This call returns the counts of work item for a queue
     * 
     * @param queueId Queue Identifier (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> queueGetQueueWorkItemCountWithHttpInfo(String queueId) throws ApiException {
        com.squareup.okhttp.Call call = queueGetQueueWorkItemCountValidateBeforeCall(queueId, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the counts of work item for a queue (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueWorkItemCountAsync(String queueId, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueGetQueueWorkItemCountValidateBeforeCall(queueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueGetQueueWorkItemLeftCount
     * @param queueId Queue Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueWorkItemLeftCountCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/WorkItemLeftCount/{queueId}"
            .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueGetQueueWorkItemLeftCountValidateBeforeCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueGetQueueWorkItemLeftCount(Async)");
        }
        

        com.squareup.okhttp.Call call = queueGetQueueWorkItemLeftCountCall(queueId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns the counts how many work item jobs left
     * 
     * @param queueId Queue Identifier (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long queueGetQueueWorkItemLeftCount(String queueId) throws ApiException {
        ApiResponse<Long> resp = queueGetQueueWorkItemLeftCountWithHttpInfo(queueId);
        return resp.getData();
    }

    /**
     * This call returns the counts how many work item jobs left
     * 
     * @param queueId Queue Identifier (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> queueGetQueueWorkItemLeftCountWithHttpInfo(String queueId) throws ApiException {
        com.squareup.okhttp.Call call = queueGetQueueWorkItemLeftCountValidateBeforeCall(queueId, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns the counts how many work item jobs left (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueWorkItemLeftCountAsync(String queueId, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueGetQueueWorkItemLeftCountValidateBeforeCall(queueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queueGetQueueWorkJobInfo
     * @param queueId Queue Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueWorkJobInfoCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Queue/WorkJobInfo/{queueId}"
            .replaceAll("\\{" + "queueId" + "\\}", apiClient.escapeString(queueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queueGetQueueWorkJobInfoValidateBeforeCall(String queueId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueId' is set
        if (queueId == null) {
            throw new ApiException("Missing the required parameter 'queueId' when calling queueGetQueueWorkJobInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = queueGetQueueWorkJobInfoCall(queueId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This call returns a work job information
     * 
     * @param queueId Queue Identifier (required)
     * @return QueueJobInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueJobInfoDto queueGetQueueWorkJobInfo(String queueId) throws ApiException {
        ApiResponse<QueueJobInfoDto> resp = queueGetQueueWorkJobInfoWithHttpInfo(queueId);
        return resp.getData();
    }

    /**
     * This call returns a work job information
     * 
     * @param queueId Queue Identifier (required)
     * @return ApiResponse&lt;QueueJobInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueJobInfoDto> queueGetQueueWorkJobInfoWithHttpInfo(String queueId) throws ApiException {
        com.squareup.okhttp.Call call = queueGetQueueWorkJobInfoValidateBeforeCall(queueId, null, null);
        Type localVarReturnType = new TypeToken<QueueJobInfoDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This call returns a work job information (asynchronously)
     * 
     * @param queueId Queue Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueGetQueueWorkJobInfoAsync(String queueId, final ApiCallback<QueueJobInfoDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueGetQueueWorkJobInfoValidateBeforeCall(queueId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueJobInfoDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
