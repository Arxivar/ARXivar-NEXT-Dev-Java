/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.UserCompleteDTO;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;

/**
 * TaskWorkDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-11T12:02:47.866+02:00")
public class TaskWorkDTO {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("processId")
  private Integer processId = null;

  @SerializedName("workflowId")
  private Integer workflowId = null;

  @SerializedName("notes")
  private Boolean notes = null;

  @SerializedName("attachments")
  private Boolean attachments = null;

  @SerializedName("docnumber")
  private Integer docnumber = null;

  @SerializedName("revision")
  private Integer revision = null;

  @SerializedName("startDate")
  private DateTime startDate = null;

  @SerializedName("taskName")
  private String taskName = null;

  @SerializedName("taskDescription")
  private String taskDescription = null;

  @SerializedName("user")
  private Integer user = null;

  @SerializedName("endDate")
  private DateTime endDate = null;

  @SerializedName("state")
  private Integer state = null;

  @SerializedName("expireDate")
  private DateTime expireDate = null;

  @SerializedName("principalProfileSecurity")
  private Integer principalProfileSecurity = null;

  @SerializedName("nodeId")
  private Integer nodeId = null;

  @SerializedName("userEnumSelection")
  private Integer userEnumSelection = null;

  @SerializedName("newProfileInput")
  private Boolean newProfileInput = null;

  @SerializedName("profileEdit")
  private Boolean profileEdit = null;

  @SerializedName("folderInsert")
  private Boolean folderInsert = null;

  @SerializedName("priority")
  private Integer priority = null;

  @SerializedName("modelId")
  private Integer modelId = null;

  @SerializedName("taskType")
  private Integer taskType = null;

  @SerializedName("executionMode")
  private Integer executionMode = null;

  @SerializedName("mailNotification")
  private Boolean mailNotification = null;

  @SerializedName("automaticTaskFeedDate")
  private DateTime automaticTaskFeedDate = null;

  @SerializedName("passwordRequired")
  private Boolean passwordRequired = null;

  @SerializedName("newMemo")
  private Boolean newMemo = null;

  @SerializedName("readed")
  private Boolean readed = null;

  @SerializedName("asyncCommand")
  private Boolean asyncCommand = null;

  @SerializedName("editCopy")
  private Boolean editCopy = null;

  @SerializedName("takingChargeRequired")
  private Boolean takingChargeRequired = null;

  @SerializedName("taskDeadlineDate")
  private DateTime taskDeadlineDate = null;

  @SerializedName("taskActivationDate")
  private DateTime taskActivationDate = null;

  @SerializedName("professionalRoleSelectionDescription")
  private String professionalRoleSelectionDescription = null;

  @SerializedName("processVariablesSetDescription")
  private String processVariablesSetDescription = null;

  @SerializedName("organizationChartId")
  private Integer organizationChartId = null;

  @SerializedName("delegationId")
  private Integer delegationId = null;

  @SerializedName("openedTaskDate")
  private DateTime openedTaskDate = null;

  @SerializedName("exitState")
  private String exitState = null;

  @SerializedName("groupTaskId")
  private String groupTaskId = null;

  @SerializedName("organizationChartOriginalUserId")
  private Integer organizationChartOriginalUserId = null;

  @SerializedName("originalUserId")
  private Integer originalUserId = null;

  @SerializedName("externalTaskTypeId")
  private String externalTaskTypeId = null;

  @SerializedName("manageMaster")
  private Boolean manageMaster = null;

  @SerializedName("waitUserExecutionMode")
  private Integer waitUserExecutionMode = null;

  @SerializedName("manageInstruction")
  private Boolean manageInstruction = null;

  @SerializedName("htmlDescriptionEnabled")
  private String htmlDescriptionEnabled = null;

  @SerializedName("dynamicMansionDescription")
  private String dynamicMansionDescription = null;

  @SerializedName("partsVisibility")
  private Integer partsVisibility = null;

  @SerializedName("defaultExitState")
  private String defaultExitState = null;

  @SerializedName("reassignMode")
  private Integer reassignMode = null;

  @SerializedName("autoAssignMode")
  private Integer autoAssignMode = null;

  @SerializedName("nameTranslationId")
  private Integer nameTranslationId = null;

  @SerializedName("descriptionTranslationId")
  private Integer descriptionTranslationId = null;

  @SerializedName("professionalRolesDescriptionTranslationId")
  private Integer professionalRolesDescriptionTranslationId = null;

  @SerializedName("variablesDescriptionTranslationId")
  private Integer variablesDescriptionTranslationId = null;

  @SerializedName("htmlDescriptionTranslationId")
  private Integer htmlDescriptionTranslationId = null;

  @SerializedName("dynamicMansionDescriptionTranslationId")
  private Integer dynamicMansionDescriptionTranslationId = null;

  @SerializedName("groupIcon")
  private Boolean groupIcon = null;

  @SerializedName("executers")
  private List<UserCompleteDTO> executers = null;

  @SerializedName("attachmentsVisible")
  private Boolean attachmentsVisible = null;

  @SerializedName("detailsVisible")
  private Boolean detailsVisible = null;

  @SerializedName("profilesVisible")
  private Boolean profilesVisible = null;

  @SerializedName("notesVisible")
  private Boolean notesVisible = null;

  @SerializedName("historyVisible")
  private Boolean historyVisible = null;

  @SerializedName("instructionVisible")
  private Boolean instructionVisible = null;

  @SerializedName("showProcessVisible")
  private Boolean showProcessVisible = null;

  @SerializedName("variablesVisible")
  private Boolean variablesVisible = null;

  @SerializedName("exitStateComboVisible")
  private Boolean exitStateComboVisible = null;

  @SerializedName("operationsVisible")
  private Boolean operationsVisible = null;

  @SerializedName("workFlowName")
  private String workFlowName = null;

  @SerializedName("workFlowDescription")
  private String workFlowDescription = null;

  @SerializedName("workFlowDetails")
  private String workFlowDetails = null;

  @SerializedName("workFlowColor")
  private Integer workFlowColor = null;

  @SerializedName("showDesignerVisible")
  private Boolean showDesignerVisible = null;

  public TaskWorkDTO id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier
   * @return id
  **/
  @ApiModelProperty(value = "Identifier")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public TaskWorkDTO processId(Integer processId) {
    this.processId = processId;
    return this;
  }

   /**
   * Process Identifier
   * @return processId
  **/
  @ApiModelProperty(value = "Process Identifier")
  public Integer getProcessId() {
    return processId;
  }

  public void setProcessId(Integer processId) {
    this.processId = processId;
  }

  public TaskWorkDTO workflowId(Integer workflowId) {
    this.workflowId = workflowId;
    return this;
  }

   /**
   * Workflow Identifier
   * @return workflowId
  **/
  @ApiModelProperty(value = "Workflow Identifier")
  public Integer getWorkflowId() {
    return workflowId;
  }

  public void setWorkflowId(Integer workflowId) {
    this.workflowId = workflowId;
  }

  public TaskWorkDTO notes(Boolean notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Notes
   * @return notes
  **/
  @ApiModelProperty(value = "Notes")
  public Boolean isNotes() {
    return notes;
  }

  public void setNotes(Boolean notes) {
    this.notes = notes;
  }

  public TaskWorkDTO attachments(Boolean attachments) {
    this.attachments = attachments;
    return this;
  }

   /**
   * Attachments
   * @return attachments
  **/
  @ApiModelProperty(value = "Attachments")
  public Boolean isAttachments() {
    return attachments;
  }

  public void setAttachments(Boolean attachments) {
    this.attachments = attachments;
  }

  public TaskWorkDTO docnumber(Integer docnumber) {
    this.docnumber = docnumber;
    return this;
  }

   /**
   * Principal Document Identifier
   * @return docnumber
  **/
  @ApiModelProperty(value = "Principal Document Identifier")
  public Integer getDocnumber() {
    return docnumber;
  }

  public void setDocnumber(Integer docnumber) {
    this.docnumber = docnumber;
  }

  public TaskWorkDTO revision(Integer revision) {
    this.revision = revision;
    return this;
  }

   /**
   * Principal Document Revision Number
   * @return revision
  **/
  @ApiModelProperty(value = "Principal Document Revision Number")
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }

  public TaskWorkDTO startDate(DateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Start Date
   * @return startDate
  **/
  @ApiModelProperty(value = "Start Date")
  public DateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(DateTime startDate) {
    this.startDate = startDate;
  }

  public TaskWorkDTO taskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

   /**
   * Task Name
   * @return taskName
  **/
  @ApiModelProperty(value = "Task Name")
  public String getTaskName() {
    return taskName;
  }

  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }

  public TaskWorkDTO taskDescription(String taskDescription) {
    this.taskDescription = taskDescription;
    return this;
  }

   /**
   * Description
   * @return taskDescription
  **/
  @ApiModelProperty(value = "Description")
  public String getTaskDescription() {
    return taskDescription;
  }

  public void setTaskDescription(String taskDescription) {
    this.taskDescription = taskDescription;
  }

  public TaskWorkDTO user(Integer user) {
    this.user = user;
    return this;
  }

   /**
   * Author Identifier
   * @return user
  **/
  @ApiModelProperty(value = "Author Identifier")
  public Integer getUser() {
    return user;
  }

  public void setUser(Integer user) {
    this.user = user;
  }

  public TaskWorkDTO endDate(DateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * End Date
   * @return endDate
  **/
  @ApiModelProperty(value = "End Date")
  public DateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(DateTime endDate) {
    this.endDate = endDate;
  }

  public TaskWorkDTO state(Integer state) {
    this.state = state;
    return this;
  }

   /**
   * Possible values:  0: Ended  1: Active  2: NotActive 
   * @return state
  **/
  @ApiModelProperty(value = "Possible values:  0: Ended  1: Active  2: NotActive ")
  public Integer getState() {
    return state;
  }

  public void setState(Integer state) {
    this.state = state;
  }

  public TaskWorkDTO expireDate(DateTime expireDate) {
    this.expireDate = expireDate;
    return this;
  }

   /**
   * Expiration Date
   * @return expireDate
  **/
  @ApiModelProperty(value = "Expiration Date")
  public DateTime getExpireDate() {
    return expireDate;
  }

  public void setExpireDate(DateTime expireDate) {
    this.expireDate = expireDate;
  }

  public TaskWorkDTO principalProfileSecurity(Integer principalProfileSecurity) {
    this.principalProfileSecurity = principalProfileSecurity;
    return this;
  }

   /**
   * Possible values:  0: Read  1: Write  2: FromSecurity 
   * @return principalProfileSecurity
  **/
  @ApiModelProperty(value = "Possible values:  0: Read  1: Write  2: FromSecurity ")
  public Integer getPrincipalProfileSecurity() {
    return principalProfileSecurity;
  }

  public void setPrincipalProfileSecurity(Integer principalProfileSecurity) {
    this.principalProfileSecurity = principalProfileSecurity;
  }

  public TaskWorkDTO nodeId(Integer nodeId) {
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Task Node Identifier
   * @return nodeId
  **/
  @ApiModelProperty(value = "Task Node Identifier")
  public Integer getNodeId() {
    return nodeId;
  }

  public void setNodeId(Integer nodeId) {
    this.nodeId = nodeId;
  }

  public TaskWorkDTO userEnumSelection(Integer userEnumSelection) {
    this.userEnumSelection = userEnumSelection;
    return this;
  }

   /**
   * Possible values:  0: Standard  1: List  2: OrganizationChart 
   * @return userEnumSelection
  **/
  @ApiModelProperty(value = "Possible values:  0: Standard  1: List  2: OrganizationChart ")
  public Integer getUserEnumSelection() {
    return userEnumSelection;
  }

  public void setUserEnumSelection(Integer userEnumSelection) {
    this.userEnumSelection = userEnumSelection;
  }

  public TaskWorkDTO newProfileInput(Boolean newProfileInput) {
    this.newProfileInput = newProfileInput;
    return this;
  }

   /**
   * Active the operation to insert a principal document
   * @return newProfileInput
  **/
  @ApiModelProperty(value = "Active the operation to insert a principal document")
  public Boolean isNewProfileInput() {
    return newProfileInput;
  }

  public void setNewProfileInput(Boolean newProfileInput) {
    this.newProfileInput = newProfileInput;
  }

  public TaskWorkDTO profileEdit(Boolean profileEdit) {
    this.profileEdit = profileEdit;
    return this;
  }

   /**
   * Active the operation to update a principal document
   * @return profileEdit
  **/
  @ApiModelProperty(value = "Active the operation to update a principal document")
  public Boolean isProfileEdit() {
    return profileEdit;
  }

  public void setProfileEdit(Boolean profileEdit) {
    this.profileEdit = profileEdit;
  }

  public TaskWorkDTO folderInsert(Boolean folderInsert) {
    this.folderInsert = folderInsert;
    return this;
  }

   /**
   * Active the operation to insert in folder a principal document
   * @return folderInsert
  **/
  @ApiModelProperty(value = "Active the operation to insert in folder a principal document")
  public Boolean isFolderInsert() {
    return folderInsert;
  }

  public void setFolderInsert(Boolean folderInsert) {
    this.folderInsert = folderInsert;
  }

  public TaskWorkDTO priority(Integer priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Possible values:  0: Standard  1: Medium  2: High 
   * @return priority
  **/
  @ApiModelProperty(value = "Possible values:  0: Standard  1: Medium  2: High ")
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }

  public TaskWorkDTO modelId(Integer modelId) {
    this.modelId = modelId;
    return this;
  }

   /**
   * Model Identifier for operation to insert a principal document
   * @return modelId
  **/
  @ApiModelProperty(value = "Model Identifier for operation to insert a principal document")
  public Integer getModelId() {
    return modelId;
  }

  public void setModelId(Integer modelId) {
    this.modelId = modelId;
  }

  public TaskWorkDTO taskType(Integer taskType) {
    this.taskType = taskType;
    return this;
  }

   /**
   * Possible values:  0: Standard  1: Connection  2: Process  3: Pause  5: Task5  6: Documentation  7: Chrono 
   * @return taskType
  **/
  @ApiModelProperty(value = "Possible values:  0: Standard  1: Connection  2: Process  3: Pause  5: Task5  6: Documentation  7: Chrono ")
  public Integer getTaskType() {
    return taskType;
  }

  public void setTaskType(Integer taskType) {
    this.taskType = taskType;
  }

  public TaskWorkDTO executionMode(Integer executionMode) {
    this.executionMode = executionMode;
    return this;
  }

   /**
   * Execution Mode
   * @return executionMode
  **/
  @ApiModelProperty(value = "Execution Mode")
  public Integer getExecutionMode() {
    return executionMode;
  }

  public void setExecutionMode(Integer executionMode) {
    this.executionMode = executionMode;
  }

  public TaskWorkDTO mailNotification(Boolean mailNotification) {
    this.mailNotification = mailNotification;
    return this;
  }

   /**
   * Smtp for mail notification
   * @return mailNotification
  **/
  @ApiModelProperty(value = "Smtp for mail notification")
  public Boolean isMailNotification() {
    return mailNotification;
  }

  public void setMailNotification(Boolean mailNotification) {
    this.mailNotification = mailNotification;
  }

  public TaskWorkDTO automaticTaskFeedDate(DateTime automaticTaskFeedDate) {
    this.automaticTaskFeedDate = automaticTaskFeedDate;
    return this;
  }

   /**
   * Date of Automatic Feed
   * @return automaticTaskFeedDate
  **/
  @ApiModelProperty(value = "Date of Automatic Feed")
  public DateTime getAutomaticTaskFeedDate() {
    return automaticTaskFeedDate;
  }

  public void setAutomaticTaskFeedDate(DateTime automaticTaskFeedDate) {
    this.automaticTaskFeedDate = automaticTaskFeedDate;
  }

  public TaskWorkDTO passwordRequired(Boolean passwordRequired) {
    this.passwordRequired = passwordRequired;
    return this;
  }

   /**
   * Password request for the conclusion of the task
   * @return passwordRequired
  **/
  @ApiModelProperty(value = "Password request for the conclusion of the task")
  public Boolean isPasswordRequired() {
    return passwordRequired;
  }

  public void setPasswordRequired(Boolean passwordRequired) {
    this.passwordRequired = passwordRequired;
  }

  public TaskWorkDTO newMemo(Boolean newMemo) {
    this.newMemo = newMemo;
    return this;
  }

   /**
   * Creating a new memo
   * @return newMemo
  **/
  @ApiModelProperty(value = "Creating a new memo")
  public Boolean isNewMemo() {
    return newMemo;
  }

  public void setNewMemo(Boolean newMemo) {
    this.newMemo = newMemo;
  }

  public TaskWorkDTO readed(Boolean readed) {
    this.readed = readed;
    return this;
  }

   /**
   * The task was read
   * @return readed
  **/
  @ApiModelProperty(value = "The task was read")
  public Boolean isReaded() {
    return readed;
  }

  public void setReaded(Boolean readed) {
    this.readed = readed;
  }

  public TaskWorkDTO asyncCommand(Boolean asyncCommand) {
    this.asyncCommand = asyncCommand;
    return this;
  }

   /**
   * Execution mode in the case of shell operation
   * @return asyncCommand
  **/
  @ApiModelProperty(value = "Execution mode in the case of shell operation")
  public Boolean isAsyncCommand() {
    return asyncCommand;
  }

  public void setAsyncCommand(Boolean asyncCommand) {
    this.asyncCommand = asyncCommand;
  }

  public TaskWorkDTO editCopy(Boolean editCopy) {
    this.editCopy = editCopy;
    return this;
  }

   /**
   * Copy the file in the edit buffer
   * @return editCopy
  **/
  @ApiModelProperty(value = "Copy the file in the edit buffer")
  public Boolean isEditCopy() {
    return editCopy;
  }

  public void setEditCopy(Boolean editCopy) {
    this.editCopy = editCopy;
  }

  public TaskWorkDTO takingChargeRequired(Boolean takingChargeRequired) {
    this.takingChargeRequired = takingChargeRequired;
    return this;
  }

   /**
   * Taking Charge Request
   * @return takingChargeRequired
  **/
  @ApiModelProperty(value = "Taking Charge Request")
  public Boolean isTakingChargeRequired() {
    return takingChargeRequired;
  }

  public void setTakingChargeRequired(Boolean takingChargeRequired) {
    this.takingChargeRequired = takingChargeRequired;
  }

  public TaskWorkDTO taskDeadlineDate(DateTime taskDeadlineDate) {
    this.taskDeadlineDate = taskDeadlineDate;
    return this;
  }

   /**
   * Date of expiration of the task
   * @return taskDeadlineDate
  **/
  @ApiModelProperty(value = "Date of expiration of the task")
  public DateTime getTaskDeadlineDate() {
    return taskDeadlineDate;
  }

  public void setTaskDeadlineDate(DateTime taskDeadlineDate) {
    this.taskDeadlineDate = taskDeadlineDate;
  }

  public TaskWorkDTO taskActivationDate(DateTime taskActivationDate) {
    this.taskActivationDate = taskActivationDate;
    return this;
  }

   /**
   * Task activation date
   * @return taskActivationDate
  **/
  @ApiModelProperty(value = "Task activation date")
  public DateTime getTaskActivationDate() {
    return taskActivationDate;
  }

  public void setTaskActivationDate(DateTime taskActivationDate) {
    this.taskActivationDate = taskActivationDate;
  }

  public TaskWorkDTO professionalRoleSelectionDescription(String professionalRoleSelectionDescription) {
    this.professionalRoleSelectionDescription = professionalRoleSelectionDescription;
    return this;
  }

   /**
   * Description of the professionals role selection operation
   * @return professionalRoleSelectionDescription
  **/
  @ApiModelProperty(value = "Description of the professionals role selection operation")
  public String getProfessionalRoleSelectionDescription() {
    return professionalRoleSelectionDescription;
  }

  public void setProfessionalRoleSelectionDescription(String professionalRoleSelectionDescription) {
    this.professionalRoleSelectionDescription = professionalRoleSelectionDescription;
  }

  public TaskWorkDTO processVariablesSetDescription(String processVariablesSetDescription) {
    this.processVariablesSetDescription = processVariablesSetDescription;
    return this;
  }

   /**
   * Description of the operation of process variables setting
   * @return processVariablesSetDescription
  **/
  @ApiModelProperty(value = "Description of the operation of process variables setting")
  public String getProcessVariablesSetDescription() {
    return processVariablesSetDescription;
  }

  public void setProcessVariablesSetDescription(String processVariablesSetDescription) {
    this.processVariablesSetDescription = processVariablesSetDescription;
  }

  public TaskWorkDTO organizationChartId(Integer organizationChartId) {
    this.organizationChartId = organizationChartId;
    return this;
  }

   /**
   * Organization Chart Identifier
   * @return organizationChartId
  **/
  @ApiModelProperty(value = "Organization Chart Identifier")
  public Integer getOrganizationChartId() {
    return organizationChartId;
  }

  public void setOrganizationChartId(Integer organizationChartId) {
    this.organizationChartId = organizationChartId;
  }

  public TaskWorkDTO delegationId(Integer delegationId) {
    this.delegationId = delegationId;
    return this;
  }

   /**
   * Delegation Identifier
   * @return delegationId
  **/
  @ApiModelProperty(value = "Delegation Identifier")
  public Integer getDelegationId() {
    return delegationId;
  }

  public void setDelegationId(Integer delegationId) {
    this.delegationId = delegationId;
  }

  public TaskWorkDTO openedTaskDate(DateTime openedTaskDate) {
    this.openedTaskDate = openedTaskDate;
    return this;
  }

   /**
   * Date of opening
   * @return openedTaskDate
  **/
  @ApiModelProperty(value = "Date of opening")
  public DateTime getOpenedTaskDate() {
    return openedTaskDate;
  }

  public void setOpenedTaskDate(DateTime openedTaskDate) {
    this.openedTaskDate = openedTaskDate;
  }

  public TaskWorkDTO exitState(String exitState) {
    this.exitState = exitState;
    return this;
  }

   /**
   * Exit State
   * @return exitState
  **/
  @ApiModelProperty(value = "Exit State")
  public String getExitState() {
    return exitState;
  }

  public void setExitState(String exitState) {
    this.exitState = exitState;
  }

  public TaskWorkDTO groupTaskId(String groupTaskId) {
    this.groupTaskId = groupTaskId;
    return this;
  }

   /**
   * Group Task Identifier
   * @return groupTaskId
  **/
  @ApiModelProperty(value = "Group Task Identifier")
  public String getGroupTaskId() {
    return groupTaskId;
  }

  public void setGroupTaskId(String groupTaskId) {
    this.groupTaskId = groupTaskId;
  }

  public TaskWorkDTO organizationChartOriginalUserId(Integer organizationChartOriginalUserId) {
    this.organizationChartOriginalUserId = organizationChartOriginalUserId;
    return this;
  }

   /**
   * Organization Identifier associated with the original user.
   * @return organizationChartOriginalUserId
  **/
  @ApiModelProperty(value = "Organization Identifier associated with the original user.")
  public Integer getOrganizationChartOriginalUserId() {
    return organizationChartOriginalUserId;
  }

  public void setOrganizationChartOriginalUserId(Integer organizationChartOriginalUserId) {
    this.organizationChartOriginalUserId = organizationChartOriginalUserId;
  }

  public TaskWorkDTO originalUserId(Integer originalUserId) {
    this.originalUserId = originalUserId;
    return this;
  }

   /**
   * Identifier of Original User to delegation
   * @return originalUserId
  **/
  @ApiModelProperty(value = "Identifier of Original User to delegation")
  public Integer getOriginalUserId() {
    return originalUserId;
  }

  public void setOriginalUserId(Integer originalUserId) {
    this.originalUserId = originalUserId;
  }

  public TaskWorkDTO externalTaskTypeId(String externalTaskTypeId) {
    this.externalTaskTypeId = externalTaskTypeId;
    return this;
  }

   /**
   * External Identifier
   * @return externalTaskTypeId
  **/
  @ApiModelProperty(value = "External Identifier")
  public String getExternalTaskTypeId() {
    return externalTaskTypeId;
  }

  public void setExternalTaskTypeId(String externalTaskTypeId) {
    this.externalTaskTypeId = externalTaskTypeId;
  }

  public TaskWorkDTO manageMaster(Boolean manageMaster) {
    this.manageMaster = manageMaster;
    return this;
  }

   /**
   * It allows you to view and act on workflow master that you are endorsing undergoing workflow approval process
   * @return manageMaster
  **/
  @ApiModelProperty(value = "It allows you to view and act on workflow master that you are endorsing undergoing workflow approval process")
  public Boolean isManageMaster() {
    return manageMaster;
  }

  public void setManageMaster(Boolean manageMaster) {
    this.manageMaster = manageMaster;
  }

  public TaskWorkDTO waitUserExecutionMode(Integer waitUserExecutionMode) {
    this.waitUserExecutionMode = waitUserExecutionMode;
    return this;
  }

   /**
   * It tells the workflow engine whether to proceed immediately to the conclusion of the task, or whether it should wait for all users who have been assigned the task have concluded their activities
   * @return waitUserExecutionMode
  **/
  @ApiModelProperty(value = "It tells the workflow engine whether to proceed immediately to the conclusion of the task, or whether it should wait for all users who have been assigned the task have concluded their activities")
  public Integer getWaitUserExecutionMode() {
    return waitUserExecutionMode;
  }

  public void setWaitUserExecutionMode(Integer waitUserExecutionMode) {
    this.waitUserExecutionMode = waitUserExecutionMode;
  }

  public TaskWorkDTO manageInstruction(Boolean manageInstruction) {
    this.manageInstruction = manageInstruction;
    return this;
  }

   /**
   * It allows to manage the operating instructions by means of an operation on the task
   * @return manageInstruction
  **/
  @ApiModelProperty(value = "It allows to manage the operating instructions by means of an operation on the task")
  public Boolean isManageInstruction() {
    return manageInstruction;
  }

  public void setManageInstruction(Boolean manageInstruction) {
    this.manageInstruction = manageInstruction;
  }

  public TaskWorkDTO htmlDescriptionEnabled(String htmlDescriptionEnabled) {
    this.htmlDescriptionEnabled = htmlDescriptionEnabled;
    return this;
  }

   /**
   * Specifies whether the task description is html
   * @return htmlDescriptionEnabled
  **/
  @ApiModelProperty(value = "Specifies whether the task description is html")
  public String getHtmlDescriptionEnabled() {
    return htmlDescriptionEnabled;
  }

  public void setHtmlDescriptionEnabled(String htmlDescriptionEnabled) {
    this.htmlDescriptionEnabled = htmlDescriptionEnabled;
  }

  public TaskWorkDTO dynamicMansionDescription(String dynamicMansionDescription) {
    this.dynamicMansionDescription = dynamicMansionDescription;
    return this;
  }

   /**
   * Descritpion for the dynamic mansion operation
   * @return dynamicMansionDescription
  **/
  @ApiModelProperty(value = "Descritpion for the dynamic mansion operation")
  public String getDynamicMansionDescription() {
    return dynamicMansionDescription;
  }

  public void setDynamicMansionDescription(String dynamicMansionDescription) {
    this.dynamicMansionDescription = dynamicMansionDescription;
  }

  public TaskWorkDTO partsVisibility(Integer partsVisibility) {
    this.partsVisibility = partsVisibility;
    return this;
  }

   /**
   * This flags enum indicates wich part is visible in the task
   * @return partsVisibility
  **/
  @ApiModelProperty(value = "This flags enum indicates wich part is visible in the task")
  public Integer getPartsVisibility() {
    return partsVisibility;
  }

  public void setPartsVisibility(Integer partsVisibility) {
    this.partsVisibility = partsVisibility;
  }

  public TaskWorkDTO defaultExitState(String defaultExitState) {
    this.defaultExitState = defaultExitState;
    return this;
  }

   /**
   * Default exit state for the task
   * @return defaultExitState
  **/
  @ApiModelProperty(value = "Default exit state for the task")
  public String getDefaultExitState() {
    return defaultExitState;
  }

  public void setDefaultExitState(String defaultExitState) {
    this.defaultExitState = defaultExitState;
  }

  public TaskWorkDTO reassignMode(Integer reassignMode) {
    this.reassignMode = reassignMode;
    return this;
  }

   /**
   * Possible values:  0: NotEnabled  1: EnabledToEveryone  2: EnabledToSelected 
   * @return reassignMode
  **/
  @ApiModelProperty(value = "Possible values:  0: NotEnabled  1: EnabledToEveryone  2: EnabledToSelected ")
  public Integer getReassignMode() {
    return reassignMode;
  }

  public void setReassignMode(Integer reassignMode) {
    this.reassignMode = reassignMode;
  }

  public TaskWorkDTO autoAssignMode(Integer autoAssignMode) {
    this.autoAssignMode = autoAssignMode;
    return this;
  }

   /**
   * Possible values:  0: NotEnabled  1: EnabledToEveryone  2: EnabledToSelected 
   * @return autoAssignMode
  **/
  @ApiModelProperty(value = "Possible values:  0: NotEnabled  1: EnabledToEveryone  2: EnabledToSelected ")
  public Integer getAutoAssignMode() {
    return autoAssignMode;
  }

  public void setAutoAssignMode(Integer autoAssignMode) {
    this.autoAssignMode = autoAssignMode;
  }

  public TaskWorkDTO nameTranslationId(Integer nameTranslationId) {
    this.nameTranslationId = nameTranslationId;
    return this;
  }

   /**
   * Id of the translation for the name of the task
   * @return nameTranslationId
  **/
  @ApiModelProperty(value = "Id of the translation for the name of the task")
  public Integer getNameTranslationId() {
    return nameTranslationId;
  }

  public void setNameTranslationId(Integer nameTranslationId) {
    this.nameTranslationId = nameTranslationId;
  }

  public TaskWorkDTO descriptionTranslationId(Integer descriptionTranslationId) {
    this.descriptionTranslationId = descriptionTranslationId;
    return this;
  }

   /**
   * Id of the translation for the description of the task
   * @return descriptionTranslationId
  **/
  @ApiModelProperty(value = "Id of the translation for the description of the task")
  public Integer getDescriptionTranslationId() {
    return descriptionTranslationId;
  }

  public void setDescriptionTranslationId(Integer descriptionTranslationId) {
    this.descriptionTranslationId = descriptionTranslationId;
  }

  public TaskWorkDTO professionalRolesDescriptionTranslationId(Integer professionalRolesDescriptionTranslationId) {
    this.professionalRolesDescriptionTranslationId = professionalRolesDescriptionTranslationId;
    return this;
  }

   /**
   * Id of the translation for the task professional figures selection operation description
   * @return professionalRolesDescriptionTranslationId
  **/
  @ApiModelProperty(value = "Id of the translation for the task professional figures selection operation description")
  public Integer getProfessionalRolesDescriptionTranslationId() {
    return professionalRolesDescriptionTranslationId;
  }

  public void setProfessionalRolesDescriptionTranslationId(Integer professionalRolesDescriptionTranslationId) {
    this.professionalRolesDescriptionTranslationId = professionalRolesDescriptionTranslationId;
  }

  public TaskWorkDTO variablesDescriptionTranslationId(Integer variablesDescriptionTranslationId) {
    this.variablesDescriptionTranslationId = variablesDescriptionTranslationId;
    return this;
  }

   /**
   * Id of the translation for task set variables operation description
   * @return variablesDescriptionTranslationId
  **/
  @ApiModelProperty(value = "Id of the translation for task set variables operation description")
  public Integer getVariablesDescriptionTranslationId() {
    return variablesDescriptionTranslationId;
  }

  public void setVariablesDescriptionTranslationId(Integer variablesDescriptionTranslationId) {
    this.variablesDescriptionTranslationId = variablesDescriptionTranslationId;
  }

  public TaskWorkDTO htmlDescriptionTranslationId(Integer htmlDescriptionTranslationId) {
    this.htmlDescriptionTranslationId = htmlDescriptionTranslationId;
    return this;
  }

   /**
   * Id of the translation for Html description of the task
   * @return htmlDescriptionTranslationId
  **/
  @ApiModelProperty(value = "Id of the translation for Html description of the task")
  public Integer getHtmlDescriptionTranslationId() {
    return htmlDescriptionTranslationId;
  }

  public void setHtmlDescriptionTranslationId(Integer htmlDescriptionTranslationId) {
    this.htmlDescriptionTranslationId = htmlDescriptionTranslationId;
  }

  public TaskWorkDTO dynamicMansionDescriptionTranslationId(Integer dynamicMansionDescriptionTranslationId) {
    this.dynamicMansionDescriptionTranslationId = dynamicMansionDescriptionTranslationId;
    return this;
  }

   /**
   * Id of the translation for task dynamic mansion selection operation
   * @return dynamicMansionDescriptionTranslationId
  **/
  @ApiModelProperty(value = "Id of the translation for task dynamic mansion selection operation")
  public Integer getDynamicMansionDescriptionTranslationId() {
    return dynamicMansionDescriptionTranslationId;
  }

  public void setDynamicMansionDescriptionTranslationId(Integer dynamicMansionDescriptionTranslationId) {
    this.dynamicMansionDescriptionTranslationId = dynamicMansionDescriptionTranslationId;
  }

  public TaskWorkDTO groupIcon(Boolean groupIcon) {
    this.groupIcon = groupIcon;
    return this;
  }

   /**
   * Icon for the group
   * @return groupIcon
  **/
  @ApiModelProperty(value = "Icon for the group")
  public Boolean isGroupIcon() {
    return groupIcon;
  }

  public void setGroupIcon(Boolean groupIcon) {
    this.groupIcon = groupIcon;
  }

  public TaskWorkDTO executers(List<UserCompleteDTO> executers) {
    this.executers = executers;
    return this;
  }

  public TaskWorkDTO addExecutersItem(UserCompleteDTO executersItem) {
    if (this.executers == null) {
      this.executers = new ArrayList<UserCompleteDTO>();
    }
    this.executers.add(executersItem);
    return this;
  }

   /**
   * Executers of the task
   * @return executers
  **/
  @ApiModelProperty(value = "Executers of the task")
  public List<UserCompleteDTO> getExecuters() {
    return executers;
  }

  public void setExecuters(List<UserCompleteDTO> executers) {
    this.executers = executers;
  }

  public TaskWorkDTO attachmentsVisible(Boolean attachmentsVisible) {
    this.attachmentsVisible = attachmentsVisible;
    return this;
  }

   /**
   * Attachments part visibility
   * @return attachmentsVisible
  **/
  @ApiModelProperty(value = "Attachments part visibility")
  public Boolean isAttachmentsVisible() {
    return attachmentsVisible;
  }

  public void setAttachmentsVisible(Boolean attachmentsVisible) {
    this.attachmentsVisible = attachmentsVisible;
  }

  public TaskWorkDTO detailsVisible(Boolean detailsVisible) {
    this.detailsVisible = detailsVisible;
    return this;
  }

   /**
   * Task details part visibility
   * @return detailsVisible
  **/
  @ApiModelProperty(value = "Task details part visibility")
  public Boolean isDetailsVisible() {
    return detailsVisible;
  }

  public void setDetailsVisible(Boolean detailsVisible) {
    this.detailsVisible = detailsVisible;
  }

  public TaskWorkDTO profilesVisible(Boolean profilesVisible) {
    this.profilesVisible = profilesVisible;
    return this;
  }

   /**
   * Profiles part visibility
   * @return profilesVisible
  **/
  @ApiModelProperty(value = "Profiles part visibility")
  public Boolean isProfilesVisible() {
    return profilesVisible;
  }

  public void setProfilesVisible(Boolean profilesVisible) {
    this.profilesVisible = profilesVisible;
  }

  public TaskWorkDTO notesVisible(Boolean notesVisible) {
    this.notesVisible = notesVisible;
    return this;
  }

   /**
   * Notes part visibility
   * @return notesVisible
  **/
  @ApiModelProperty(value = "Notes part visibility")
  public Boolean isNotesVisible() {
    return notesVisible;
  }

  public void setNotesVisible(Boolean notesVisible) {
    this.notesVisible = notesVisible;
  }

  public TaskWorkDTO historyVisible(Boolean historyVisible) {
    this.historyVisible = historyVisible;
    return this;
  }

   /**
   * History part visibility
   * @return historyVisible
  **/
  @ApiModelProperty(value = "History part visibility")
  public Boolean isHistoryVisible() {
    return historyVisible;
  }

  public void setHistoryVisible(Boolean historyVisible) {
    this.historyVisible = historyVisible;
  }

  public TaskWorkDTO instructionVisible(Boolean instructionVisible) {
    this.instructionVisible = instructionVisible;
    return this;
  }

   /**
   * Instructions part visibility
   * @return instructionVisible
  **/
  @ApiModelProperty(value = "Instructions part visibility")
  public Boolean isInstructionVisible() {
    return instructionVisible;
  }

  public void setInstructionVisible(Boolean instructionVisible) {
    this.instructionVisible = instructionVisible;
  }

  public TaskWorkDTO showProcessVisible(Boolean showProcessVisible) {
    this.showProcessVisible = showProcessVisible;
    return this;
  }

   /**
   * Show process command part visibility
   * @return showProcessVisible
  **/
  @ApiModelProperty(value = "Show process command part visibility")
  public Boolean isShowProcessVisible() {
    return showProcessVisible;
  }

  public void setShowProcessVisible(Boolean showProcessVisible) {
    this.showProcessVisible = showProcessVisible;
  }

  public TaskWorkDTO variablesVisible(Boolean variablesVisible) {
    this.variablesVisible = variablesVisible;
    return this;
  }

   /**
   * Variables part visibility
   * @return variablesVisible
  **/
  @ApiModelProperty(value = "Variables part visibility")
  public Boolean isVariablesVisible() {
    return variablesVisible;
  }

  public void setVariablesVisible(Boolean variablesVisible) {
    this.variablesVisible = variablesVisible;
  }

  public TaskWorkDTO exitStateComboVisible(Boolean exitStateComboVisible) {
    this.exitStateComboVisible = exitStateComboVisible;
    return this;
  }

   /**
   * Exit state part visibility
   * @return exitStateComboVisible
  **/
  @ApiModelProperty(value = "Exit state part visibility")
  public Boolean isExitStateComboVisible() {
    return exitStateComboVisible;
  }

  public void setExitStateComboVisible(Boolean exitStateComboVisible) {
    this.exitStateComboVisible = exitStateComboVisible;
  }

  public TaskWorkDTO operationsVisible(Boolean operationsVisible) {
    this.operationsVisible = operationsVisible;
    return this;
  }

   /**
   * Operations part visibility
   * @return operationsVisible
  **/
  @ApiModelProperty(value = "Operations part visibility")
  public Boolean isOperationsVisible() {
    return operationsVisible;
  }

  public void setOperationsVisible(Boolean operationsVisible) {
    this.operationsVisible = operationsVisible;
  }

  public TaskWorkDTO workFlowName(String workFlowName) {
    this.workFlowName = workFlowName;
    return this;
  }

   /**
   * Name of the workflow
   * @return workFlowName
  **/
  @ApiModelProperty(value = "Name of the workflow")
  public String getWorkFlowName() {
    return workFlowName;
  }

  public void setWorkFlowName(String workFlowName) {
    this.workFlowName = workFlowName;
  }

  public TaskWorkDTO workFlowDescription(String workFlowDescription) {
    this.workFlowDescription = workFlowDescription;
    return this;
  }

   /**
   * Description of the workflow
   * @return workFlowDescription
  **/
  @ApiModelProperty(value = "Description of the workflow")
  public String getWorkFlowDescription() {
    return workFlowDescription;
  }

  public void setWorkFlowDescription(String workFlowDescription) {
    this.workFlowDescription = workFlowDescription;
  }

  public TaskWorkDTO workFlowDetails(String workFlowDetails) {
    this.workFlowDetails = workFlowDetails;
    return this;
  }

   /**
   * Details of the workflow
   * @return workFlowDetails
  **/
  @ApiModelProperty(value = "Details of the workflow")
  public String getWorkFlowDetails() {
    return workFlowDetails;
  }

  public void setWorkFlowDetails(String workFlowDetails) {
    this.workFlowDetails = workFlowDetails;
  }

  public TaskWorkDTO workFlowColor(Integer workFlowColor) {
    this.workFlowColor = workFlowColor;
    return this;
  }

   /**
   * The color of the workflow
   * @return workFlowColor
  **/
  @ApiModelProperty(value = "The color of the workflow")
  public Integer getWorkFlowColor() {
    return workFlowColor;
  }

  public void setWorkFlowColor(Integer workFlowColor) {
    this.workFlowColor = workFlowColor;
  }

  public TaskWorkDTO showDesignerVisible(Boolean showDesignerVisible) {
    this.showDesignerVisible = showDesignerVisible;
    return this;
  }

   /**
   * Show designer command part visibility
   * @return showDesignerVisible
  **/
  @ApiModelProperty(value = "Show designer command part visibility")
  public Boolean isShowDesignerVisible() {
    return showDesignerVisible;
  }

  public void setShowDesignerVisible(Boolean showDesignerVisible) {
    this.showDesignerVisible = showDesignerVisible;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskWorkDTO taskWorkDTO = (TaskWorkDTO) o;
    return Objects.equals(this.id, taskWorkDTO.id) &&
        Objects.equals(this.processId, taskWorkDTO.processId) &&
        Objects.equals(this.workflowId, taskWorkDTO.workflowId) &&
        Objects.equals(this.notes, taskWorkDTO.notes) &&
        Objects.equals(this.attachments, taskWorkDTO.attachments) &&
        Objects.equals(this.docnumber, taskWorkDTO.docnumber) &&
        Objects.equals(this.revision, taskWorkDTO.revision) &&
        Objects.equals(this.startDate, taskWorkDTO.startDate) &&
        Objects.equals(this.taskName, taskWorkDTO.taskName) &&
        Objects.equals(this.taskDescription, taskWorkDTO.taskDescription) &&
        Objects.equals(this.user, taskWorkDTO.user) &&
        Objects.equals(this.endDate, taskWorkDTO.endDate) &&
        Objects.equals(this.state, taskWorkDTO.state) &&
        Objects.equals(this.expireDate, taskWorkDTO.expireDate) &&
        Objects.equals(this.principalProfileSecurity, taskWorkDTO.principalProfileSecurity) &&
        Objects.equals(this.nodeId, taskWorkDTO.nodeId) &&
        Objects.equals(this.userEnumSelection, taskWorkDTO.userEnumSelection) &&
        Objects.equals(this.newProfileInput, taskWorkDTO.newProfileInput) &&
        Objects.equals(this.profileEdit, taskWorkDTO.profileEdit) &&
        Objects.equals(this.folderInsert, taskWorkDTO.folderInsert) &&
        Objects.equals(this.priority, taskWorkDTO.priority) &&
        Objects.equals(this.modelId, taskWorkDTO.modelId) &&
        Objects.equals(this.taskType, taskWorkDTO.taskType) &&
        Objects.equals(this.executionMode, taskWorkDTO.executionMode) &&
        Objects.equals(this.mailNotification, taskWorkDTO.mailNotification) &&
        Objects.equals(this.automaticTaskFeedDate, taskWorkDTO.automaticTaskFeedDate) &&
        Objects.equals(this.passwordRequired, taskWorkDTO.passwordRequired) &&
        Objects.equals(this.newMemo, taskWorkDTO.newMemo) &&
        Objects.equals(this.readed, taskWorkDTO.readed) &&
        Objects.equals(this.asyncCommand, taskWorkDTO.asyncCommand) &&
        Objects.equals(this.editCopy, taskWorkDTO.editCopy) &&
        Objects.equals(this.takingChargeRequired, taskWorkDTO.takingChargeRequired) &&
        Objects.equals(this.taskDeadlineDate, taskWorkDTO.taskDeadlineDate) &&
        Objects.equals(this.taskActivationDate, taskWorkDTO.taskActivationDate) &&
        Objects.equals(this.professionalRoleSelectionDescription, taskWorkDTO.professionalRoleSelectionDescription) &&
        Objects.equals(this.processVariablesSetDescription, taskWorkDTO.processVariablesSetDescription) &&
        Objects.equals(this.organizationChartId, taskWorkDTO.organizationChartId) &&
        Objects.equals(this.delegationId, taskWorkDTO.delegationId) &&
        Objects.equals(this.openedTaskDate, taskWorkDTO.openedTaskDate) &&
        Objects.equals(this.exitState, taskWorkDTO.exitState) &&
        Objects.equals(this.groupTaskId, taskWorkDTO.groupTaskId) &&
        Objects.equals(this.organizationChartOriginalUserId, taskWorkDTO.organizationChartOriginalUserId) &&
        Objects.equals(this.originalUserId, taskWorkDTO.originalUserId) &&
        Objects.equals(this.externalTaskTypeId, taskWorkDTO.externalTaskTypeId) &&
        Objects.equals(this.manageMaster, taskWorkDTO.manageMaster) &&
        Objects.equals(this.waitUserExecutionMode, taskWorkDTO.waitUserExecutionMode) &&
        Objects.equals(this.manageInstruction, taskWorkDTO.manageInstruction) &&
        Objects.equals(this.htmlDescriptionEnabled, taskWorkDTO.htmlDescriptionEnabled) &&
        Objects.equals(this.dynamicMansionDescription, taskWorkDTO.dynamicMansionDescription) &&
        Objects.equals(this.partsVisibility, taskWorkDTO.partsVisibility) &&
        Objects.equals(this.defaultExitState, taskWorkDTO.defaultExitState) &&
        Objects.equals(this.reassignMode, taskWorkDTO.reassignMode) &&
        Objects.equals(this.autoAssignMode, taskWorkDTO.autoAssignMode) &&
        Objects.equals(this.nameTranslationId, taskWorkDTO.nameTranslationId) &&
        Objects.equals(this.descriptionTranslationId, taskWorkDTO.descriptionTranslationId) &&
        Objects.equals(this.professionalRolesDescriptionTranslationId, taskWorkDTO.professionalRolesDescriptionTranslationId) &&
        Objects.equals(this.variablesDescriptionTranslationId, taskWorkDTO.variablesDescriptionTranslationId) &&
        Objects.equals(this.htmlDescriptionTranslationId, taskWorkDTO.htmlDescriptionTranslationId) &&
        Objects.equals(this.dynamicMansionDescriptionTranslationId, taskWorkDTO.dynamicMansionDescriptionTranslationId) &&
        Objects.equals(this.groupIcon, taskWorkDTO.groupIcon) &&
        Objects.equals(this.executers, taskWorkDTO.executers) &&
        Objects.equals(this.attachmentsVisible, taskWorkDTO.attachmentsVisible) &&
        Objects.equals(this.detailsVisible, taskWorkDTO.detailsVisible) &&
        Objects.equals(this.profilesVisible, taskWorkDTO.profilesVisible) &&
        Objects.equals(this.notesVisible, taskWorkDTO.notesVisible) &&
        Objects.equals(this.historyVisible, taskWorkDTO.historyVisible) &&
        Objects.equals(this.instructionVisible, taskWorkDTO.instructionVisible) &&
        Objects.equals(this.showProcessVisible, taskWorkDTO.showProcessVisible) &&
        Objects.equals(this.variablesVisible, taskWorkDTO.variablesVisible) &&
        Objects.equals(this.exitStateComboVisible, taskWorkDTO.exitStateComboVisible) &&
        Objects.equals(this.operationsVisible, taskWorkDTO.operationsVisible) &&
        Objects.equals(this.workFlowName, taskWorkDTO.workFlowName) &&
        Objects.equals(this.workFlowDescription, taskWorkDTO.workFlowDescription) &&
        Objects.equals(this.workFlowDetails, taskWorkDTO.workFlowDetails) &&
        Objects.equals(this.workFlowColor, taskWorkDTO.workFlowColor) &&
        Objects.equals(this.showDesignerVisible, taskWorkDTO.showDesignerVisible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, processId, workflowId, notes, attachments, docnumber, revision, startDate, taskName, taskDescription, user, endDate, state, expireDate, principalProfileSecurity, nodeId, userEnumSelection, newProfileInput, profileEdit, folderInsert, priority, modelId, taskType, executionMode, mailNotification, automaticTaskFeedDate, passwordRequired, newMemo, readed, asyncCommand, editCopy, takingChargeRequired, taskDeadlineDate, taskActivationDate, professionalRoleSelectionDescription, processVariablesSetDescription, organizationChartId, delegationId, openedTaskDate, exitState, groupTaskId, organizationChartOriginalUserId, originalUserId, externalTaskTypeId, manageMaster, waitUserExecutionMode, manageInstruction, htmlDescriptionEnabled, dynamicMansionDescription, partsVisibility, defaultExitState, reassignMode, autoAssignMode, nameTranslationId, descriptionTranslationId, professionalRolesDescriptionTranslationId, variablesDescriptionTranslationId, htmlDescriptionTranslationId, dynamicMansionDescriptionTranslationId, groupIcon, executers, attachmentsVisible, detailsVisible, profilesVisible, notesVisible, historyVisible, instructionVisible, showProcessVisible, variablesVisible, exitStateComboVisible, operationsVisible, workFlowName, workFlowDescription, workFlowDetails, workFlowColor, showDesignerVisible);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskWorkDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    docnumber: ").append(toIndentedString(docnumber)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("    taskDescription: ").append(toIndentedString(taskDescription)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    expireDate: ").append(toIndentedString(expireDate)).append("\n");
    sb.append("    principalProfileSecurity: ").append(toIndentedString(principalProfileSecurity)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    userEnumSelection: ").append(toIndentedString(userEnumSelection)).append("\n");
    sb.append("    newProfileInput: ").append(toIndentedString(newProfileInput)).append("\n");
    sb.append("    profileEdit: ").append(toIndentedString(profileEdit)).append("\n");
    sb.append("    folderInsert: ").append(toIndentedString(folderInsert)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("    executionMode: ").append(toIndentedString(executionMode)).append("\n");
    sb.append("    mailNotification: ").append(toIndentedString(mailNotification)).append("\n");
    sb.append("    automaticTaskFeedDate: ").append(toIndentedString(automaticTaskFeedDate)).append("\n");
    sb.append("    passwordRequired: ").append(toIndentedString(passwordRequired)).append("\n");
    sb.append("    newMemo: ").append(toIndentedString(newMemo)).append("\n");
    sb.append("    readed: ").append(toIndentedString(readed)).append("\n");
    sb.append("    asyncCommand: ").append(toIndentedString(asyncCommand)).append("\n");
    sb.append("    editCopy: ").append(toIndentedString(editCopy)).append("\n");
    sb.append("    takingChargeRequired: ").append(toIndentedString(takingChargeRequired)).append("\n");
    sb.append("    taskDeadlineDate: ").append(toIndentedString(taskDeadlineDate)).append("\n");
    sb.append("    taskActivationDate: ").append(toIndentedString(taskActivationDate)).append("\n");
    sb.append("    professionalRoleSelectionDescription: ").append(toIndentedString(professionalRoleSelectionDescription)).append("\n");
    sb.append("    processVariablesSetDescription: ").append(toIndentedString(processVariablesSetDescription)).append("\n");
    sb.append("    organizationChartId: ").append(toIndentedString(organizationChartId)).append("\n");
    sb.append("    delegationId: ").append(toIndentedString(delegationId)).append("\n");
    sb.append("    openedTaskDate: ").append(toIndentedString(openedTaskDate)).append("\n");
    sb.append("    exitState: ").append(toIndentedString(exitState)).append("\n");
    sb.append("    groupTaskId: ").append(toIndentedString(groupTaskId)).append("\n");
    sb.append("    organizationChartOriginalUserId: ").append(toIndentedString(organizationChartOriginalUserId)).append("\n");
    sb.append("    originalUserId: ").append(toIndentedString(originalUserId)).append("\n");
    sb.append("    externalTaskTypeId: ").append(toIndentedString(externalTaskTypeId)).append("\n");
    sb.append("    manageMaster: ").append(toIndentedString(manageMaster)).append("\n");
    sb.append("    waitUserExecutionMode: ").append(toIndentedString(waitUserExecutionMode)).append("\n");
    sb.append("    manageInstruction: ").append(toIndentedString(manageInstruction)).append("\n");
    sb.append("    htmlDescriptionEnabled: ").append(toIndentedString(htmlDescriptionEnabled)).append("\n");
    sb.append("    dynamicMansionDescription: ").append(toIndentedString(dynamicMansionDescription)).append("\n");
    sb.append("    partsVisibility: ").append(toIndentedString(partsVisibility)).append("\n");
    sb.append("    defaultExitState: ").append(toIndentedString(defaultExitState)).append("\n");
    sb.append("    reassignMode: ").append(toIndentedString(reassignMode)).append("\n");
    sb.append("    autoAssignMode: ").append(toIndentedString(autoAssignMode)).append("\n");
    sb.append("    nameTranslationId: ").append(toIndentedString(nameTranslationId)).append("\n");
    sb.append("    descriptionTranslationId: ").append(toIndentedString(descriptionTranslationId)).append("\n");
    sb.append("    professionalRolesDescriptionTranslationId: ").append(toIndentedString(professionalRolesDescriptionTranslationId)).append("\n");
    sb.append("    variablesDescriptionTranslationId: ").append(toIndentedString(variablesDescriptionTranslationId)).append("\n");
    sb.append("    htmlDescriptionTranslationId: ").append(toIndentedString(htmlDescriptionTranslationId)).append("\n");
    sb.append("    dynamicMansionDescriptionTranslationId: ").append(toIndentedString(dynamicMansionDescriptionTranslationId)).append("\n");
    sb.append("    groupIcon: ").append(toIndentedString(groupIcon)).append("\n");
    sb.append("    executers: ").append(toIndentedString(executers)).append("\n");
    sb.append("    attachmentsVisible: ").append(toIndentedString(attachmentsVisible)).append("\n");
    sb.append("    detailsVisible: ").append(toIndentedString(detailsVisible)).append("\n");
    sb.append("    profilesVisible: ").append(toIndentedString(profilesVisible)).append("\n");
    sb.append("    notesVisible: ").append(toIndentedString(notesVisible)).append("\n");
    sb.append("    historyVisible: ").append(toIndentedString(historyVisible)).append("\n");
    sb.append("    instructionVisible: ").append(toIndentedString(instructionVisible)).append("\n");
    sb.append("    showProcessVisible: ").append(toIndentedString(showProcessVisible)).append("\n");
    sb.append("    variablesVisible: ").append(toIndentedString(variablesVisible)).append("\n");
    sb.append("    exitStateComboVisible: ").append(toIndentedString(exitStateComboVisible)).append("\n");
    sb.append("    operationsVisible: ").append(toIndentedString(operationsVisible)).append("\n");
    sb.append("    workFlowName: ").append(toIndentedString(workFlowName)).append("\n");
    sb.append("    workFlowDescription: ").append(toIndentedString(workFlowDescription)).append("\n");
    sb.append("    workFlowDetails: ").append(toIndentedString(workFlowDetails)).append("\n");
    sb.append("    workFlowColor: ").append(toIndentedString(workFlowColor)).append("\n");
    sb.append("    showDesignerVisible: ").append(toIndentedString(showDesignerVisible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

