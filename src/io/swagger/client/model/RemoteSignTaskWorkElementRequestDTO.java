/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.SignPdfPropertiesDTO;
import java.io.IOException;

/**
 * Class of remote signature field
 */
@ApiModel(description = "Class of remote signature field")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-11T12:02:47.866+02:00")
public class RemoteSignTaskWorkElementRequestDTO {
  @SerializedName("taskWorkId")
  private Integer taskWorkId = null;

  @SerializedName("pdfEmbeddedMode")
  private Boolean pdfEmbeddedMode = null;

  @SerializedName("signPdfProperties")
  private SignPdfPropertiesDTO signPdfProperties = null;

  public RemoteSignTaskWorkElementRequestDTO taskWorkId(Integer taskWorkId) {
    this.taskWorkId = taskWorkId;
    return this;
  }

   /**
   * TaskWork id
   * @return taskWorkId
  **/
  @ApiModelProperty(value = "TaskWork id")
  public Integer getTaskWorkId() {
    return taskWorkId;
  }

  public void setTaskWorkId(Integer taskWorkId) {
    this.taskWorkId = taskWorkId;
  }

  public RemoteSignTaskWorkElementRequestDTO pdfEmbeddedMode(Boolean pdfEmbeddedMode) {
    this.pdfEmbeddedMode = pdfEmbeddedMode;
    return this;
  }

   /**
   * Enabled Pdf Embedded Signature
   * @return pdfEmbeddedMode
  **/
  @ApiModelProperty(value = "Enabled Pdf Embedded Signature")
  public Boolean isPdfEmbeddedMode() {
    return pdfEmbeddedMode;
  }

  public void setPdfEmbeddedMode(Boolean pdfEmbeddedMode) {
    this.pdfEmbeddedMode = pdfEmbeddedMode;
  }

  public RemoteSignTaskWorkElementRequestDTO signPdfProperties(SignPdfPropertiesDTO signPdfProperties) {
    this.signPdfProperties = signPdfProperties;
    return this;
  }

   /**
   * Settings of pdf signature
   * @return signPdfProperties
  **/
  @ApiModelProperty(value = "Settings of pdf signature")
  public SignPdfPropertiesDTO getSignPdfProperties() {
    return signPdfProperties;
  }

  public void setSignPdfProperties(SignPdfPropertiesDTO signPdfProperties) {
    this.signPdfProperties = signPdfProperties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteSignTaskWorkElementRequestDTO remoteSignTaskWorkElementRequestDTO = (RemoteSignTaskWorkElementRequestDTO) o;
    return Objects.equals(this.taskWorkId, remoteSignTaskWorkElementRequestDTO.taskWorkId) &&
        Objects.equals(this.pdfEmbeddedMode, remoteSignTaskWorkElementRequestDTO.pdfEmbeddedMode) &&
        Objects.equals(this.signPdfProperties, remoteSignTaskWorkElementRequestDTO.signPdfProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskWorkId, pdfEmbeddedMode, signPdfProperties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteSignTaskWorkElementRequestDTO {\n");
    
    sb.append("    taskWorkId: ").append(toIndentedString(taskWorkId)).append("\n");
    sb.append("    pdfEmbeddedMode: ").append(toIndentedString(pdfEmbeddedMode)).append("\n");
    sb.append("    signPdfProperties: ").append(toIndentedString(signPdfProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

