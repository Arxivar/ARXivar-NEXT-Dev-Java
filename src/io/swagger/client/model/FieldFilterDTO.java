/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.FieldBaseForSearchDTO;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * This class contain information about avaible filters for a given additional field
 */
@ApiModel(description = "This class contain information about avaible filters for a given additional field")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-11T12:02:47.866+02:00")
public class FieldFilterDTO {
  @SerializedName("keyField")
  private String keyField = null;

  @SerializedName("selectField")
  private String selectField = null;

  @SerializedName("filters")
  private List<FieldBaseForSearchDTO> filters = null;

  @SerializedName("showFilled")
  private Boolean showFilled = null;

  @SerializedName("defaultField")
  private String defaultField = null;

  public FieldFilterDTO keyField(String keyField) {
    this.keyField = keyField;
    return this;
  }

   /**
   * The column name of the property that the client have to use for set the value of the additional field
   * @return keyField
  **/
  @ApiModelProperty(value = "The column name of the property that the client have to use for set the value of the additional field")
  public String getKeyField() {
    return keyField;
  }

  public void setKeyField(String keyField) {
    this.keyField = keyField;
  }

  public FieldFilterDTO selectField(String selectField) {
    this.selectField = selectField;
    return this;
  }

   /**
   * The column name of the property that the client have to use for display the value of the additional field
   * @return selectField
  **/
  @ApiModelProperty(value = "The column name of the property that the client have to use for display the value of the additional field")
  public String getSelectField() {
    return selectField;
  }

  public void setSelectField(String selectField) {
    this.selectField = selectField;
  }

  public FieldFilterDTO filters(List<FieldBaseForSearchDTO> filters) {
    this.filters = filters;
    return this;
  }

  public FieldFilterDTO addFiltersItem(FieldBaseForSearchDTO filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<FieldBaseForSearchDTO>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Array of avaible filters for the additional field
   * @return filters
  **/
  @ApiModelProperty(value = "Array of avaible filters for the additional field")
  public List<FieldBaseForSearchDTO> getFilters() {
    return filters;
  }

  public void setFilters(List<FieldBaseForSearchDTO> filters) {
    this.filters = filters;
  }

  public FieldFilterDTO showFilled(Boolean showFilled) {
    this.showFilled = showFilled;
    return this;
  }

   /**
   * This property show to client if the search for this field has to be prefilled or not
   * @return showFilled
  **/
  @ApiModelProperty(value = "This property show to client if the search for this field has to be prefilled or not")
  public Boolean isShowFilled() {
    return showFilled;
  }

  public void setShowFilled(Boolean showFilled) {
    this.showFilled = showFilled;
  }

  public FieldFilterDTO defaultField(String defaultField) {
    this.defaultField = defaultField;
    return this;
  }

   /**
   * The name of filter to use for this field by default
   * @return defaultField
  **/
  @ApiModelProperty(value = "The name of filter to use for this field by default")
  public String getDefaultField() {
    return defaultField;
  }

  public void setDefaultField(String defaultField) {
    this.defaultField = defaultField;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldFilterDTO fieldFilterDTO = (FieldFilterDTO) o;
    return Objects.equals(this.keyField, fieldFilterDTO.keyField) &&
        Objects.equals(this.selectField, fieldFilterDTO.selectField) &&
        Objects.equals(this.filters, fieldFilterDTO.filters) &&
        Objects.equals(this.showFilled, fieldFilterDTO.showFilled) &&
        Objects.equals(this.defaultField, fieldFilterDTO.defaultField);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyField, selectField, filters, showFilled, defaultField);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldFilterDTO {\n");
    
    sb.append("    keyField: ").append(toIndentedString(keyField)).append("\n");
    sb.append("    selectField: ").append(toIndentedString(selectField)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    showFilled: ").append(toIndentedString(showFilled)).append("\n");
    sb.append("    defaultField: ").append(toIndentedString(defaultField)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

