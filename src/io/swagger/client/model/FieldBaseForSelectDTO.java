/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.OrderBy;
import java.io.IOException;

/**
 * Class of field for select in search
 */
@ApiModel(description = "Class of field for select in search")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-11T12:02:47.866+02:00")
public class FieldBaseForSelectDTO {
  @SerializedName("sqlSelectField")
  private String sqlSelectField = null;

  @SerializedName("toCalculate")
  private Boolean toCalculate = null;

  @SerializedName("index")
  private Integer index = null;

  @SerializedName("selected")
  private Boolean selected = null;

  @SerializedName("fieldType")
  private Integer fieldType = null;

  @SerializedName("orderBy")
  private OrderBy orderBy = null;

  @SerializedName("externalId")
  private String externalId = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("userSelectionEnabled")
  private Boolean userSelectionEnabled = null;

  @SerializedName("userSelectionGroup")
  private Integer userSelectionGroup = null;

  public FieldBaseForSelectDTO sqlSelectField(String sqlSelectField) {
    this.sqlSelectField = sqlSelectField;
    return this;
  }

   /**
   * Field in database
   * @return sqlSelectField
  **/
  @ApiModelProperty(value = "Field in database")
  public String getSqlSelectField() {
    return sqlSelectField;
  }

  public void setSqlSelectField(String sqlSelectField) {
    this.sqlSelectField = sqlSelectField;
  }

  public FieldBaseForSelectDTO toCalculate(Boolean toCalculate) {
    this.toCalculate = toCalculate;
    return this;
  }

   /**
   * Calculate
   * @return toCalculate
  **/
  @ApiModelProperty(value = "Calculate")
  public Boolean isToCalculate() {
    return toCalculate;
  }

  public void setToCalculate(Boolean toCalculate) {
    this.toCalculate = toCalculate;
  }

  public FieldBaseForSelectDTO index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Order
   * @return index
  **/
  @ApiModelProperty(value = "Order")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public FieldBaseForSelectDTO selected(Boolean selected) {
    this.selected = selected;
    return this;
  }

   /**
   * Selected
   * @return selected
  **/
  @ApiModelProperty(value = "Selected")
  public Boolean isSelected() {
    return selected;
  }

  public void setSelected(Boolean selected) {
    this.selected = selected;
  }

  public FieldBaseForSelectDTO fieldType(Integer fieldType) {
    this.fieldType = fieldType;
    return this;
  }

   /**
   * Possible values:  0: Standard  1: Group  2: Additional 
   * @return fieldType
  **/
  @ApiModelProperty(value = "Possible values:  0: Standard  1: Group  2: Additional ")
  public Integer getFieldType() {
    return fieldType;
  }

  public void setFieldType(Integer fieldType) {
    this.fieldType = fieldType;
  }

  public FieldBaseForSelectDTO orderBy(OrderBy orderBy) {
    this.orderBy = orderBy;
    return this;
  }

   /**
   * Order on the results of the search
   * @return orderBy
  **/
  @ApiModelProperty(value = "Order on the results of the search")
  public OrderBy getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(OrderBy orderBy) {
    this.orderBy = orderBy;
  }

  public FieldBaseForSelectDTO externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * External Identifier
   * @return externalId
  **/
  @ApiModelProperty(value = "External Identifier")
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }

  public FieldBaseForSelectDTO label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Label
   * @return label
  **/
  @ApiModelProperty(value = "Label")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public FieldBaseForSelectDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name
   * @return name
  **/
  @ApiModelProperty(value = "Name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public FieldBaseForSelectDTO userSelectionEnabled(Boolean userSelectionEnabled) {
    this.userSelectionEnabled = userSelectionEnabled;
    return this;
  }

   /**
   * Enabled the selection
   * @return userSelectionEnabled
  **/
  @ApiModelProperty(value = "Enabled the selection")
  public Boolean isUserSelectionEnabled() {
    return userSelectionEnabled;
  }

  public void setUserSelectionEnabled(Boolean userSelectionEnabled) {
    this.userSelectionEnabled = userSelectionEnabled;
  }

  public FieldBaseForSelectDTO userSelectionGroup(Integer userSelectionGroup) {
    this.userSelectionGroup = userSelectionGroup;
    return this;
  }

   /**
   * Possible values:  0: Icon  1: Standard  2: Additional 
   * @return userSelectionGroup
  **/
  @ApiModelProperty(value = "Possible values:  0: Icon  1: Standard  2: Additional ")
  public Integer getUserSelectionGroup() {
    return userSelectionGroup;
  }

  public void setUserSelectionGroup(Integer userSelectionGroup) {
    this.userSelectionGroup = userSelectionGroup;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldBaseForSelectDTO fieldBaseForSelectDTO = (FieldBaseForSelectDTO) o;
    return Objects.equals(this.sqlSelectField, fieldBaseForSelectDTO.sqlSelectField) &&
        Objects.equals(this.toCalculate, fieldBaseForSelectDTO.toCalculate) &&
        Objects.equals(this.index, fieldBaseForSelectDTO.index) &&
        Objects.equals(this.selected, fieldBaseForSelectDTO.selected) &&
        Objects.equals(this.fieldType, fieldBaseForSelectDTO.fieldType) &&
        Objects.equals(this.orderBy, fieldBaseForSelectDTO.orderBy) &&
        Objects.equals(this.externalId, fieldBaseForSelectDTO.externalId) &&
        Objects.equals(this.label, fieldBaseForSelectDTO.label) &&
        Objects.equals(this.name, fieldBaseForSelectDTO.name) &&
        Objects.equals(this.userSelectionEnabled, fieldBaseForSelectDTO.userSelectionEnabled) &&
        Objects.equals(this.userSelectionGroup, fieldBaseForSelectDTO.userSelectionGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sqlSelectField, toCalculate, index, selected, fieldType, orderBy, externalId, label, name, userSelectionEnabled, userSelectionGroup);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldBaseForSelectDTO {\n");
    
    sb.append("    sqlSelectField: ").append(toIndentedString(sqlSelectField)).append("\n");
    sb.append("    toCalculate: ").append(toIndentedString(toCalculate)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    userSelectionEnabled: ").append(toIndentedString(userSelectionEnabled)).append("\n");
    sb.append("    userSelectionGroup: ").append(toIndentedString(userSelectionGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

