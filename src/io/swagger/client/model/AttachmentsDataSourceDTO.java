/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.RowSearchResult;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * AttachmentsDataSourceDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-11T12:02:47.866+02:00")
public class AttachmentsDataSourceDTO {
  @SerializedName("externalAttachments")
  private List<RowSearchResult> externalAttachments = null;

  @SerializedName("internalAttachments")
  private List<RowSearchResult> internalAttachments = null;

  public AttachmentsDataSourceDTO externalAttachments(List<RowSearchResult> externalAttachments) {
    this.externalAttachments = externalAttachments;
    return this;
  }

  public AttachmentsDataSourceDTO addExternalAttachmentsItem(RowSearchResult externalAttachmentsItem) {
    if (this.externalAttachments == null) {
      this.externalAttachments = new ArrayList<RowSearchResult>();
    }
    this.externalAttachments.add(externalAttachmentsItem);
    return this;
  }

   /**
   * Get externalAttachments
   * @return externalAttachments
  **/
  @ApiModelProperty(value = "")
  public List<RowSearchResult> getExternalAttachments() {
    return externalAttachments;
  }

  public void setExternalAttachments(List<RowSearchResult> externalAttachments) {
    this.externalAttachments = externalAttachments;
  }

  public AttachmentsDataSourceDTO internalAttachments(List<RowSearchResult> internalAttachments) {
    this.internalAttachments = internalAttachments;
    return this;
  }

  public AttachmentsDataSourceDTO addInternalAttachmentsItem(RowSearchResult internalAttachmentsItem) {
    if (this.internalAttachments == null) {
      this.internalAttachments = new ArrayList<RowSearchResult>();
    }
    this.internalAttachments.add(internalAttachmentsItem);
    return this;
  }

   /**
   * Get internalAttachments
   * @return internalAttachments
  **/
  @ApiModelProperty(value = "")
  public List<RowSearchResult> getInternalAttachments() {
    return internalAttachments;
  }

  public void setInternalAttachments(List<RowSearchResult> internalAttachments) {
    this.internalAttachments = internalAttachments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachmentsDataSourceDTO attachmentsDataSourceDTO = (AttachmentsDataSourceDTO) o;
    return Objects.equals(this.externalAttachments, attachmentsDataSourceDTO.externalAttachments) &&
        Objects.equals(this.internalAttachments, attachmentsDataSourceDTO.internalAttachments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalAttachments, internalAttachments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachmentsDataSourceDTO {\n");
    
    sb.append("    externalAttachments: ").append(toIndentedString(externalAttachments)).append("\n");
    sb.append("    internalAttachments: ").append(toIndentedString(internalAttachments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

