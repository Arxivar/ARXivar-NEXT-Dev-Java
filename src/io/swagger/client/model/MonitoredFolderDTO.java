/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * MonitoredFolderDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-11T12:02:47.866+02:00")
public class MonitoredFolderDTO {
  @SerializedName("id")
  private String id = null;

  @SerializedName("userId")
  private Integer userId = null;

  @SerializedName("type")
  private Integer type = null;

  @SerializedName("maskId")
  private String maskId = null;

  @SerializedName("predefinedProfileId")
  private Integer predefinedProfileId = null;

  @SerializedName("useSubFolders")
  private Boolean useSubFolders = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("parseMode")
  private Integer parseMode = null;

  @SerializedName("characterSeparator")
  private String characterSeparator = null;

  @SerializedName("softwareType")
  private Integer softwareType = null;

  @SerializedName("operativity")
  private Integer operativity = null;

  public MonitoredFolderDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public MonitoredFolderDTO userId(Integer userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @ApiModelProperty(value = "")
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }

  public MonitoredFolderDTO type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * Possible values:  0: Manual  1: Automatic  2: Wizard 
   * @return type
  **/
  @ApiModelProperty(value = "Possible values:  0: Manual  1: Automatic  2: Wizard ")
  public Integer getType() {
    return type;
  }

  public void setType(Integer type) {
    this.type = type;
  }

  public MonitoredFolderDTO maskId(String maskId) {
    this.maskId = maskId;
    return this;
  }

   /**
   * Get maskId
   * @return maskId
  **/
  @ApiModelProperty(value = "")
  public String getMaskId() {
    return maskId;
  }

  public void setMaskId(String maskId) {
    this.maskId = maskId;
  }

  public MonitoredFolderDTO predefinedProfileId(Integer predefinedProfileId) {
    this.predefinedProfileId = predefinedProfileId;
    return this;
  }

   /**
   * Get predefinedProfileId
   * @return predefinedProfileId
  **/
  @ApiModelProperty(value = "")
  public Integer getPredefinedProfileId() {
    return predefinedProfileId;
  }

  public void setPredefinedProfileId(Integer predefinedProfileId) {
    this.predefinedProfileId = predefinedProfileId;
  }

  public MonitoredFolderDTO useSubFolders(Boolean useSubFolders) {
    this.useSubFolders = useSubFolders;
    return this;
  }

   /**
   * Get useSubFolders
   * @return useSubFolders
  **/
  @ApiModelProperty(value = "")
  public Boolean isUseSubFolders() {
    return useSubFolders;
  }

  public void setUseSubFolders(Boolean useSubFolders) {
    this.useSubFolders = useSubFolders;
  }

  public MonitoredFolderDTO path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @ApiModelProperty(value = "")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public MonitoredFolderDTO parseMode(Integer parseMode) {
    this.parseMode = parseMode;
    return this;
  }

   /**
   * Possible values:  0: ByPosition  1: BySeparator  2: None 
   * @return parseMode
  **/
  @ApiModelProperty(value = "Possible values:  0: ByPosition  1: BySeparator  2: None ")
  public Integer getParseMode() {
    return parseMode;
  }

  public void setParseMode(Integer parseMode) {
    this.parseMode = parseMode;
  }

  public MonitoredFolderDTO characterSeparator(String characterSeparator) {
    this.characterSeparator = characterSeparator;
    return this;
  }

   /**
   * Get characterSeparator
   * @return characterSeparator
  **/
  @ApiModelProperty(value = "")
  public String getCharacterSeparator() {
    return characterSeparator;
  }

  public void setCharacterSeparator(String characterSeparator) {
    this.characterSeparator = characterSeparator;
  }

  public MonitoredFolderDTO softwareType(Integer softwareType) {
    this.softwareType = softwareType;
    return this;
  }

   /**
   * Possible values:  0: Generic  1: ArxivarServer  2: ArxivarOcr  3: ArxivarFax  4: ArxivarBarcode  5: ArxivarSpoolRecPro  6: ArxivarSpoolPdf  7: ArxivarSpoolConsole  8: ArxivarWeb  9: ArxivarPmArchiviazione  10: ArxivarPmRubrica  11: ArxivarPmUsersAndGroups  12: ArxivarPmAllegati  13: ArxivarUnitTest  14: ArxivarStartWorkflow  15: ArxivarMailer  16: ArxivarArxService  17: ArxivarPostalizzatore  18: ArxivarSigner  19: ArxivarSdk  20: SAPR3  21: ArxivarThumbnail  22: ArxivarSharedDocument  23: ArxivarDownloaderDocument  24: ArxivarClient  25: ArxivarAWP  26: ArxivarPmOrganizationChart  27: ArxivarMobile  28: Credemtel  29: ArxivarRelationService  30: ArxivarPmLogonProviderAssoc  31: ArxivarMassiveUpdates  32: ArxivarMobileService  33: ArxivarMobileApp  34: ArxivarFasciculationService  35: ArxivarPushNotificationsService  36: ArxivarIX  37: ArxivarPmDocumentDeleting  38: ArxivarMobileOfficeSign  39: GenericWebService  40: ArxivarIndex  41: ArxDrive  42: ArxDriveExtension  43: ArxivarSmartTaskApp  44: ArxDriveMobile  45: Unimatica  46: Eni  47: ArxivarSwapOutService  48: ArxivarSuiteClient  49: ArxivarServerWcf  50: ArxAuthService  51: ArxivarSuiteServer  52: ArxivarSetup  53: ImapPlugin  54: ArxLinkClient  55: BiometricSign  56: ArxCommand  57: ArxivarPmFlatFileTextWriter  58: ArxAssistant  59: ArxLocalSign 
   * @return softwareType
  **/
  @ApiModelProperty(value = "Possible values:  0: Generic  1: ArxivarServer  2: ArxivarOcr  3: ArxivarFax  4: ArxivarBarcode  5: ArxivarSpoolRecPro  6: ArxivarSpoolPdf  7: ArxivarSpoolConsole  8: ArxivarWeb  9: ArxivarPmArchiviazione  10: ArxivarPmRubrica  11: ArxivarPmUsersAndGroups  12: ArxivarPmAllegati  13: ArxivarUnitTest  14: ArxivarStartWorkflow  15: ArxivarMailer  16: ArxivarArxService  17: ArxivarPostalizzatore  18: ArxivarSigner  19: ArxivarSdk  20: SAPR3  21: ArxivarThumbnail  22: ArxivarSharedDocument  23: ArxivarDownloaderDocument  24: ArxivarClient  25: ArxivarAWP  26: ArxivarPmOrganizationChart  27: ArxivarMobile  28: Credemtel  29: ArxivarRelationService  30: ArxivarPmLogonProviderAssoc  31: ArxivarMassiveUpdates  32: ArxivarMobileService  33: ArxivarMobileApp  34: ArxivarFasciculationService  35: ArxivarPushNotificationsService  36: ArxivarIX  37: ArxivarPmDocumentDeleting  38: ArxivarMobileOfficeSign  39: GenericWebService  40: ArxivarIndex  41: ArxDrive  42: ArxDriveExtension  43: ArxivarSmartTaskApp  44: ArxDriveMobile  45: Unimatica  46: Eni  47: ArxivarSwapOutService  48: ArxivarSuiteClient  49: ArxivarServerWcf  50: ArxAuthService  51: ArxivarSuiteServer  52: ArxivarSetup  53: ImapPlugin  54: ArxLinkClient  55: BiometricSign  56: ArxCommand  57: ArxivarPmFlatFileTextWriter  58: ArxAssistant  59: ArxLocalSign ")
  public Integer getSoftwareType() {
    return softwareType;
  }

  public void setSoftwareType(Integer softwareType) {
    this.softwareType = softwareType;
  }

  public MonitoredFolderDTO operativity(Integer operativity) {
    this.operativity = operativity;
    return this;
  }

   /**
   * Possible values:  0: AskConfirm  1: Proceed  2: Buffer 
   * @return operativity
  **/
  @ApiModelProperty(value = "Possible values:  0: AskConfirm  1: Proceed  2: Buffer ")
  public Integer getOperativity() {
    return operativity;
  }

  public void setOperativity(Integer operativity) {
    this.operativity = operativity;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoredFolderDTO monitoredFolderDTO = (MonitoredFolderDTO) o;
    return Objects.equals(this.id, monitoredFolderDTO.id) &&
        Objects.equals(this.userId, monitoredFolderDTO.userId) &&
        Objects.equals(this.type, monitoredFolderDTO.type) &&
        Objects.equals(this.maskId, monitoredFolderDTO.maskId) &&
        Objects.equals(this.predefinedProfileId, monitoredFolderDTO.predefinedProfileId) &&
        Objects.equals(this.useSubFolders, monitoredFolderDTO.useSubFolders) &&
        Objects.equals(this.path, monitoredFolderDTO.path) &&
        Objects.equals(this.parseMode, monitoredFolderDTO.parseMode) &&
        Objects.equals(this.characterSeparator, monitoredFolderDTO.characterSeparator) &&
        Objects.equals(this.softwareType, monitoredFolderDTO.softwareType) &&
        Objects.equals(this.operativity, monitoredFolderDTO.operativity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, type, maskId, predefinedProfileId, useSubFolders, path, parseMode, characterSeparator, softwareType, operativity);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoredFolderDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    maskId: ").append(toIndentedString(maskId)).append("\n");
    sb.append("    predefinedProfileId: ").append(toIndentedString(predefinedProfileId)).append("\n");
    sb.append("    useSubFolders: ").append(toIndentedString(useSubFolders)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    parseMode: ").append(toIndentedString(parseMode)).append("\n");
    sb.append("    characterSeparator: ").append(toIndentedString(characterSeparator)).append("\n");
    sb.append("    softwareType: ").append(toIndentedString(softwareType)).append("\n");
    sb.append("    operativity: ").append(toIndentedString(operativity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

