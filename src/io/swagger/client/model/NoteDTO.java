/*
 * Abletech.Arxivar.Server.WebApi.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.joda.time.DateTime;

/**
 * Class of note
 */
@ApiModel(description = "Class of note")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-11T12:02:47.866+02:00")
public class NoteDTO {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("docnumber")
  private Integer docnumber = null;

  @SerializedName("user")
  private Integer user = null;

  @SerializedName("userCompleteName")
  private String userCompleteName = null;

  @SerializedName("creationDate")
  private DateTime creationDate = null;

  @SerializedName("comment")
  private String comment = null;

  @SerializedName("revision")
  private Integer revision = null;

  @SerializedName("aosflag")
  private Boolean aosflag = null;

  @SerializedName("countersTable")
  private Integer countersTable = null;

  @SerializedName("externalId")
  private Integer externalId = null;

  public NoteDTO id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier
   * @return id
  **/
  @ApiModelProperty(value = "Identifier")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public NoteDTO docnumber(Integer docnumber) {
    this.docnumber = docnumber;
    return this;
  }

   /**
   * Document Identifier
   * @return docnumber
  **/
  @ApiModelProperty(value = "Document Identifier")
  public Integer getDocnumber() {
    return docnumber;
  }

  public void setDocnumber(Integer docnumber) {
    this.docnumber = docnumber;
  }

  public NoteDTO user(Integer user) {
    this.user = user;
    return this;
  }

   /**
   * Author
   * @return user
  **/
  @ApiModelProperty(value = "Author")
  public Integer getUser() {
    return user;
  }

  public void setUser(Integer user) {
    this.user = user;
  }

  public NoteDTO userCompleteName(String userCompleteName) {
    this.userCompleteName = userCompleteName;
    return this;
  }

   /**
   * Author Name
   * @return userCompleteName
  **/
  @ApiModelProperty(value = "Author Name")
  public String getUserCompleteName() {
    return userCompleteName;
  }

  public void setUserCompleteName(String userCompleteName) {
    this.userCompleteName = userCompleteName;
  }

  public NoteDTO creationDate(DateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Creation Date
   * @return creationDate
  **/
  @ApiModelProperty(value = "Creation Date")
  public DateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(DateTime creationDate) {
    this.creationDate = creationDate;
  }

  public NoteDTO comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Text
   * @return comment
  **/
  @ApiModelProperty(value = "Text")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public NoteDTO revision(Integer revision) {
    this.revision = revision;
    return this;
  }

   /**
   * Document Revision
   * @return revision
  **/
  @ApiModelProperty(value = "Document Revision")
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }

  public NoteDTO aosflag(Boolean aosflag) {
    this.aosflag = aosflag;
    return this;
  }

   /**
   * Conservation
   * @return aosflag
  **/
  @ApiModelProperty(value = "Conservation")
  public Boolean isAosflag() {
    return aosflag;
  }

  public void setAosflag(Boolean aosflag) {
    this.aosflag = aosflag;
  }

  public NoteDTO countersTable(Integer countersTable) {
    this.countersTable = countersTable;
    return this;
  }

   /**
   * Possible values:  0: DM_ALLEGATIDOC  1: DM_ALLEGATIFAX  2: DM_ALLEGATIWORK  3: DM_ASSOCIAZIONI  4: DM_CAMPIPRATICA  5: DM_CAMPIPRATICHECBO  6: DM_CAMPISPECGRP  7: DM_CONTATTI  8: DM_FASCICOLI  9: DM_FAXOUT  10: DM_NOTE  11: DM_OPZIONI  12: DM_PERMESSI_FOLDER  13: DM_PERMESSI_RUBRICA  14: DM_PROFILE  15: DM_GRUPPI  16: DM_RUBRICA  17: DM_UTENTI  18: DM_REVISIONI  19: DM_SECURITY  20: DM_STATOSECURITY  21: DM_TIPIPRATICHE  22: DM_TABELLE  23: DM_TIPI_UTENTI  24: DM_ELENCO_ORG  25: DM_ORGANIGRAMMA  26: DM_ORGDESIGN  27: DM_CATRUBRICHE  28: DM_CAMPI  29: DM_CAMPI_VALORI  30: DM_RUBRICA_OPZIONALI  31: DM_NOTECONTATTI  32: DM_SECURITY_DOC  33: DM_NPCE_OUT  34: DM_LOG  35: DM_NPCE_LOG  36: DM_DESKTOP  37: DM_VARIABILIPROCESSO  38: DM_DATIPROFILO  39: DM_AUTOPROFILO  40: DM_PROTOCOLLI  41: DM_DATI_ENTE  42: DM_NUMERAZIONE  43: DM_FILEINFOLDER  44: DM_INOLTRO  45: DM_DOCMOV  46: DM_CAMPIMESSAGGIO  47: DM_DETTAGLIMAIL  48: DM_MAILOUT  49: DM_DELEGATI  50: DM_MSG  51: DM_ACCOUNT  52: DM_FOLDERTYPE  53: SD_ASSOCDOC  54: DM_COMBO  55: DM_REGOLEUNIVOCITA  56: DM_BARCODE  57: DM_DOCALLEGATI  58: DM_STARTWORKFLOW  59: DM_FILTRO  60: DM_ELENCOPRATICHE  61: DM_TESTO  62: DM_PROCBATCH  63: DM_EVENTIFLOW  64: DM_TRADUZIONI  65: DM_TIPIDOCUMENTO  66: DM_GRUPPIMODELLI  67: DM_ASSOCIAFOLDER_DATIPROFILO  68: DM_ASSOCIAFOLDER  69: DM_MODULIOFFICE  70: DM_EMERGENZA  71: DM_TASKEXECUTE  72: DM_NOTEWORK  73: DM_PERMESSIALLEGATI  74: DM_PROCESSDOC  75: DM_MASSIVEUPDATES  76: DM_MASSIVEUPDATES_DATIPROFILO  77: DM_MASSIVEUPDATES_DATA  78: DM_COMANDITASK  79: DM_TRADUZIONI_PKG  80: DM_FIGUREPROCESSO  81: DM_PROMEMORIA  82: DM_ALLEGATIPROMO  83: DM_SIGNDELEGATE  84: DM_SIGNCERT  85: DM_SIGNCERTLOCATION  86: DM_VARIABILIQUERY  87: DM_ASSOCIAFOLDER_MAPPING  88: DM_PERMESSINOTE  89: DM_WORKFLOW_EXTRAGRANT  90: DM_QUEUE  91: DM_QUEUEDETAIL  92: NOTHING  93: DM_CACHE  94: DM_THUMBNAIL  95: DM_SMSACCOUNT  96: DM_SHARING  97: DM_SHARING_DEFINITION  98: DM_SHARING_DETAIL  99: DM_SHARING_RECEIVER  100: DM_SHARING_OPERATION  101: DM_TASKWORK  102: DM_TASKWORK_CLOSE  103: DM_INSTRUCTIONS  104: DM_TASKS  105: DM_WORKFLOW  106: DM_AOO  107: DM_LOGONPROVIDERS  108: DM_MASSIVEUPDATES_MAPPING  109: DM_STORAGE  110: DM_TIPIDOC_DEFMAIL  111: DM_LOGS  112: DM_PN_DEVICE  113: DM_PN_NOTIFICATIONS  114: DM_COLLABORATION  115: DM_COLLABORATION_MASTER  116: DM_COLLABORATION_DETAIL  117: WS_VERSAMENTI  118: WS_VERSAMENTI_DETT_ATT  119: WS_VERSAMENTI_DETT_NOTE  120: WS_VERSAMENTI_DETT_DOC  121: WS_AOS  122: WS_AOS_MAPPING  123: WS_DOCTOIX  124: WS_DOCTOIX_DETAIL  125: WS_TIPIDOCUMENTO  126: WS_CREDENTIAL  127: WS_CLASSINORM  128: WS_CLASSINORM_FILTER  129: WS_TIPIDOC_EXPORT  130: WS_TIPIDOC_ROTT  131: WS_NOTIFY  132: WS_NOTIFY_MAPPING  133: DM_COLLABORATION_TEMPLATE  134: DM_COLLABORATION_TAKEOFF  135: DM_COLLABORATION_TEMPLATE_M  136: WS_CONFCLASSEIXCE  137: WS_CAMPIMETADATIIXCE  138: WS_DOCTOIXCE  139: WS_DOCTOIXCE_DETAIL  140: WS_VERSAMENTO  141: DM_PLUGINCUSTOM_DETT  142: DM_PLUGINCUSTOM  143: DM_PLUGINCUSTOMWF  144: DM_PLUGINCUSTOMWF_CONF  145: DM_LINKS  146: DM_LINKS_MANSDYN  147: DM_LINKS_MANSDYN_DETT  148: DM_MANSIONIDYNTASK  149: DM_FASCICOLI_ASSOCIAFOLDER  150: DM_WEBSERVICESWF_LINK  151: DM_TASKDOC_ESITI  152: DM_PLUGINCUSTOM_CONF  153: DM_PLUGINCUSTOM_CONFIP  154: DM_PLUGINCUSTOM_CONFUSER  155: DM_INDEX  156: WS_DOCTOIXCE_VALIDATION  157: DM_BARCODE_SETTINGS  158: DM_LOG_MASTER  159: DM_UTENTI_USEDPSW  160: DM_CAMPIMODULI_MATRICE  161: DM_MAPWORKFLOW  162: DM_ALLEGATIDOC_REV  163: DM_FASCICOLI_RULES  164: DM_FASCICOLIRULESDETAIL  165: DM_FASCICOLI_RULES_USERS  166: DM_ARXDRIVESHARERULE  167: DM_ARXDRIVESHARERULEUSERS  168: DM_LAYOUT  169: DM_LAYOUT_DETAILS  170: DM_FASCICOLI_MASK  171: DM_MAILWF  172: DM_CONV_MESSAGES  173: DM_CONVERSATION  174: DM_MAILWF_ARCHIVE 
   * @return countersTable
  **/
  @ApiModelProperty(value = "Possible values:  0: DM_ALLEGATIDOC  1: DM_ALLEGATIFAX  2: DM_ALLEGATIWORK  3: DM_ASSOCIAZIONI  4: DM_CAMPIPRATICA  5: DM_CAMPIPRATICHECBO  6: DM_CAMPISPECGRP  7: DM_CONTATTI  8: DM_FASCICOLI  9: DM_FAXOUT  10: DM_NOTE  11: DM_OPZIONI  12: DM_PERMESSI_FOLDER  13: DM_PERMESSI_RUBRICA  14: DM_PROFILE  15: DM_GRUPPI  16: DM_RUBRICA  17: DM_UTENTI  18: DM_REVISIONI  19: DM_SECURITY  20: DM_STATOSECURITY  21: DM_TIPIPRATICHE  22: DM_TABELLE  23: DM_TIPI_UTENTI  24: DM_ELENCO_ORG  25: DM_ORGANIGRAMMA  26: DM_ORGDESIGN  27: DM_CATRUBRICHE  28: DM_CAMPI  29: DM_CAMPI_VALORI  30: DM_RUBRICA_OPZIONALI  31: DM_NOTECONTATTI  32: DM_SECURITY_DOC  33: DM_NPCE_OUT  34: DM_LOG  35: DM_NPCE_LOG  36: DM_DESKTOP  37: DM_VARIABILIPROCESSO  38: DM_DATIPROFILO  39: DM_AUTOPROFILO  40: DM_PROTOCOLLI  41: DM_DATI_ENTE  42: DM_NUMERAZIONE  43: DM_FILEINFOLDER  44: DM_INOLTRO  45: DM_DOCMOV  46: DM_CAMPIMESSAGGIO  47: DM_DETTAGLIMAIL  48: DM_MAILOUT  49: DM_DELEGATI  50: DM_MSG  51: DM_ACCOUNT  52: DM_FOLDERTYPE  53: SD_ASSOCDOC  54: DM_COMBO  55: DM_REGOLEUNIVOCITA  56: DM_BARCODE  57: DM_DOCALLEGATI  58: DM_STARTWORKFLOW  59: DM_FILTRO  60: DM_ELENCOPRATICHE  61: DM_TESTO  62: DM_PROCBATCH  63: DM_EVENTIFLOW  64: DM_TRADUZIONI  65: DM_TIPIDOCUMENTO  66: DM_GRUPPIMODELLI  67: DM_ASSOCIAFOLDER_DATIPROFILO  68: DM_ASSOCIAFOLDER  69: DM_MODULIOFFICE  70: DM_EMERGENZA  71: DM_TASKEXECUTE  72: DM_NOTEWORK  73: DM_PERMESSIALLEGATI  74: DM_PROCESSDOC  75: DM_MASSIVEUPDATES  76: DM_MASSIVEUPDATES_DATIPROFILO  77: DM_MASSIVEUPDATES_DATA  78: DM_COMANDITASK  79: DM_TRADUZIONI_PKG  80: DM_FIGUREPROCESSO  81: DM_PROMEMORIA  82: DM_ALLEGATIPROMO  83: DM_SIGNDELEGATE  84: DM_SIGNCERT  85: DM_SIGNCERTLOCATION  86: DM_VARIABILIQUERY  87: DM_ASSOCIAFOLDER_MAPPING  88: DM_PERMESSINOTE  89: DM_WORKFLOW_EXTRAGRANT  90: DM_QUEUE  91: DM_QUEUEDETAIL  92: NOTHING  93: DM_CACHE  94: DM_THUMBNAIL  95: DM_SMSACCOUNT  96: DM_SHARING  97: DM_SHARING_DEFINITION  98: DM_SHARING_DETAIL  99: DM_SHARING_RECEIVER  100: DM_SHARING_OPERATION  101: DM_TASKWORK  102: DM_TASKWORK_CLOSE  103: DM_INSTRUCTIONS  104: DM_TASKS  105: DM_WORKFLOW  106: DM_AOO  107: DM_LOGONPROVIDERS  108: DM_MASSIVEUPDATES_MAPPING  109: DM_STORAGE  110: DM_TIPIDOC_DEFMAIL  111: DM_LOGS  112: DM_PN_DEVICE  113: DM_PN_NOTIFICATIONS  114: DM_COLLABORATION  115: DM_COLLABORATION_MASTER  116: DM_COLLABORATION_DETAIL  117: WS_VERSAMENTI  118: WS_VERSAMENTI_DETT_ATT  119: WS_VERSAMENTI_DETT_NOTE  120: WS_VERSAMENTI_DETT_DOC  121: WS_AOS  122: WS_AOS_MAPPING  123: WS_DOCTOIX  124: WS_DOCTOIX_DETAIL  125: WS_TIPIDOCUMENTO  126: WS_CREDENTIAL  127: WS_CLASSINORM  128: WS_CLASSINORM_FILTER  129: WS_TIPIDOC_EXPORT  130: WS_TIPIDOC_ROTT  131: WS_NOTIFY  132: WS_NOTIFY_MAPPING  133: DM_COLLABORATION_TEMPLATE  134: DM_COLLABORATION_TAKEOFF  135: DM_COLLABORATION_TEMPLATE_M  136: WS_CONFCLASSEIXCE  137: WS_CAMPIMETADATIIXCE  138: WS_DOCTOIXCE  139: WS_DOCTOIXCE_DETAIL  140: WS_VERSAMENTO  141: DM_PLUGINCUSTOM_DETT  142: DM_PLUGINCUSTOM  143: DM_PLUGINCUSTOMWF  144: DM_PLUGINCUSTOMWF_CONF  145: DM_LINKS  146: DM_LINKS_MANSDYN  147: DM_LINKS_MANSDYN_DETT  148: DM_MANSIONIDYNTASK  149: DM_FASCICOLI_ASSOCIAFOLDER  150: DM_WEBSERVICESWF_LINK  151: DM_TASKDOC_ESITI  152: DM_PLUGINCUSTOM_CONF  153: DM_PLUGINCUSTOM_CONFIP  154: DM_PLUGINCUSTOM_CONFUSER  155: DM_INDEX  156: WS_DOCTOIXCE_VALIDATION  157: DM_BARCODE_SETTINGS  158: DM_LOG_MASTER  159: DM_UTENTI_USEDPSW  160: DM_CAMPIMODULI_MATRICE  161: DM_MAPWORKFLOW  162: DM_ALLEGATIDOC_REV  163: DM_FASCICOLI_RULES  164: DM_FASCICOLIRULESDETAIL  165: DM_FASCICOLI_RULES_USERS  166: DM_ARXDRIVESHARERULE  167: DM_ARXDRIVESHARERULEUSERS  168: DM_LAYOUT  169: DM_LAYOUT_DETAILS  170: DM_FASCICOLI_MASK  171: DM_MAILWF  172: DM_CONV_MESSAGES  173: DM_CONVERSATION  174: DM_MAILWF_ARCHIVE ")
  public Integer getCountersTable() {
    return countersTable;
  }

  public void setCountersTable(Integer countersTable) {
    this.countersTable = countersTable;
  }

  public NoteDTO externalId(Integer externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * External Identifier
   * @return externalId
  **/
  @ApiModelProperty(value = "External Identifier")
  public Integer getExternalId() {
    return externalId;
  }

  public void setExternalId(Integer externalId) {
    this.externalId = externalId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NoteDTO noteDTO = (NoteDTO) o;
    return Objects.equals(this.id, noteDTO.id) &&
        Objects.equals(this.docnumber, noteDTO.docnumber) &&
        Objects.equals(this.user, noteDTO.user) &&
        Objects.equals(this.userCompleteName, noteDTO.userCompleteName) &&
        Objects.equals(this.creationDate, noteDTO.creationDate) &&
        Objects.equals(this.comment, noteDTO.comment) &&
        Objects.equals(this.revision, noteDTO.revision) &&
        Objects.equals(this.aosflag, noteDTO.aosflag) &&
        Objects.equals(this.countersTable, noteDTO.countersTable) &&
        Objects.equals(this.externalId, noteDTO.externalId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, docnumber, user, userCompleteName, creationDate, comment, revision, aosflag, countersTable, externalId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NoteDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    docnumber: ").append(toIndentedString(docnumber)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userCompleteName: ").append(toIndentedString(userCompleteName)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    aosflag: ").append(toIndentedString(aosflag)).append("\n");
    sb.append("    countersTable: ").append(toIndentedString(countersTable)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

